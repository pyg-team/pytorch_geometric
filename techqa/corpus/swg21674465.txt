Title: IBM Common causes for a "Blind SQL Injection" false positive in AppScan Enterprise - United States

Text:
 TECHNOTE (FAQ)

QUESTION
 What are the common causes for a "Blind SQL Injection" (bSQLi) False Positive in IBM Security AppScan Enterprise, and how do you verify them? 

CAUSE
Unlike a SQL Injection test, Blind SQL Injection does not require the response from the server to contain any specific SQL information or traces. It only requires evidence that the server responds differently when similar SQL strings but with opposing logic to the same input of the application are injected. In the case of AppScan Enterprise, an HTTP response is considered the different if it is less than 95% similar. 

As a result, bSQLi tests are far more susceptible to being false positive than others that look for more specific elements in the response, since many factors like server load/state could also cause a differing response from one request to another. AppScan itself can contribute to server load over the course of a scan because it might send thousands or millions of requests over a short period of time.


ANSWER
 

The following steps are recommended to verify bSQLi findings: 

 

 1. Always re-test findings individually. 
    
    This ensures they are tests under the smallest possible server load and will not be effected by the possible state changes on unrelated HTTP requests during the scan. If that was the cause of the false positive, it should disappear after the retest is completed. If you need to gather retest logs for further analysis, you can enable them as discussed in technote How to gather Re-test logs in AppScan Enterprise [http://www-01.ibm.com/support/docview.wss?uid=swg21674721].
    
    
 2. If the target application uses a web-based login, ensure that a recorded login is used and that in-session detection is enabled and properly configured in the 'Login Management Section of your job properties. More information on Session Management in ASE can be found in technote About In-Session Detection [http://www-01.ibm.com/support/docview.wss?uid=swg21459308]
    
    
 3. Verify if the element being reported is a part of a state induced page/series of pages (like surveys, shopping cart check-outs, etc.). 
    
    If so, record a multi-step sequence. To capture a multi-step sequence in ASE, record a manual explore of the content and then select the check box below the recorded URLs for 'Test URLs as an ordered sequence (multi-step operation)'.
    
    
 4. Review the HTTP responses from the re-test traffic log mentioned in Step 1. If the target pages are relatively small and have a few dynamic elements (like session IDs) embedded in the response, it is possible that AppScan's default threshold of 95% is too high and you need to lower it for this application. 
    
    There is a hidden option available to do this:  * In the job properties go to 'Advanced Options'. 
     * Append the URL in the address bar of your browser with &advancedadmin=1. 
     * Under Generic Developer options, find the option BODY_SIMILARITY_THRESHOLD. When set to 0, it uses the default value of 95%. Enter a percentage to override the default and click Apply. 
     * Another option is to use the option BODY_SIMILAR_OMIT_PATTERN and write a regular expression to match the dynamic element in the response. When entered in this optio,n this part of the response will be excluded when the comparison is done.
    
    


Re-run the scan from a Ready state after making these changes. 
 

See also:
On Blind SQL Injection in AppScan [http://www.ibm.com/support/docview.wss?uid=swg21659226]
Troubleshooting False Positives in AppScan Enterprise [http://www-01.ibm.com/support/docview.wss?uid=swg21674425]