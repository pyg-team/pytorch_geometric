Title: IBM ObjectGEODE: How can I customize working directories to be used with the Simulator and the Code Generator? - United States

Text:
 TECHNOTE (FAQ)

QUESTION
 ObjectGEODE: How can I customize working directories to be used with the Simulator and the Code Generator? 

ANSWER


This FAQ is for users who use both the Simulator and the Code Generator on Windows. 
On UNIX, make sure you change the suffix of the environment files: 

 *  geodesm_ubld.bat must be defined as geode_ubld.cmd, 
   
   
 *  geode_win_env.reg and geode_win_dir.lst are included in the geodeb_ <target> _env file. 
   
   

Shortcut definitions are not taken into account on UNIX in the same way. 

This FAQ explains how an ObjectGeode application whose component files are located in different directories can be used either by the Simulator or the Code Generator. 
The application imports C types and exports SDL types (in fact importation of a pointer definition and exportation of an SDL array). 
For further information on the model, please consult the FAQ entitled "How can I define an SDL structure one of whose fields is a pointer on an SDL data block?" [faqa_d8.htm#How can I define an SDL structure one of whose fields is a pointer on a data block?] 

 1.  1- Directories description 

 * The directories names have been chosen so that they look like the ones used in the Code Generator examples ( under <ObjectGeode>/examples/geo_win/ext_env for example). 
 *  Four main directories have been defined:usr_platform, usr_cross, simulation, code_gen 
   
 *   usr_platform: 
   The directory "usr_platform" contains all the SDL files provided by the user as input to the SDL Simulator and C Code Generator. 
   Content: 
   model.pr 
   
   
   
 *   usr_cross: 
   The directory "usr_cross" contains user-written C files 
   Content: 
   pointer.h: 
   -used by the simulator and the code generator 
   -defines ptr_blockdata type 
   pointer.c: 
   -used by the simulator and code generator 
   -contains the definition of set_pointer() and read_array(), consistent with the signatures given in the file u_ptr_blockdata.h file generated by the code generator. 
   hpredef.h: 
   -used by the simulator and code generator 
   -this file is automatically included by both tools while compiling the application 
   hpostdef.h: 
   -used by code generator only 
   
   
   
 *   simulation: 
   The directory "simulation" is dedicated to the simulator and contains: 
   - all files provided as input to the simulation : 
   
    *  -geodesm_ubld.bat: informs the simulator how to compile the C files provided by the user, pointer.c in the example (See Simulator manual p 9-5 and Welcome to ObjectGeode for NT ). 
      It calls the geodecc_sm command and uses 2 options: 
      -Fo allows to specify where the object file must be generated (simulation/obj directory in the example) 
      -I option indicates the paths where to find include files (simulation directory where u_ptr_blockdata.h is located) 
      -<model>.lub: lists the object files to be linked with files generated by the simulator. (See Simulator manual p 9-5 and Welcome to ObjectGeode for NT) 
      -hpredef.h: points to the pointer.h file located in directory usr_cross. 
      Note: Either this file points to "pointer.h" and the path of pointer.h is defined with the CROSS_CCFLAGS environment variable (set to "-I..\usr_cross), or this file points to "..\usr_cross\pointer.h" and there is no need to define the path of pointer.h 
      -<u_ imported_type >.h: includes the "model.h" file. In the example, as ptr_blockdata is an imported type, u_ptr_blockdata.h file must be provided. 
      Note: this file must be provided because of the OBJECTGEODE/SM/3.2/117 simulator anomaly. Another workaround is to use the directive #c_export for the type ptr_blockdata. 
      This anomaly will be fixed in ObjectGeode release 4.0. 
   
   - .geodesm directory which contains .c and .h files generated by the simulator. 
   - obj directory which contains the object files corresponding to the C files provided by the user. 
   
   
   
 *   code_gen: 
   The directory "code_gen" is dedicated to the code generator and contains: 
   - all files provided as input to the code_generator 
   
    * - geodeb_win_env.reg: defines the code generator parameters (See Welcome to ObjectGeode for Windows, page 34) 
      - geodeb_win_dir.lst: informs the code generator where to find the SDLfiles and result files of the platform-development generation (generated by the code generator) 
      - <model>.lub: lists the object files that correspond to the external C files 
      - <model>.umk: informs the code generator how to compile the C files provided by the user (equivalent to geodesm_ubld.bat for the simulator) 
      - gce_win.bat: declares environment variables used while compiling and linking the application. 
   
   - gen_cross and gen_platform directories which contain files generated by the code generator. 
   Note: In the gen_cross directory, one file is IMPORTANT : u_ptr_blockdata.h. It is produced by the code generator and defines the signatures of the C functions to be written. (See page 8.2 and 8.4, in the Code generator reference manual, explanation on u_newtype.h file). 
   - obj directory which contains the object files of the application 
   
   
    2- Running the simulator 
   
   

 

 *   First solution 
   - Launch the simulator ( Start-Programs - Verilog-ObjectGeode - SDL Simulator menu) 
   - Use the menu "Insert-SDL file" to load the .pr file : select the model.pr file in usr-platform directory. 
   - In Options-Directories, fill the "Working directory" field with the path of "simulation" directory 
   - Check the model 
   - Build it 
   - Execute the simulation. 
   - When stopping the simulation, you can save the model.ogl file. 
   
   
   
 *   Recommended solution 
   - Define a shortcut for the SDL editor: 
   
    * Select geodedit.exe in <ObjectGeode installation directory>/bin 
      Click on the right button of the mouse and click "create a shortcut" 
      Put the shortcut on the desktop. 
      Edit the properties of the shortcut (mouse right button-properties-shortcut tab). 
      In Start field, put the path of usr_platform directory. 
   
   - Launch the editor by double-clicking on the SDL editor shortcut 
   - Load the .pr file with File-Load menu 
   - Launch the simulator with Tools menu : the model.pr is automatically loaded 
   - In Options-Directories, fill the "Working directory" field with the path of "simulation" directory 
   - Check the model 
   - Build it 
   - Execute the simulation. 
   - When stopping the simulation, you can save the model.ogl file. 
   
   
   
    3- Running the Code Generator 
   
    
   - If it is not done, define a shortcut for the SDL editor: 
   
    * Select geodedit.exe in <ObjectGeode installation directory>/bin 
      Click on the right button of the mouse and click "create a shortcut" 
      Put the shortcut on the desktop. 
      Edit the properties of the shortcut (mouse right button-properties-shortcut tab). 
      In Start field, put the path of usr_platform directory. 
   
   - Launch the editor by double-clicking on the SDL editor shortcut ( if you do not use the shortcut, start the editor from the menu) 
   - Load the .pr file with File-Load menu 
   - Launch the Code Generator with Tools menu : the model.pr is automatically loaded 
   - In Options-Directories, fill the "Working directory" field with the path of "code_gen" directory 
   - Choose the mapping of the application in Option-Generator menu ( TP for example) 
   - Choose to display or not traces in Option-Generator menu (-t option recommended for debug) 
   - Check the model 
   - Build it 
   - Execute: 2 windows are displayed. The first one contains the traces for p1 process and the second one the traces for p2 process. 
   
   

SDL Simulator & C Code Generator 4.1FAQ1225AnswerProduct versionPartner ContentInternal ContentCategoryReference ID 

HISTORICAL NUMBER
 KB1225