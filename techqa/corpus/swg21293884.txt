Title: IBM Best practices for referencing Java Types in UML models - United States

Text:
Java type; UML; java framework; RATLC01216708; best practices; round trip engineering; search entire workspace; search referenced libraries; qualified name; 1293884; unresolved proxy TECHNOTE (FAQ)

QUESTION
 What are the best practices for referencing classes that are contained in existing Java frameworks from Unified Modelling Language (UML) models? 

CAUSE
You often create UML models to generate Java code that extends or uses existing Java frameworks. One typical example of such frameworks are the J2SE implementations.
It may be impractical to reverse engineer such large frameworks, especially if the frameworks themselves are subject to change over time. 

One possible approach consists of referencing directly such frameworks. This requires a clear planning to avoid the possibility of creating broken model references.


ANSWER
A typical usage of a Java framework in a UML model consists of referencing existing Java types as the following types.


 *  Class Attributes Operation parameters Properties referenced by Lifelines Raised Exceptions, Targets of any relationship 


To do so, you must have Java Modeling capability enabled from 

Window>Preferences>General>Capabilities>Modeling>Advanced. 




[/support/docview.wss?uid=swg21293884&amp;aid=1]


Additionally, for all versions equal to or higher than 7.0.5, you must verify that the Model itself has the Capability: Modeling > Java Modeling enabled.



 1. Select the Model in the Project Explorer.
    
 2. Right-click on the Model and click Properties.
    
 3. Click Capabilities.
    
 4. Select: Modeling > Java Modeling.
    
    
    
    
    

The following screenshot shows how to enable the Capability on the Model itself: 

[/support/docview.wss?uid=swg21293884&aid=2] [/support/docview.wss?uid=swg21293884&aid=2] 


In your UML project, when you invoke the dialog Select Element for Type to browse for the type of all these UML elements, you have the possibility to find all the binary types referenced by the classpath of all projects in the workspace. 



The Select Element for Type dialog looks like this: 


[/support/docview.wss?uid=swg21293884&amp;aid=3] 





You may choose between searching the entire workspace or searching any referenced libraries, which is the default. 




[/support/docview.wss?uid=swg21293884&amp;aid=4]



If you have at least one project in the workspace that references a JRE in its Java Build Path, then all the types defined in that JRE are visible, if you choose the Search entire workspace setting. 

The references so created are stored in the model in a format that includes the relative path between the project containing the model and the project referencing the Java type in question.

In order to avoid dangling references in the model, it is important that you maintain constant the source of the referenced Java type. 


 1. The referenced Java project must exist and be present at all times together with the model that depends on it. The classpath of this project must keep containing the Java types referenced by the model. You could however replace a .jar file with a newer version that still contains all the same type declarations referenced by the model. Types are only referenced by their name. You could for example modify the classpath of the Java project by removing a reference to the J2SE 1.4 and add a reference to a J2SE 5. If your model only referenced types common to both versions, your model references will still resolve correctly.
    
    
 2. The name of the referenced Java project must not change. 
    
    
 3. The relative path between the two projects must be preserved.




If you delete, Refactor > Rename, or Refactor > Move the Java project name and then validate the model you will start seeing errors such as:  * 
   The feature 'type' of 'UMLSourceModel::Class1::attribute1' contains an unresolved proxy 'MyJavaProject::javax.swing.JTable' 
   
 * 
 * 


Even if all the above conditions are met, it is possible for the same Java type to be referenced by the classpath of multiple projects in the workspace. This is certainly true for the J2SE classes. In this case, the user has no control over which particular reference will be created in the model, and this can lead to broken references when some Java projects are deleted or removed. 

In this case you must take extra steps to ensure that the Java types are referenced from a specific project that can be maintained at all times. 


First option

 1. Create a Project reference from the UML Project to a "single" Java project that will be the target for the UML to Java Transformation. In this way,a direct link will exist between the projects. You can do this by right clicking on the UML project in Project Explorer and choosing Properties > Project References. Here select the Java project:
    
    
    [/support/docview.wss?uid=swg21293884&aid=5] [/support/docview.wss?uid=swg21293884&aid=5]
    
    
    
    
 2. Whenever the Select Type for Element dialog is displayed to reference a Java element, use the default scope settings on the dialog (In the modify search scope dialog, Search entire workspace should be unchecked). This will ensure that the search only covers elements in the existing project and any directly referenced projects (as defined in the project references). As a result, the returned elements will only be available via the Java project which is the target of the UML to Java transform. Under these conditions, no ambiguity will exist regarding the source of the elements.
    
    
    [/support/docview.wss?uid=swg21293884&amp;aid=6]
    
    
    
    
    
    

Second option  * 
 * 
 * 
 * 
 * 
 * Filters>Show Qualified Name
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * MyJavaProject
 * 
 * javax.swing.JTable
 * 







Cross Reference information Segment Product Component Platform Version Edition Software Development Rational Systems Developer Visualization Linux, Solaris, Windows 7.0, 7.0.0.1, 7.0.0.2, 7.0.0.3, 7.0.0.4, 7.0.5, 7.0.5.1, 7.0.5.2, 7.0.5.3 Software Development Rational Software Architect for WebSphere Software Modeling Linux, Windows 7.5, 7.5.1, 7.5.2, 7.5.3, 7.5.4, 7.5.5, 7.5.5.1, 7.5.5.2, 7.5.5.3, 7.5.5.4, 8.0, 8.0.1, 8.0.2, 8.0.3