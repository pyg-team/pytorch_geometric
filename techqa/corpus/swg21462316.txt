Title: IBM Get list of deployed RuleApps from Rule Execution Server using API - United States

Text:
 TECHNOTE (FAQ)

QUESTION
 How can the list of deployed RuleApps from the Rule Execution Server be retrieved using API? Is it possible to do so without using the SOAP port? 

ANSWER
To get a list of deployed RuleApps from Rule Execution Server using API, you can use the sample WebSphere ILOG JRules BRMS V7.1 > Samples > Rule Execution Server samples > Automated ruleset management sample. [http://publib.boulder.ibm.com/infocenter/brjrules/v7r1/topic/com.ibm.websphere.ilog.jrules.doc/Content/Business_Rules/Documentation/_pubskel/JRules/ps_JRules_Global1756.html]
The method displayResContent in JmxRemoteImpl.java uses JMX to list the ruleapps currently deployed on RES. 

However, this sample requires the use of the SOAP port. If your environment does not allow the use of the SOAP port, you can choose one of the following options:

1. Use a Web application or servlet to retrieve ruleapps from RES

Set up a web application or a servlet to retrieve the ruleapps from RES. Invoke the servlet using an HTTP port. This solution mirrors how the RES ant tasks retrieve the list of ruleapps from RES. They communicate through HTTP to a servlet which uses JMX to retrieve the information from RES. 

The RuleAppController.java class of the j2eerulesession [http://publib.boulder.ibm.com/infocenter/brjrules/v7r1/topic/com.ibm.websphere.ilog.jrules.doc/Content/Business_Rules/Documentation/_pubskel/JRules/ps_JRules_Global1754.html] sample shows how to access the ruleapps repository from the management session. Specifically, you can use the following API to get the list of ruleapps on RES:

IlrSessionFactory sessionFactory = new IlrPOJOSessionFactory(); 
IlrManagementSession managementSession = sessionFactory.createManagementSession(); 

IlrRepositoryFactory repositoryFactory = managementSession.getRepositoryFactory(); 
IlrMutableRepository repository = repositoryFactory.createRepository(); 
for (Iterator ruleAppIter = repository.getRuleApps().iterator();ruleAppIter.hasNext();){ 
pw.println(ruleAppIter.next()); 
} 


In the j2eerulession [http://publib.boulder.ibm.com/infocenter/brjrules/v7r1/topic/com.ibm.websphere.ilog.jrules.doc/Content/Business_Rules/Documentation/_pubskel/JRules/ps_JRules_Global1754.html] sample, the webapp authenticates the session using resAdmin/resAdmin as the username/password combination. Your application would have to be similarly authenticated before making the calls above. You could use "run-as" security identity for the servlet (set to resAdministrators role) in the web.xml to help with security issues. This way when the servlet is executed, it automatically runs as a RES admin , and you can put some security around that custom servlet if needed. 

You should package the web application with the required jars as detailed in the documentation at 
WebSphere ILOG JRules BRMS V7.1 > Rule Execution Server > Deploying rulesets > Managing RuleApps using the MBeans accessor API [http://publib.boulder.ibm.com/infocenter/brjrules/v7r1/topic/com.ibm.websphere.ilog.jrules.doc/Content/Business_Rules/Documentation/_pubskel/JRules/ps_JRules_Global993.html]

You might see the following exception when invoking this servlet:

Register MBean failed with type "IlrJMXRuleApp", properties "{Name=ShippingChargeRuleApp, Version=1.0}", and for the object ilog.rules.res.model.mbean.websphere.IlrJMXRuleApp@30693069.
com.ibm.websphere.management.exception.AdminException: ADMN0005E: The service is unable to activate MBean: type IlrJMXRuleApp, collaborator ilog.rules.res.model.mbean.websphere.IlrJMXRuleApp@30693069, configuration ID ilog.rules.res.model.mbean.websphere.IlrJMXRuleApp, descriptor IlrJMXRuleApp.xml. 


To get around this, you should add executionserver/lib/jrules-mbean-descriptors.jar to the JVM classpath of the application server. Please follow the instructions in the documentation under the section 
WebSphere ILOG JRules BRMS V7.1: Java EE add-ons > Installing on WebSphere Application Server > Installing Rule Execution Server > Installing Rule Execution Server on WebSphere Application Server V7.0 > Deploying the Rule Execution Server MBeans descriptors on WebSphere V7.0 [http://publib.boulder.ibm.com/infocenter/brjrules/v7r1/index.jsp?topic=/com.ibm.websphere.ilog.jrules.install.doc/Content/Business_Rules/Documentation/_pubskel/JRules_Application_Servers/ps_Installing_JRules_IC47.html]

The following technote also addresses this issue, especially for versions earlier than JRules 7.1: 
Remote JMX interactions with RES MBeans deployed on WebSphere Application Server [http://www-01.ibm.com/support/docview.wss?uid=swg21423251]


2. Invoke the ant task res-fetch-all

Another option is to use the ant task res-fetch-all [http://publib.boulder.ibm.com/infocenter/brjrules/v7r1/topic/com.ibm.websphere.ilog.jrules.doc/Content/Business_Rules/Documentation/_pubskel/JRules/ps_JRules_Global1934.html]. You can invoke the ant script from your application, either as a new process , or programmatically as shown here: Invoking Apache Ant programmatically [http://www.ibm.com/developerworks/websphere/library/techarticles/0502_gawor/0502_gawor.html].

3. Install a J2SE RES on the same database and retrieve ruleapps through API

Alternatively in your remote process, you could use a J2SE RES instance configured to point to the same database as your J2EE RES installation. You would use the same management API (outlined above) to retrieve the ruleapps directly from the database instead of via the RES console.

 


Cross reference information Segment Product Component Platform Version Edition Business Integration IBM Operational Decision Manager Platform Independent 8.6, 8.5, 8.0, 7.5 Enterprise