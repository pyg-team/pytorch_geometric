Title: IBM Common Solutions to java.lang.OutOfMemoryError - United States

Text:
ICM; OutOfMemoryError; java.lang.OutOfMemoryError; OutOfMemory; out of memory TECHNOTE (FAQ)

QUESTION
 My application failed with a java.lang.OutOfMemoryError. How can I work around it? How can I increase my Java™ Virtual Machine (JVM) heap size? 

CAUSE
If your application, DB2® Content Manager, or DB2 Information Integrator for Content connector API attempts to create a new object when there is no more memory available in Java, the application terminates with a java.lang.OutOfMemoryError. 

ANSWER
First, examine the size of any objects recently added, retrieved, or loaded during the failing operation. If recent objects are large, such as large resource content binary objects, and were loaded into resource items or document parts, try the following: 

 1. Try using the 3rd party ingest, store from, update from, or retrieve to operations documented in the SResourceItem3rdPartyIngestICM API education sample. You must use this option if the size of your resource content exceeds the capacity of the Virtual Memory in your JVM on your platform minus other necessary applications and objects loaded into memory. 
 2. If multiple large documents or resource items are in use, try working with each one at a time and dropping the reference to previous large documents and resource items no longer needed in memory. Also try just dropping the resource content for each document part or resource item using the DKLobICM::setContent() method to set it to an empty byte array. However, be careful not to save changes because it will persistently save the blank content. 
 3. Avoid retrieving the resource content for document parts and resource items until needed.


Large objects added or retrieved through the DB2 Content Manager or DB2 Information Integrator for Content API are not necessarily the cause. Small amounts of memory accumulated over time can add up, practices of applications retaining references to objects compared to freeing references, and the default Java heap size are some examples of other causes. The current method call or product API in use is not necessarily the code responsible for holding more memory than is available. All other Java products and components on your system, including your application, can be responsible for using the bulk of the memory available. 

The best solution to a java.lang.OutOfMemoryError is to ensure that your application does not unnecessarily hang onto references to objects that it no longer needs. Set references to null and allow the garbage collector to free up memory. 

You should never call System.gc() in any case. The garbage collection will run when it needs to and should find all available memory. Most JVMs only accept System.gc() as a recommendation, not a command. 

If you do get a java.lang.OutOfMemoryError, you can first increase your Java Virtual Machine (JVM) heap size to the maximum allowed for your platform. 

For example, the maximum allowed on Windows is 2 GB. To increase the JVM heap size to 2 GB on Windows when executing the Reconciler, issue the following command.


 * java -Xmx2000m MyJavaProgramName




Cross reference information Segment Product Component Platform Version Edition Enterprise Content Management Content Manager Usage AIX, Linux, Solaris, UNIX, Windows 2000, Windows NT, Windows XP 8.1, 8.2