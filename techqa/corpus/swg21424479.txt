Title: IBM When the Oracle connector stage has reject link with contraint condition, the stage runs in sequential mode even if configured for parallel processing. - United States

Text:
 TECHNOTE (TROUBLESHOOTING)

PROBLEM(ABSTRACT)
 Running an Information Server job containing an Oracle connector stage setup for bulk load and a reject link with constraint check, the following warning message occurs: 

[IIS-CONN-ORA-003004] The connector was configured to load data in parallel but the reject condition for checking constraints was selected for the reject link. This combination is not supported. The connector will run in sequential mode. 


RESOLVING THE PROBLEM
The usage of reject links with an Oracle stage is new to the Oracle connector stage. Prior to the Oracle Connector stage, it was not possible to have reject links when loading data. Both the Oracle Enterprise and OCI Load stages supported loading data to the target table, but neither of them supported reject links in this mode. While the Oracle connector has added reject link capabilities, there are still some restrictions, such as the usage of SQL constraint violation as reject condition.


When the connector is configured to write data in Bulk load mode, and the reject link is defined for the stage, and the "SQL error - constraint violation" reject condition is specified for the reject link, the stage will run in Sequential mode. This is per design.

Here is what happens when the stage is configured to reject rows that violated the constraints. The assumption is that in this case the stage is also configured to disable constraints before the load and enable them after the load (if the table does not have constraints defined on it, then simply uncheck the "SQL error - constraint violation" reject condition for the reject link and the job will load in parallel):

The connector disables the constraints before the load, then loads the data, then tries to enable the constraints. When it enables the constraints, the ROWID values of the rows that have violated the constraints are stored to the exceptions table specified by the user. The constraints remain disabled. The connector then uses the exceptions table values to fetch the rows that failed the constraints and send those rows down the reject link. The connector then deletes those rows from the target table and enables the constraints, which this time will be successfully enabled. One thing to note here is that all rows that violated the constraints are rejected. For example, if the constraint in question is a primary key (PK) constraint, and two rows with the same PK value were loaded, then technically both rows are in violation of the PK constraint (relative to each other), and both rows will be rejected.

So why the limitation that the users sees reported in the job log?

A parallel job runs on multiple processes (nodes). There is a conductor process on which the job is set up and wrapped up, and then there are player processes for each stage that are actually processing the data (load the data to the target table in this case). Reject link for a stage is only accessible from player processes of that stage. Player processes are independent of each other. One player process does not know when the other player process has started or completed. The conductor process knows when all the players have completed and that is when the job ends. So rejecting the rows that failed a constraint check needs to happen on a player process (where reject link is accessible), and it needs to happen after all the data has been loaded (by all the players) since that is when the connector tries to enable the constraints. So the player enabling the constraints and rejecting the rows needs to be sure that no other players are still loading the data, and the only way it can know this is if it is the only player loading the data. Hence the limitation.

Here are some ways to avoid the limitation:

1) Do not use Bulk load write mode. Instead, use the Insert write mode. In this case the constraints remain enabled while the players are inserting data to the table, any constraint violations are reported immediately to the players and they can reject those rows down the reject link right then and there.

2) Continue to use Bulk load write mode with multiple players, but do not configure the stage to automatically reject rows that violated the constraints. Instead, disable the constraints on the table before the load (the stage can be configured to do that automatically), but do not configure the stage to automatically enable them and reject the rows that violated them after the load. Instead, process the exceptions table and enable the constraints manually after the job completes. Or do this in the After SQL property of the stage. The After SQL property accepts multiple statements. In this case an anonymous PL/SQL block could also be written and specified in this property. It could effectively be a program that tries to enable the constraints, processes the exceptions table and for example moves rows that violated the constraints to another table and then re-enables the constraints.

Also important thing to note is that running the stage in parallel on one player node and running it sequentially (which is what the warning message reports) is essentially the same thing. So if the user was not planning to load data from multiple players simultaneously, then this warning is not an issue to begin with, and to eliminate the warning message from the log the user can explicitly set the Execution mode for the stage to Sequential (can be done from the Advanced tab in the stage dialog), or can define Message handler to either suppress this particular Warning message (IIS-CONN-ORA-03004) from the log or to demote it to Informational severity.