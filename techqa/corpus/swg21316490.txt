Title: IBM Using binary projects in a large development organization, when working with Rational Application Developer - United States

Text:
1316490; RATLC01228690 TECHNOTE (FAQ)

QUESTION
 In IBM® Rational® Application Developer, you may want to have different teams work on the projects contained in only one EAR while loading the prerequisite EARs in binary form.

This technote explains how a large development organization can produce a hierarchy of EAR files during development, 

CAUSE
You have a logical organization of the teams and projects where there you can separate an EAR A and an EAR B. All the projects of EAR A are independent of all the projects in EAR B. On the contrary, B depends on A. It is desirable for the team that develops A not to load EAR B's dependent projects into their workspace, for performance reasons. Additionally, the team that develops B would like to use only a binary representation of EAR A, again for performance reasons.

ANSWER
In this example, there are two teams, A and B. Team A is the core team and has no dependencies on other teams. 

Team B depends on A and thus consumes Team A’s artifacts in binary form.


1. Start a clean workspace for Team A
2. Create an EJB project, A, with an EJB client project, AClient, and EAR project, TeamAEAR, as follows. 
Project A contains a simple session bean, SessionA, which has a single exposed method, doSomething().

[/support/docview.wss?uid=swg21316490&aid=1] [/support/docview.wss?uid=swg21316490&aid=1]

3. Run the above SessionA on the server (mainly to generate deploy code, but also to make sure it works properly) and then exported TeamAEAR as a Shared EAR file. Exporting it as a Shared EAR file is not necessary; the important thing is to capture the binary artifacts so they can be shared among your teams. At this point, the Shared EAR file may be re-imported into the workspace as a separate project (e.g. TeamAEARShared) and checked into the repository. Henceforth, as Team A delivers new versions of their code, the binaries in TeamAEARShared should be updated and checked into the repository.

4. Now, in a second workspace to simulate Team B, start by importing Team A’s shared EAR file and have this to start with:

[/support/docview.wss?uid=swg21316490&amp;aid=2]

5. Create a similar structure of projects for Team B. In this example, we do the same thing as above but call everything B:
Create EJB project, B, with an EJB client project, BClient, and EAR project, TeamBEAR. Project B contains a simple session bean, SessionB, which has a single exposed method, doSomething().

[/support/docview.wss?uid=swg21316490&amp;aid=3]


6. Setup the binary reference from TestBEAR to A and AClient so B may consume A’s artifacts. 
7. Right click on TestBEAR and select Properties and then J2EE Module Dependencies.

[/support/docview.wss?uid=swg21316490&aid=4] [/support/docview.wss?uid=swg21316490&aid=4]


8. Click Add Jars... and select the binary jars from TeamAEARShared.

[/support/docview.wss?uid=swg21316490&amp;aid=5]

9. Click OK.

10. At this point, TeamBEAR considers A.jar and AClient.jar as simple utility projects (i.e. during runtime IBM Websphere® Application Server will not deploy these as EJB modules). They need to be properly linked in the EAR as EJB modules. 

[/support/docview.wss?uid=swg21316490&amp;aid=6]

11. This can be resolved by opening the TeamBEAR’s META-INF/application.xml file and using the source page to link in the module.
It is sufficient to add the following XML code:


<module>
<ejb>A.jar</ejb>
</module>


(a module id is not required)

[/support/docview.wss?uid=swg21316490&aid=7] [/support/docview.wss?uid=swg21316490&aid=7]


12. Notice how now A shows up under the Binary folder and can be read in binary mode.

13. If you wish to consume A from B you are free to do so (this is a screenshot of B’s properties page after adding A):

[/support/docview.wss?uid=swg21316490&aid=8] [/support/docview.wss?uid=swg21316490&aid=8]


14. From SessonBBean, use snippets to setup a reference to SessionABean and call its doSomething()method:

[/support/docview.wss?uid=swg21316490&aid=9] [/support/docview.wss?uid=swg21316490&aid=9]


15. When you deploy TeamBEAR on the server, the A jar file is used in its binary form:

[/support/docview.wss?uid=swg21316490&amp;aid=10]


16. And it does indeed execute as expected using the Universal Test Client:

[/support/docview.wss?uid=swg21316490&aid=11] [/support/docview.wss?uid=swg21316490&aid=11]


17. At this point, TeamB should export a shared EAR to be consumed by any additional teams.

Note on Web projects and other project types:

In steps 8 to 10 above, when A.jar and AClient.jar were linked to the TeamBEAR, this added the following entries in the
.settings/org.eclipse.wst.common.component file in TeamBEAR:


<dependent-module deploy-path="/" handle="module:/classpath/lib/TeamAEARShared/A.jar">
<dependency-type>uses</dependency-type>
</dependent-module>
<dependent-module deploy-path="/" handle="module:/classpath/lib/TeamAEARShared/AClient.jar">
<dependency-type>uses</dependency-type>
</dependent-module>



[/support/docview.wss?uid=swg21316490&aid=12] [/support/docview.wss?uid=swg21316490&aid=12]


In general, you should never edit this file manually, but adding file types other than .jar does not work using the dialog in Step 8. You will therefore need to manually edit this file if you are adding binary RARs or WARs.

Attached you will find a project interchange containing all of the above projects, and the shared EAR exported from Team A.




RELATED INFORMATION
#Using binary modules to optimize Rational Application D [http://www.ibm.com/developerworks/rational/library/07/0619_karasiuk_sholl/]






Cross Reference information Segment Product Component Platform Version Edition Software Development Rational Software Architect EJB Development Linux, Windows 7.0, 7.0.0.1, 7.0.0.2, 7.0.0.3, 7.0.0.4, 7.0.0.5, 7.0.0.6, 7.0.0.7