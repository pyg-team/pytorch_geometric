Title: IBM Behavior of white spaces in char, nchar and nvarchar columns when running "create external table" in Netezza - United States

Text:
nchar, nvarchar, external table, netezza EDUCATION

ABSTRACT
The behavior of white spaces in char, nchar and nvarchar columns when running "create external table" in Netezza

CONTENT


This document explains the behavior of char and nchar columns when they contain only white spaces and a create external table is run on them.

Let us consider a scenario where we need to export table data with 'create external table' statement. If the table from which we are creating the external table contains char and nchar columns with white spaces in them.

Once the external table is created we can observe that the white spaces are clipped in the unloaded file. And this behaviour is different for char, nchar and nvarchar columns.

Let's take a look at the following 2 examples for better understanding.

Example 1: 

system.admin(admin)=> create database TEST770;
CREATE DATABASE
system.admin(admin)=> \c TEST770
You are now connected to database TEST770.
test770.admin(admin)=> CREATE TABLE TEST1 
test770.admin(admin)-> (
test770.admin(admin)(> COL1 CHAR(6) ,
test770.admin(admin)(> COL2 NCHAR(6) ,
test770.admin(admin)(> COL3 NVARCHAR(6),
test770.admin(admin)(> COL4 NVARCHAR(6)
test770.admin(admin)(> );
CREATE TABLE
test770.admin(admin)=> insert into test1 values(' ',' ',' ','111111' );-- >Inserting white spaces into char,nchar and nvarchar columns 
INSERT 0 1
test770.admin(admin)=> create external table '/tmp/770.csv' using (delim ',') as select * from TEST1; 
INSERT 0 1
test770.admin(admin)=> \q
[nz@nc040072 ˜]$ cat /tmp/770.csv
,, ,111111 --> one space for CHAR column 



From this example 1, we can see the difference in behavior of char,nchar and nvarchar columns.

Take a closer look at the TEST1 table definition. We have 4 columns in it. We have inserted 6 white spaces into each of the first 3 columns and then unloaded them into 770.csv file.

If we open the 770.csv file which was created as a result of "create external table" operation on table TEST1, we can observe that there is one space character for char column type, no spaces for nchar column type and 6 spaces for nvarchar type.



Why 1 space for char, 0 spaces for nchar and 6 spaces for nvarchar ?????? 



Let's take a look at another example before unleashing the external table unload behavior.

Example 2: 

system.admin(admin)=> \c TEST770
You are now connected to database TEST770.
test770.admin(admin)=> create table test3(c1 char(17), c2 nchar(17) , COL3 NVARCHAR(6),COL4 NVARCHAR(12));
CREATE TABLE
test770.admin(admin)=> insert into test3 values(' ',' ',' ','111111111111');-- >Inserting white spaces into char,nchar and nvarchar columns 
INSERT 0 1
test770.admin(admin)=> create external table '/tmp/77000.csv' using (delim ',') as select * from TEST3;
INSERT 0 1
test770.admin(admin)=> \q
[nz@nc040072 ˜]$ cat /tmp/77000.csv
,, ,111111111111 --> no space for CHAR column. 

Example 2 is similar to example 1 with the only difference that first 2 columns of the table are increased to 17 characters. And we have inserted 17 white spaces into these 2 columns.

Once we unloaded the data from table TEST3 to 77000.csv and on opening the file we would see that there are no spaces for char column type, no spaces for char column and 6 spaces for nvarchar column type.



Why no spaces for both char and nchar and 6 spaces for nvarchar ????? 

One more question that comes into our mind is, behaviour of nchar and nvarchar remains the same in both the examples. But char column type behaves differently. why ?

Here are the answers to all the questions. 

* The behavior of nvarchar is very straight forward. What ever values are inserted into that column, unloaded file contains those values irrespective of whether they are white spaces or some values.

Rules for external table unload with char and nchar columns : 

1) external table unload with order by clause 
eg: insert into ext_tbl select * from real_tbl order by real_tbl.a;

'all spaces' values for char(N) column (N <= 16) are unloaded as 'empty strings'

'all spaces' values for char(N) column (N > 16) are unloaded as 'empty strings'

'all spaces' values for nchar (N) are unloaded as 'empty strings' 

2) external table unload without order by clause 
eg: insert into ext_tbl select * from real_tbl;

'all spaces' values for char(N) column (N <= 16) are unloaded as 'single space' (Because of this we got a single space for char type in Example 1) 

'all spaces' values for char(N) column (N > 16) are unloaded as 'empty strings'

'all spaces' values for nchar (N) are unloaded as 'empty strings' 

After reading through these thumb rules take a look at the above 2 examples again. They look easy and simple now.