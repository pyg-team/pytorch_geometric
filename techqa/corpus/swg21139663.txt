Title: IBM What is the 'Configuration Collector' in Domino? - United States

Text:
 TECHNOTE (FAQ)

QUESTION
There are strange .dxl files showing up in my IBM_TECHNICAL_SUPPORT directory. What are they? How did they get there? What are they used for?

ANSWER
The 'Configuration Collector' feature is intended to provide snapshots of how a Domino server is configured, and allow an analysis of any recent changes made that may have impacted the performance of the server.
During the normal operation of the Domino server, Configuration documents and Server documents are read during initialization. The respective views ($Servers, $ServerConfig, $ServerAccess) are polled every 5 minutes for changes, and if the view has been modified, the associated documents are reread. This new feature causes the documents to be saved whenever they are read. 

Up to 4 documents within the Domino directory can be used to set the basic operational parameters for a Domino server. These consist of the Server document, and three (3) types of Configuration documents: Server All, Server Group, Server Specific. Whenever each document is read, a filename is constructed based on the modification time and date of the document and the server name. Four (4) filename prefixes exist, 1 for each possible document: 

 

 * Server Config All: configall 
   Server Config Group: configgroup 
   Server Config Specific: configspecific 
   Server Document: serverdoc 


If, for example, the Server document was modified on May 29th 2003 at 3:47:26 PM, then the file would be named serverdoc_branch_2003_05_29@15_47_26.dxl. This file is always created in the diagnostic directory, which is [data directory]\IBM_TECHNICAL_SUPPORT by default. This naming scheme applies to all 4 files. ). 

It is also desirable to collect system information. The 'fileret' program runs automatically whenever Domino is started (it looks for any ADC files that should be deleted. Just before fileret terminates, it will load the program "nsd -info" which collects OS environment information (Process Table, NOTES.INI file, user environment, executable and library files, data directory listing, local disks, memory usage and network stats). The nsd document, with a prefix of 'sysinfo', is also saved in the technical support directory. 

The third and final portion of this feature is the ability to export documents in the Directory (NAMES.NSF) to dxl via a server console command. The "SAVE" command has been added to the Domino server console. At the present time, the only thing that can be saved is a NOTEID. The NOTEID option requires 1 parameter, the requested noteid in hexadecimal format. An example is: 
 * 


This will cause a file of the form noteid_22d6_branch_2002_06_23@16_22_00.dxl to be saved in the data directory, presuming that this document was modified on June 23, 2002 at 4:22:00 PM on server branch. When the requested note is successfully saved, the following message will be displayed on the console: 
 * 
 * 

If the requested note does not exist, or if the note has not changed since the last time it was dumped this way, then the following message will be displayed on the console: 
 * 


If "save" or "save noteid" commands are issued, the following message is displayed: 
 * 


The help for these commands is: 
 * 
 * 
 * 


It is important to limit the number of files collected so that we do not consume excessive disk space. By default, a maximum ten (10) files of each type, including 'sysinfo' files, will be collected. This can be overridden with the NOTES.INI variable MAX_CONFIG_FILES. If MAX_CONFIG_FILES is reduced in size then the appropriate number of files will be deleted. This variable will be checked only when the server starts or if there is a configuration change. The maximum number of NSD files can be overridden with the variable MAX_NSDINFO_FILES. If this variable exists then it will be used instead of MAX_CONFIG_FILES. The file limits are implemented by keeping a list of the files of each type in index files (ConfigAll.idx, etc ...) in the data directory. The files stored will represent the most recent files of each type. 

The entire feature (including NSD collection) can be disabled with the following INI variable: 
 * 


The NSD info at startup can be enabled or disabled separately with the following INI variable: 
 * 


If the DISABLE_SAVENSDCONFIG variable exists then the value (0 or 1) is honored, otherwise the value of DISABLE_SAVESERVERCONFIG is honored. Here is a table breaking down when it will or will not be collected: 

DISABLE_SAVESERVERCONFIG DISABLE_SAVENSDCONFIG NSD Auto Collect 0/Not Present 0 Enabled 0/Not Present 1 Disabled 0/Not Present Not Present Enabled 1 0 Enabled 1 1 Disabled 1 Not Present Disabled 

HOW TO USE THE COLLECTED FILES 

So, given this information, how can we use the various files collected? As the functionality only dumps documents when a change is made, intent was to check each file with its preceding one to find what changes were made. This can be done in a few ways. You can use a 'diff' utility at the OS level to compare two files from a text perspective. Example output from diff'ing two Server documents dumped to XML looks like this: 

5c5 
< <noteinfo noteid='1aea' unid='4FABE94D1E7A30AF85256BDB0062D45D' sequence='97'> 
--- 
> <noteinfo noteid='1aea' unid='4FABE94D1E7A30AF85256BDB0062D45D' sequence='99'> 
7,9c7,9 
< <modified><datetime dst='true'>20030904T132802,58-04</datetime></modified> 
< <revised><datetime dst='true'>20030904T132802,57-04</datetime></revised> 
< <lastaccessed><datetime dst='true'>20030904T132802,58-04</datetime></lastaccessed> 
--- 
> <modified><datetime dst='true'>20030904T132900,69-04</datetime></modified> 
> <revised><datetime dst='true'>20030904T132900,68-04</datetime></revised> 
> <lastaccessed><datetime dst='true'>20030904T132900,68-04</datetime></lastaccessed> 
28c28,29 
< dst='true'>20030514T113718,06-04</datetime></revisions> 
--- 
> dst='true'>20030514T113718,06-04</datetime><datetime dst='true'>20030904T132802,57-04</datetime><datetime 
> dst='true'>20030904T132900,53-04</datetime></revisions> 
600c601,602 
< <item name='ServerBuildNumber'><textlist><text>Build V602_05122003</text></textlist></item> 
--- 
> <item name='FltRcvryScrpt'><text/></item> 
> <item name='ServerBuildNumber'><textlist><text>Build V65_07292003</text></textlist></item> 
602,603c604,605 
< <item name='MinVer'><number>0</number></item> 
< <item name='QMRVer'><number>2</number></item> 
--- 
> <item name='MinVer'><number>5</number></item> 
> <item name='QMRVer'><number>0</number></item> 
607,608c609 
< <item name='FlagsVer'><number>0</number></item> 
< <item name='FltRcvryScrpt'><text/></item></document> 
--- 
> <item name='FlagsVer'><number>0</number></item></document> 

The lines in bold show that the server was upgraded from 6.0.2 to a pre-release 6.5 build. This type of information can be gained in other ways, obviously, but this is an example of how to look through the 'diff' output. There are also specific XML diff tools available. IBM's AlphaWorks provides one, and there are other on-line utilities available. These can generally be more user-friendly, as most highlight the differences between files using color coding. 

No matter what tool is used, these files can be used to help answer the question that is often asked, "Has anything changed on the system?"