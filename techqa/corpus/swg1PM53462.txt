Title: IBM PM53462: INCORROUT FROM STORED PROCEDURE - RESULT SET IS MISSING WHEN WITH HOLD IS USED FOR A CURSOR - United States

Text:
z/os  A FIX IS AVAILABLE
Obtain the fix for this APAR.


SUBSCRIBE
You can track all active APARs for this component.



APAR STATUS
 * CLOSED AS PROGRAM ERROR.
    
   
   

ERROR DESCRIPTION
 *  Customer has an application with a declared global temporary
   table DGTT defined as ON COMMIT DELETE ROWS and the CURSOR for
   this DGTT has WITH HOLD specified.  A COMMIT is issued and the
   result set disappears and SQLCODE100 is received instead.
   .
   This issue was found with a stored procedure, but it is not
   tied to only happening in a stored procedure.
   
   
    
   
   

LOCAL FIX
 *  Define the DGTT with ON COMMIT PRESERVE ROWS
   
   
    
   
   

PROBLEM SUMMARY
 *  ****************************************************************
   * USERS AFFECTED: DB2 8, 9 and 10 for z/OS users of            *
   *                 applications with DECLARE GLOBAL TEMPORARY   *
   *                 TABLES ( DGTT ) defined with ON COMMIT       *
   *                 DELETE ROWS and the application also has an  *
   *                 SQL cursor WITH HOLD that references the     *
   *                 DGTT.                                        *
   ****************************************************************
   * PROBLEM DESCRIPTION: Incorrout may be returned for first     *
   *                      SQL FETCH of a WITH HOLD cursor that    *
   *                      references a DECLARE GLOBAL TEMPORARY   *
   *                      TABLE defined with default attribute    *
   *                      ON COMMIT DELETE ROWS, if a COMMIT      *
   *                      occurs between the SQL OPEN for the     *
   *                      cursor and that first SQL FETCH.        *
   ****************************************************************
   * RECOMMENDATION:                                              *
   ****************************************************************
   Incorrout SQLCODE +100 may be returned for first SQL FETCH of
   a WITH HOLD cursor that references a DECLARE GLOBAL TEMPORARY
   TABLE defined with default attribute ON COMMIT DELETE ROWS, if
   a COMMIT occurs between the SQL OPEN for the cursor and that
   first SQL FETCH.
   
   Not all queries referencing DGTTs in this scenario will have
   this problem. Only simpler queries for which DB2 does not
   need to capture temporary results from the DGTT before
   returning the final query result will exhibit this error.
   The following scenario presents  an example of this simpler
   query case where the incorrout may occur:
   
       EXEC SQL DECLARE GLOBAL TEMPORARY TABLE DGTT1
         (
           C1 INT,
           C2 CHAR(10) ,
         )
         ON COMMIT DELETE ROWS;
   
       EXEC SQL INSERT INTO SESSION.DGTT1 VALUES
       (:hv1,:hv2);
   
       EXEC SQL DECLARE C1 CURSOR WITH HOLD FOR
            SELECT * FROM SESSION.DGTT1;
   
       EXEC SQL OPEN C1;
   
       EXEC SQL COMMIT;
   
       EXEC SQL FETCH FROM C1 INTO :hv3, :hv4,
   
       SQLCODE +100 might be returned incorrectly for the FETCH if
       a commit is done between the SQL OPEN cursor and the first
       FETCH for that cursor.
   
   The SQLCODE +100 invalidly occurred on the FETCH because, on
   the COMMIT DB2 deleted the rows of the DGTT as directed by
   the DGTT attribute ON COMMIT DELETE ROWS. However, if a DGTT is
   referenced by an 'open' and WITH HOLD cursor at the time of
   the COMMIT, DB2 should not delete the DGTT rows. In this
   specific case of COMMIT between the SQL OPEN and first FETCH,
   DB2 did not remember that a WITH HOLD cursor was still open
   on the DGTT, and therefore incorrectly deleted the DGTT
   rows, resulting in the SQLCODE +100 on the first FETCH.
   
   Another scenario where this problem may occur is if the
   WITH HOLD cursor on the DGTT is also a WITH RETURN result set
   for a DB2 stored procedure that is defined COMMIT ON RETURN YES,
   and the first FETCH for this result set is actually issued by
   by the client/caller of the stored procedure after returning
   from the stored procedure and DB2 performed an implicit COMMIT
   upon return from that stored procedure (as directed by stored
   proc attribute COMMIT ON RETURN) before the caller's first
   FETCH.
   
   Besides SQLCODE +100 , other unexpected incorrout results may
   occur if the DGTT is only one of several tables referenced in
   the query and the results of the DGTT are input to other parts
   of the query.
   
   To avoid the problem described above, you can do any one of
   following:
   
   (1) If appropriate do not issue a COMMIT between the SQL OPEN
       cursor (that references the DGTT) and the first SQL FETCH
       for the cursor, or
   (2) Define the DGTT as ON COMMIT PRESERVE ROWS
   (3) If this WITH HOLD cursor is also a WITH RETURN result set
       for a DB2 stored procedure and the stored proc is defined
       COMMIT ON RETURN YES, and the first FETCH for the result
       set is actually issued by the client/caller instead of by
       the stored proc, issue the SQL statement ALTER PROCEDURE
       schema. procedure-name COMMIT ON RETURN NO
       to remove the COMMIT ON RETURN YES attribute from the stored
       proc. On return from the stored proc DB2 then will *not*
       perform the implicit COMMIT that would occur between the SQL
       OPEN cursor (that is 'inside' the stored procedure) and
       the caller's/client's first FETCH of the WITH RETURN cursor
       result set that references the DGTT.
   
   
    
   
   

PROBLEM CONCLUSION
 *  The DB2 code is modified to correct the conditions leading to
   to the INCORRECT OUTPUT.
   Additional Keywords: SQLINCORR SQLINCORROUT DB2INCORR/K
                        SQLDGTT SQLCOMMIT SQLCODE100
   
   
    
   
   

TEMPORARY FIX
 *  *********
   * HIPER *
   *********
   
   
    
   
   

COMMENTS

APAR INFORMATION
 * APAR NUMBER
   PM53462
   
   
 * REPORTED COMPONENT NAME
   DB2 OS/390 & Z/
   
   
 * REPORTED COMPONENT ID
   5740XYR00
   
   
 * REPORTED RELEASE
   810
   
   
 * STATUS
   CLOSED PER
   
   
 * PE
   NoPE
   
   
 * HIPER
   YesHIPER
   
   
 * SPECIAL ATTENTION
   NoSpecatt
   
   
 * SUBMITTED DATE
   2011-12-02
   
   
 * CLOSED DATE
   2012-03-29
   
   
 * LAST MODIFIED DATE
   2012-05-02
   
   

 * APAR IS SYSROUTED FROM ONE OR MORE OF THE FOLLOWING:
   
   
   
 * APAR IS SYSROUTED TO ONE OR MORE OF THE FOLLOWING:
    UK77506 UK77507 UK77508
   
   

MODULES/MACROS
 *  DSNXESX2 DSNXESX4 DSNXOCU  DSNXOMS
   
   
    
   
   

FIX INFORMATION
 * FIXED COMPONENT NAME
   DB2 OS/390 & Z/
   
   
 * FIXED COMPONENT ID
   5740XYR00
   
   

APPLICABLE COMPONENT LEVELS
 * RA10 PSY UK77506 [HTTPS://WWW14.SOFTWARE.IBM.COM/WEBAPP/SET2/ORDERMEDIA/SHOPCART?PTFS=UK77506]
   UP12/04/16 P F204
   
   
 * R810 PSY UK77507 [HTTPS://WWW14.SOFTWARE.IBM.COM/WEBAPP/SET2/ORDERMEDIA/SHOPCART?PTFS=UK77507]
   UP12/04/16 P F204
   
   
 * R910 PSY UK77508 [HTTPS://WWW14.SOFTWARE.IBM.COM/WEBAPP/SET2/ORDERMEDIA/SHOPCART?PTFS=UK77508]
   UP12/04/16 P F204
   
   

FIX IS AVAILABLE
 * SELECT THE PTF APPROPRIATE FOR YOUR COMPONENT LEVEL. YOU WILL BE REQUIRED TO SIGN IN. DISTRIBUTION ON PHYSICAL MEDIA IS NOT AVAILABLE IN ALL COUNTRIES.