Title: IBM Tuning your WebSphere Lombardi Edition Servers for performance - United States

Text:
Performance TECHNOTE (FAQ)

QUESTION
 How do you tune your runtime servers for production-level performance? 

ANSWER
Note: All of the changes shown in this document require a restart of the runtime server or process center for the change to take affect. You can combine changes before restarting to avoid multiple restarts. 

Configuration File Tuning: 

Runtime servers only 

Create a file called 120PerformanceTuning.xml in your process-server/config directory with the following content: 


<properties>
<server merge="mergeChildren">
<password-security merge="mergeChildren">
<number-of-iterations merge="replace">1
</number-of-iterations>
</password-security>
<all-classes-refresh-interval merge="replace">86400
</all-classes-refresh-interval>
<peristent-objects merge="mergeChildren">
<cached-objects-ttl merge="replace">86400
</cached-objects-ttl>
<cached-epvs-ttl merge="replace">30
</cached-epvs-ttl>
</peristent-objects>
</server>
<common>
<javascript-engine merge="mergeChildren">
<shared-scope-optimization-level 
merge="replace">-1
</shared-scope-optimization-level>
<script-component-optimization-level 
merge="replace">-1
</script-component-optimization-level>
<default-script-cache-optimization-level 
merge="replace">-1
</default-script-cache-optimization-level>
<coach-optimization-level merge="replace">-1
</coach-optimization-level>
<coach-script-transformation-enabled 
merge="replace">false
</coach-script-transformation-enabled>
</javascript-engine>
</common>
<event-manager merge="mergeChildren">
<scheduler merge="mergeChildren">
<kick-on-schedule merge="replace">false
</kick-on-schedule>
</scheduler>
</event-manager>
</properties>

Yes, <peristent-objects> is correct, that is the configuration. It is a misspelling in the code.


User Password Optimization (7.1 only)
Runtime server or Process Center
Run the following SQL commands in the runtime server database schema. The following SQL commands assume that your tw_admin and tw_passwords are set to their default values.

update LSW_USR
set PASSWD='SHA-256:1:fW0W6HYPAd6cMzg1:YY5x6xo1qcXORjt2jcZYZSpm2MbhgAgK0/LtrjPgU+U='
where user_name='tw_admin'

update LSW_USR
set PASSWD='SHA-256:1:S0a/BGvvgbllbjQj:qru7nli2dtPqJRmtGnb9/L9d1fV7MMjBe5k6FnUKJNQ='
where user_name='tw_user'

The previous commands set the password to the same default passwords, but with an encryption that takes less CPU power to process.

If you are using something other than the default passwords for tw_admin and tw_user, the best approach is to skip this step, apply all of the other changes, and then change the tw_admin and tw_user passwords using the WebSphere Lombardi Edition console. In this case, follow the normal password change procedures. 

Note: You will also have to change the passwords that are located in the WLE xml configuration files, if applicable. See the WebSphere Lombardi Edition Install and Configuration guide for additional information on how to change the passwords.

Security Provider Changes
Runtime server or Process Center
Edit the Lombardi7/internal-provider/securitydb.jocl file. Within the file, change: 
<long value="10000"/> <!-- time between eviction runs -->
to:
<long value="-1"/> <!-- time between eviction runs -->

This change prevents the Apache pooling from aggressively closing connections in the connection pool, which can dramatically improve performance on Oracle servers.

JVM Tuning:
Runtime server or Process Center
From the WebSphere Application Server Administrative Console, set the maximum Javaâ„¢ virtual machine (JVM) heap for the runtime servers to 1.3GB for a 32bit JVM and 2.0GB for a 64 bit JVM. As stated in How to do heap sizing [http://www.ibm.com/support/knowledgecenter/SSYKE2_6.0.0/com.ibm.java.doc.diagnostics.60/diag/understanding/mm_heapsizing.html], do not set the minimum heap to the same value as the maximum heap size.


Create Internal Lookup user
Runtime server or Process Center
Complete the following steps: 

 1. Access the Process Admin Console in your runtime environment. 
 2. Click User management. 
 3. Create a new user with the following parameters:  * User Name: UNAUTHENTICATED 
     * Full Name: UNAUTHENTICATED 
     * Password: You can use any password.
    
    


The user that you created in the previous steps gets around a problem when the runtime server runs API code inside itself. This scenario causes WebSphere Lombardi Edition to locate a built-in user called unauthenticated. By creating this user, it prevents the security provider from looking for a user that does not exist. Instead, it finds this generic user in its cache. The user does not run anything and the password can be as complex as needed. 



User Cache (WebSphere Lombardi Edition 7.2 only) Runtime server only 

Since Version 7.2, WebSphere Lombardi Edition introduced two more internal caches that store results of recent calls to the getUserInfo() and getUsersByFilter() methods. 

These caches are not enabled, by default. If you enable these caches, you might increase event processing significantly. In testing, synchronous queues had better performance than asynchronous.

To enable the caches, add the following configuration parameters to the <server> section of 98Database.xml configuration file: 

 * internal-provider-userinfo-max-cache-size with recommended value 50. 
 * internal-provider-userfilter-max-cache-size with recommended value 50.



Note: The 98database.xml file is located in both the install_dir \internal-provider\ and 
install_dir \process-center\config\system\ directories.  

For example:
....
<number-of-stored-old-passwords>3</number-of-stored-old-passwords>
</password-security>
<internal-provider-userinfo-max-cache-size>50
</internal-provider-userinfo-max-cache-size> <internal-provider-userfilter-max-cache-size>50
</internal-provider-userfilter-max-cache-size>
</server>
</properties>

Note: If you change this file, you must restart WebSphere Lombardi Edition to pick up the new settings. 

 

Important notes for user cache: 

 * Do not enable these caches in a development environment because the caching of security provider output might block debugging. 
 * Do not comment out these parameters in a configuration file because it does not disable them in WebSphere Lombardi Edition Version 7.2. This approach is not effective because security routines are implemented outside of application routines and use other methods to parse configuration files. To deactivate caches, either set the values to 0 or remove the lines from the configuration file completely. 
 * Do not attempt to override these parameters using *Custom.xml files as other configuration parameters. In Version 7.2, these parameters can be configured in the 98Database.xml file only. The explanation for not attempting to override these parameters is the same as the previous note. 
 * Determine whether to log the status of these caches. The ability to log the status of these caches is available, but not enabled, by default. To enable it, set the priority level of the com.lombardisoftware.security category to debug in the log4j.xml file and copy this file to the <WAS_HOME>/lib/ext directory manually. This approach is due to the same reason as described in the second note item. 


WebSphere Configuration Changes 
In Application servers > [Teamworks JVM] > Process definition > Java Virtual 
machine > custom properties, change the com.ibm.websphere.security.util.authCacheEnabled parameter to True. 

Database 
WebSphere Lombardi Edition heavily relies on the database. Have your database administrator regularly run performance tuning operations on the database, such as re-indexing. Ensure that the database has enough memory for all caches.  

PRODUCT ALIAS/SYNONYM
 WLE
Lombardi
Teamworks