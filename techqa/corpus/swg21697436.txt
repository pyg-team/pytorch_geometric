Title: IBM Missing Rows on Select With UR When Concurrent Update is Executed on Column-Organized Table - United States

Text:
Missing rows; BLU; column-organized TECHNOTE (TROUBLESHOOTING)

PROBLEM(ABSTRACT)
 Rows may appear to be missing when SELECT with UR statements are executed on a column-organized table simultaneously with large UPDATE statements on the same table. 

SYMPTOM
In DB2 LUW with BLU Acceleration, Select with Uncommitted Read UR isolation level on a column-organized table may intermittently return fewer rows than expected when there is a large Update operation running on the same table simultaneously.


CAUSE
This is expected and per design. 

During BLU Acceleration Processing of a column-organized table, rows that are being updated may be skipped when concurrent Select is executed with Uncommitted Read UR isolation level to avoid a performance penalty of having to determine whether or not the update transaction has committed. 

In cases where the updates are relatively small and are quickly committed, the "missing" rows would be transient and not detected. However, with very large updates, the impact on the Select with UR query may be noticeable.


ENVIRONMENT
Column-organized tables having concurrent SELECT with UR and UPDATE statements running.



DIAGNOSING THE PROBLEM
Before UPDATE is run: 

 * 
 * SELECT COUNT(*) FROM SIJIAD.LARGE_BLU_TABLE WITH UR
 * 
 * 250,000 rows returned


Execute large or long-running UPDATE:  * UPDATE SIJIAD.LARGE_BLU_TABLE SET ROW1=ROW1


While UPDATE is running:  * SELECT COUNT(*) FROM SIJIAD.LARGE_BLU_TABLE WITH UR
 * 
 * 217,232 rows returned
 * 

 * SELECT COUNT(*) FROM SIJIAD.LARGE_BLU_TABLE WITH UR
 * 
 * 53,392 rows returned
 * 

 * SELECT COUNT(*) FROM SIJIAD.LARGE_BLU_TABLE WITH UR
 * 
 * 0 rows returned
 * 


When UPDATE has completed:  * SELECT COUNT(*) FROM SIJIAD.LARGE_BLU_TABLE WITH UR
 * 
 * 250,000 rows returned


RESOLVING THE PROBLEM
Cursor Stability CS isolation level with Currently Committed behavior solves this problem by returning all rows without locking. The suggested work around is simply to avoid using Uncommitted Read isolation level queries in column-organized tables with simultaneous large updates. Cursor Stability is the appropriate isolation level for this situation. Also, ensure that CUR_COMMIT configuration parameter is enabled to allow the query to return the currently committed value at the time the query is submitted. 

RELATED INFORMATION
 DML statement restrictions for column-organized tables [http://www.ibm.com/support/knowledgecenter/SSEPGG_10.5.0/com.ibm.db2.luw.admin.dbobj.doc/doc/r0060595.html]