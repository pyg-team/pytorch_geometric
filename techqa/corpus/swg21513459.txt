Title: IBM Historical Overview of Rule Based vs Cost Based Optimizers in OpenPages databases - United States

Text:
 TECHNOTE (TROUBLESHOOTING)

PROBLEM(ABSTRACT)
 Historical Overview of Rule Based vs Cost Based Optimizers in OpenPages databases 

RESOLVING THE PROBLEM
Historical Overview ------------------- OpenPages software has historically used Oracle Rule Based Optimization (RBO) for its Application Database (what is commonly referred to by FCM). The main reason for that is that Oracle Cost Based Optimizer (CBO), as it existed/exists in Oracle 8, 8i, 9 and 9i was not able to properly handle hierarchical queries that are the cornerstone of the FCM. Hierarchical queries are queries that use CONNECT BY clause, SYS_CONNECT_BY_PATH function, etc. In addition, there are various queries that contain WITH clauses, which are also not handled properly by the Oracle CBO. Starting with Open Pages 4.0, Cognos CommandCenter was integrated into the OpenPages Software. Cognos automatically generates SQL statements. Cognos uses ANSI SQL syntax to generate SQL statements that contain outer joins. Consequently, Cognos generates LEFT OUTER JOIN syntax, as opposed to Oracle's (+) syntax. What we found, is that Oracle AUTOMATICALLY SWITCHES to the CBO, once it encounters such syntax, even if there are no statistics on the table and Optimizer_Mode is set to RULE. Thus, reporting tables (used by CC) contain statistics, in order to facilitate the CBO. Also, there are NO hierarchical queries or queries with WITH clauses, which would cause problems for the CBO. As a result of this, the OpenPages database uses a hybrid optimization strategy. The Optimizer_Mode is set to CHOOSE, application tables contain no statistics (which insures RBO), while reporting tables contain statistics (which ensures CBO, along with ANSI SQL outer join syntax). The FCM application is a classic OLTP application. It benefits greatly from index usage. Cognos CC reporting, when it navigates the reporting hierarchy, also greatly benefits from index usage (especially as the number of resources increase). We have found that NESTED LOOPS join mechanism performs the best in our database (for both the FCM Application and Cognos Reporting). Consequently, OpenPages recommends setting quite a few Oracle 9i initialization parameters, which would guide the Oracle optimizer (CBO and RBO) towards NESTED LOOP joins, thus ensuring the most efficient performance and scalability. They are listed here below: hash_join_enabled = FALSE optimizer_index_caching=100 optimizer_index_cost_adj=1 These three parameters are recommended by OpenPages to be set to the non-default values indicated in our documentation. Again, they are designed to make indexes and the NESTED LOOP join mechanism more attractive to the Oracle optimizers. Latest with Open Pages 5.1 and Oracle 10g ----------------------------------------- Starting with Open Pages 5.1, OpenPages uses Oracle 10g (release 2) as the only supported version of the Oracle Database. The RBO is officially deprecated by Oracle in this version. Consequently, Open Pages 5.1, and above, are taking full advantage of the CBO (which is actually "smart" enough to handle hierarchical and WITH queries that its 9i predecessor couldn't do). Consequently, all tables in the OpenPages database contain statistics. However, we still recommend index use and NESTED LOOP join mechanism as the most scalable and efficient method to access our database. HASH_JOIN_ENABLED parameter has been deprecated in Oracle 10g, but the "optimizer_index_*" parameters remain, and we still recommend setting them to the same values as with 9i: optimizer_index_caching=100 optimizer_index_cost_adj=1 Also in 10g, the Optimizer_Mode parameter is recommended to be set to FIRST_ROWS (which is recommended for OLTP applications - plus CHOOSE makes no sense anymore). In addition, all Cognos reports contain ORDERED hint, which further facilitates NESTED LOOPS (based on the SQL generated by Cognos)



HISTORICAL NUMBER
 00000929