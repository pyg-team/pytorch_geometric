Title: IBM NoClassDefFoundError & InstantiationException when calling MTDS - United States

Text:
 TECHNOTE (TROUBLESHOOTING)

PROBLEM(ABSTRACT)
 The call to a Monitored Transparent Decision Service (MTDS) fails, issuing a NoClassDefFoundError and/or a InstantiationException. 

SYMPTOM
I get the following errors when calling an MTDS from the client that is generated by Rule Studio/Designer:

java.lang.NoClassDefFoundError:
com.sun.org.apache.xerces.internal.dom.ElementNSImpl

and/or

-Failed to execute Rule Engine request: ACTIVE_MEMBER_IDENTIFICATION
javax.xml.ws.soap.SOAPFaultException: javax.xml.bind.UnmarshalException
- with linked exception:
[javax.xml.bind.UnmarshalException: Unable to create an instance of
com.bcbsms.jrules.RuleExecutionUnit
- with linked exception: [java.lang.InstantiationException]]


CAUSE
The error does not reproduce in the JAXWS web server, which indicates that it is related to the environment of the server hosting the web service. 

The solution offered works by not relying on the application server to marshal/unmarshal the web service inputs and outputs.


RESOLVING THE PROBLEM
When such an issue occurs, apparently related to the specific JAXWS implementation that comes with the application server, one possible approach is to bundle an alternate JAXWS implementation with the MTDS application: 

 1. In the generated build.properties of the MTDS project, set "includeJAXWS=true". 
 2. Modify the web.xml file to use the JAXWS Reference Implementation servlet:  1. Add this listener in the web.xml file that is found in the MTDS project:
        <listener>
        <listener-class>com.sun.xml.ws.transport.http.servlet.WSServletContextListener</listener-class>
        </listener> 
     2. Replace the servlet class in the same web.xml file with the servlet class of the JAXWS-RI:
        <servlet-name>myws</servlet-name>
        <servlet-class>com.sun.xml.ws.transport.http.servlet.WSServlet</servlet-class>
        <load-on-startup>1</load-on-startup>
        </servlet>
    
    
 3. Regenerate and redeploy the MTDS component to the server by using the Ant task.


 

For an MTDS to deploy on WebSphere Application Server Common Edition (WAS CE), the includeJAXWS option is not available in the Rule Studio/Designer script to generate the WAR file. Therefore, you need to add the JAXWS JAR files to the MTDS WAR file manually or to modify the script that is provided by Rule Studio.

Also, on WAS CE, to avoid class loading issues that might lead to a "java.lang.NoClassDefFoundError: com.sun.xml.messaging.saaj.soap.MessageImpl", use the <inverse-classloading/> option, as explained in WASCE 2.1.0 Documentation > Index > Content > Deployment > Developing deployment plans > Managing the classpath [http://publib.boulder.ibm.com/wasce/V2.1.0/en/managing-the-classpath.html#Managingtheclasspath-Inverseclassloading].

To avoid errors at deployment (with no impact), you might also need to set the
org.apache.geronimo.jaxws.builder.useSimpleFinder system property to true when starting WAS CE : for the JRules sample server, you can set this property in the script that starts the server (<JRulesInstallDir>\shared\bin\build.xml) in the startserver.internal task.

RELATED INFORMATION
#Monitored transparent decision services [http://pic.dhe.ibm.com/infocenter/dmanager/v8r0m1/topic/com.ibm.wodm.dserver.rules.res.managing/topics/con_res_decision_serv_mtds.html]
Creating a MTDS project for RuleApps [http://pic.dhe.ibm.com/infocenter/dmanager/v8r0m1/topic/com.ibm.wodm.dserver.rules.res.managing/topics/tpc_res_client_webserv_tds_intro.html]


 


Cross reference information Segment Product Component Platform Version Edition Business Integration WebSphere ILOG JRules Modules:Execution Server (BRES / RES) Platform Independent 7.1, 7.0