Title: IBM CWZMU0060W error shows up while developing in WebSphere Integration Developer - United States

Text:
 TECHNOTE (TROUBLESHOOTING)

PROBLEM(ABSTRACT)
 CWZMU0060W generated by WebSphere Integration Developer makes us think we are doing something wrong, but we think we are doing it correctly, or the best way possible. Can we ignore the warning? 

SYMPTOM
You might see the following warning message: 

CWZMU0060W: A deadlock may occur when the mediation flow performs a service invocation using the invoke : ISample2Partner node in the AsyncMed mediation flow due to the combination of transactional and asynchronous settings




DIAGNOSING THE PROBLEM
You might have a long running process as a service exposing a distinct interface and operation. This process is to be called by another long running process that uses a different interface to call the other long running process. To reconcile these two different interfaces, you want to use a mediation flow with two maps in it. So, the mediation has to asynchronously call the target long running process. This process might take several days to complete; at least more than the transaction timeout.

The problem is that WebSphere Integration Developer generates the previous error. Can this warning be ignored?


RESOLVING THE PROBLEM
You can ignore this warning if you are invoking the back-end long running processes AsyncWithCallback and not Async with deferred response. From a straight-forward view however, WebSphere Integration Developer sees that there is an SCA Export in front of the Mediation Flow Component and, therefore, issues the warning. 

It is all to do with how the MFC is invoked. An SCA Export has the ability to invoke the MFC in 3 different ways: invoke (synchronous), invokeAsync (asynchronous with deferred response), and invokeAsyncWithCallback (asynchronous with callback). It can invoke using 2 different async methods and that is why you get the warning. 

For general understanding, BPELs invoked Async are always invoked invokeAsyncWithCallback. So this, along with the other settings they have on the references throughout the design, means it runs with AsyncWithCallback is true.

The instance is started; goes through the MFC; the reference on the MFC is 'Commit', which means the message is committed to an internal queue at that point; and the transaction ends. The BPEL then starts its long-running processes in a new transaction and can respond when it likes. The Callback message is there and committed and, therefore, it can process the response when it is received.

A deadlock situation occurs when the MFC invokes invokeAsync (asynchronous with deferred response) and the reference on the MFC is set to 'Commit'. What happens here is the instance is started, goes through the MFC, and the BPEL is started on the same thread. However, a message has not been committed internally. The transaction stays open and waits for a response that it has yet to commit a request for. Therefore, this is a deadlock.

Here is a reference table for some of the default interactions. Look at the second table down:
Service Invoke mediation primitive [http://www.ibm.com/support/knowledgecenter/SSQQFK_7.0.0/com.ibm.wbit.help.medprim.doc/ref/rwesb_ServiceInvokemediationprimitive.html]

 

HISTORICAL NUMBER
 26506
035
724