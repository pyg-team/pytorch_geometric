Title: IBM IZ69525: Java Heaps with Compressed References get loaded below the 2GB Bar on z/OS - Native OOM Region Exhaustion can occur - United States

Text:
 SUBSCRIBE
You can track all active APARs for this component.



APAR STATUS
 * CLOSED AS PROGRAM ERROR.
    
   
   

ERROR DESCRIPTION
 *  On z/OS when using Compressed References (-Xcompressedrefs)
   without Large Pages activated, the Java Heap will be allocated
   below the 2GB "Bar" into Extended User Private Storage -- This
   only applies for heaps smaller than 2GB in size.
   
   This differs from normal 64bit JVM behavior on z/OS where heaps
   are allocated in 64bit space outside of the User's Private
   Region.
   
   The side effects of this behavior are native storage exhaustion
   and ABENDs related to OutOfMemory conditions. Since the Java
   Heap now resides in 31bit storage, there is insufficient space
   for JVM, system, and application data that is required to stay
   in this space.
   
   This problem ONLY affects systems where ALL OF THE FOLLOWING are
   TRUE:
   
   1) The 64bit Java Virtual Machine is being used
   2) z/OS Java 6.0 or above is in use
   3) Compressed References are activated (-Xcompressedrefs)
   4) Large Pages are NOT in use (no -Xlp or no OS support for
   large pages activated)
   5) The Max Heap setting is less than 2GB (-Xmx < 2048M)
   
   
   Keywords:
   OutOfMemoryError OutOfMemory ABENDS878 ABEND878 ABENDS0C4
   Native OOM Region heap storage 64bit 64
   
   Verification Steps:
   The Java version information can confirm that Compressed
   references are in use. The "GC" Line of the version output will
   display "CMPRSS" after the build date, similar to:
   GC   - 20100308_AA_CMPRSS)
   
   Verbose GC can confirm both whether compressed references and
   large pages are in use. The "compressedRefs" field will display
   "true", and the "pageSize" field will display "0x1000" rather
   than a larger size.
   Example:
   <initialized>
     <attribute name="gcPolicy" value="-Xgcpolicy:optthruput" />
     <attribute name="maxHeapSize" value="0x20000000" />
     <attribute name="initialHeapSize" value="0x400000" />
     <attribute name="compressedRefs" value="true" />
     <attribute name="compressedRefsDisplacement" value="0x0" />
     <attribute name="compressedRefsShift" value="0x0" />
     <attribute name="pageSize" value="0x1000" />
     <attribute name="requestedPageSize" value="0x100000" />
   </initialized>
   
   In this example, Large Pages were requested (-Xlp) but were
   not provided by the Operating System. Compressed references were
   active, and the heap was smaller than 2GB in size. This heap
   would reside below the 2GB Bar.
   
   In a system dump, the command:
   IP VERBX VSMDATA 'NOG SUMM'
   will show, towards the bottom of the report, that there is a
   large allocation owned by the JVM's main thread. This allocation
   will equal the -Xmx value and reside at an address below the 2GB
   "Bar".
   
   
    
   
   

LOCAL FIX
 *  Java 6, SR8 contains the fix for this issue.
   
   1)
   If large pages are activated on the system and requested using
   the -Xlp command line option, then the heap will be allocated
   using those Large Pages in the 64bit area. This is the preferred
   workaround whenever possible.
   
   2)
   If the heap is sized such that it cannot fit below the 2GB bar,
   then the JVm will fallback to allocating in 64bit space.
   An example heap size that maintains compressedrefs performance
   but forces the heap above the bar is: -Xmx2000M
   
   
    
   
   

PROBLEM SUMMARY
 *  CompressedRef JVM on zOS platform firstly try to allocate the
   java heap below 2GB address space range if it finds continuous
   region of that size else it will allocate above 2GB address
   space range.In first case it can cause native out of memory
   because allocation of java heap below 2GB range leave less
   memory for native heap.
   
   
    
   
   

PROBLEM CONCLUSION
 *  This defect will be fixed in:
   6.0.0 SR8
   .
   Compressed Reference JVM on zOS has been updated to always
   allocate the java heap in the 2GB-32GB address space range.
   .
   To obtain the fix:
   Install build 20100205 or later
   
   
    
   
   

TEMPORARY FIX

COMMENTS

APAR INFORMATION
 * APAR NUMBER
   IZ69525
   
   
 * REPORTED COMPONENT NAME
   J9 COMMON CODE
   
   
 * REPORTED COMPONENT ID
   620700127
   
   
 * REPORTED RELEASE
   600
   
   
 * STATUS
   CLOSED PER
   
   
 * PE
   NoPE
   
   
 * HIPER
   NoHIPER
   
   
 * SPECIAL ATTENTION
   NoSpecatt
   
   
 * SUBMITTED DATE
   2010-02-05
   
   
 * CLOSED DATE
   2010-02-05
   
   
 * LAST MODIFIED DATE
   2010-08-05
   
   

 * APAR IS SYSROUTED FROM ONE OR MORE OF THE FOLLOWING:
   
   
   
 * APAR IS SYSROUTED TO ONE OR MORE OF THE FOLLOWING:
    PM07496 [http://www-01.ibm.com/support/docview.wss?uid=swg1PM07496]
   
   

FIX INFORMATION
 * FIXED COMPONENT NAME
   J9 COMMON CODE
   
   
 * FIXED COMPONENT ID
   620700127
   
   

APPLICABLE COMPONENT LEVELS
 * R600 PSN
   UP