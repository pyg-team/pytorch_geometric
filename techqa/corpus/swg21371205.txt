Title: IBM Slow database optimizations and huge TEMPDB usage when you have complicated account structure, fixed by disabling summation regeneration - United States

Text:
slow performance stuck crash optimize optimize optimizes optimises optimization optimization single user mode single-user TECHNOTE (TROUBLESHOOTING)

PROBLEM(ABSTRACT)
 Superuser runs a database optimise. This takes an exceptionally long time, and requires a large amount of disk space on the SQL server. 

SYMPTOM
In one real-life example, a production database contained 15,000 accounts 

 * This required 38GB for its TEMPDB and took approximately 8 hours to run. 


IMPORTANT NOTE: This IBM Technote specifically relates to the scenario where the optimize takes a long time *but* does actually finish successfully (eventually) 

If your database optimize *never* finishes successfully, then it is typically because there is an invalid account structure  *  For example, you have a loop in your summation account(s) For more details, see separate IBM Technote #1457016. 


CAUSE
In general terms, there are several possible causes for slow database optimisations. 

TIP: For more examples, see separate IBM Technote #1965795. 
More specifically, here are several possible causes for slow time taken when generating summations.  * TIP: For more examples, see separate IBM Technote #1665647.


This Technote specifically relates to the scenario where the slow performance/delay is by design, triggered by a complicated account structure.

More Information
By default, Controller optimizations will also regenerate the summation structure  *  TIP: The summation structure describes the way that accounts are totalled together 


The summation structure regeneration is often the slowest part of the process  *  The process requires TEMPDB space for its temporary workings. For complex databases, this requirement can be large. 


However, unless the account summations have changed since the last time an optimsation was run, this regeneration is not strictly necessary.  *  In the above example with 15,000 accounts, after the workaround (see below) was implemented, a full optimization required only 250Mb for the TEMPDB, and took approximately 2 hours to run. 

ENVIRONMENT
The database is very large (or complicated) chart of accounts. 

 * For example, inside 'Maintain - Account Structure - Define' they may have 15,000+ accounts. 
 * As a comparison, typically most users have 3,000 to 5,000 or fewer accounts.

RESOLVING THE PROBLEM
Fix 

Re-organise (change) your chart of accounts to reduce the complexity of your summation structure. 

 * In other words, rearrange (simplify) your account structure so that it is optimised for the regeneration of the account structure.


Workaround 

There are several methods you can use:  * Method #1 - Deliberately disable structure regeneration during the optimise process 
 * Method #2 - Improve server hardware in order to improve speed (reduce waiting times)


Method #1 - Deliberately disable structure regeneration during the optimise process 
If the account structure has not been changed since the last optimization, then use the local preference RUN_WITHOUT_GENSUM with a value YES. This causes the account summation structure to not be regenerated during the optimization.  * If you have changed the account structure, then the next time you run an optimization you must remember to delete this extra local preference before running the optimization.


Note:  * RUN_WITHOUT_GENSUM is an official documented local preference.  * TIP: If you launch local preferences and click F1 for help, it defines its function as "Does not generate account summation structures". 
   
   
 * Local preferences are on a per-user basis only.  * Therefore, each separate user who utilises the database optimize function must separately implement this workaround 
   
   
 * Local preferences are stored inside the user's Windows profile, inside the 'CCR.CONFIG' file.  * Therefore, if the user has multiple separate Windows profiles (e.g. Controller is deployed via Citrix, using multiple Citrix servers, but not configured to use roaming profiles) then this local preference addition would have to be done multiple times per user. 
   
   
 * Typically, this local preference is typically used only during the initial implementation phase (before going into production) of Controller.  * This is because the superusers will be making many frequent changes, and the end users may not be affected by the summations being 'out of date' for a while.
   
   


Steps: 
Remember, the following only affects the logged-on user. Therefore, the user who needs to perform the function (database optimise) must do the following: 
1. Launch Controller 
2. Click "Maintain - Installation -Local Preferences". 
3. In the Key column, enter the parameter: RUN_WITHOUT_GENSUM 
4. In the Value column, enter the parameter: YES 

It should now look similar to the following: 
[/support/docview.wss?uid=swg21371205&aid=1] [/support/docview.wss?uid=swg21371205&aid=1] 

5. Click Save. 
6. Exit Controller 
7. Re-launch Controller, and perform the task that you need (for example perform a database optimise) 
8. After the function has finished, be sure to undo the changes.  * In other words, repeat steps 1-6, but this time set the Value to be: NO



Method #2 - Improve server hardware in order to improve speed 
Most importantly, improve the specification of your database server. 

For example, in one real-life case, the customer tried running the exact same database optimize using two separate SQL database servers. The results clearly demonstrate that the SQL server configuration has an *enormous* impact (4 times faster in this case) on Controller performance: 
 * SQL Server #1 - optimization took approximately 120 minutes:  * SQL 2005 Enterprise Edition 32bit SP2 
    * Windows 2003 Enterprise SP2 
    * 4 CPUs, based on Intel X5160 
    * 4GB RAM 
    * Physical Machine (non-virtual hardware)
   
   

 * SQL Server #2 - optimization took approximately 30 minutes:  * SQL 2008 Enterprise Edition 64bit SP2 
    * Windows 2008 Enterprise SP2 
    * 4 CPUs, based on Intel X5650 
    * 12GB (but SQL configured to be limited to only 8GB max, leaving 4Gb for the operating system etc.) 
    * Virtual Machine (non-virtual hardware)
   
   

RELATED INFORMATION
 1457016 - Database optimisation takes an extremely long [http://www.ibm.com/support/docview.wss?rs=0&uid=swg21457016]
1371161 â€‹ - 'Source: FrangoDirect.AccountD.GenerateSumm [http://www.ibm.com/support/docview.wss?rs=0&uid=swg21371161]
1665647 - ** Troubleshooting ** Long time (slow) while [http://www.ibm.com/support/docview.wss?uid=swg21665647]
1965795 - ** Troubleshooting ** Slow database optimisat [http://www.ibm.com/support/docview.wss?uid=swg21965795]


 

HISTORICAL NUMBER
 1035537