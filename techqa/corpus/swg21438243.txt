Title: IBM serviceDeploy best practices and changes in Version 7 - United States

Text:
v61rnotes; v612rnotes; v62rnotes; v70rnotes; serviceDeploy; staging modules; shared libraries; service deployment PREVENTIVE SERVICE PLANNING

ABSTRACT
 This document contains rules and recommendations for using the serviceDeploy command. It also provides a summary of changes to serviceDeploy in WebSphere Process Server V7. 

CONTENT
When you use serviceDeploy, be aware of the following rules and recommendations: 

 * Do not create modules using any of the staging modules reserved names:  * 
    * 
    * 
    * 
    * 
    * 
    * 
    * 
   
   
 * Do not edit or add files to the staging modules. Although serviceDeploy usually keeps the staging modules as they are (unless the -cleanStagingModules command-line option is specified), there are instances when they have to be re-created, such as when serviceDeploy is run on a version 6.2 (or older) archive file.

 * Do not create directories or files typical of one module type in a module of another type (for example, adding a directory named ejbModule to a Java module). This could cause serviceDeploy to misidentify the module type, resulting in an invalid EAR file being exported. 

 * Do not use a Universal Naming Convention (UNC) path name such as \\hostname\share\dir for the -workingDirectory command-line option, because it could cause errors while resolving artifacts.

 * Make sure that schema files in shared libraries do not use the same namespace as schema files in module libraries, because this will cause runtime issues. Using the same namespace can also result in unresolved schema validation errors during deployment.

 * It is recommended that you not specify JAR files (with the serviceDeploy -classpath command-line option) that duplicate contents in modules or libraries, because the classpath JAR files take precedence and because some artifacts (such as XSD and WSDL files) cannot be loaded from external JAR files. 
 * Workspace variables are not supported and are ignored by serviceDeploy. Any required external JAR files need to be specified with the -classpath command-line option.

 * It is highly recommended that you do not use Microsoft Windows editors (such as Notepad, WordPad, or Word) to modify Java files. These editors often add a byte-order-mark character to the beginning of the file, which could result in compilation failures during deployment. 

 * To export a project interchange zip file from WebSphere Integration Developer for use with serviceDeploy, use the Business Integration modules and libraries export wizard and select the command-line service deployment option. Although the Project Interchange export wizard will work in most cases, its use is not recommended.

 * It is preferable to not include the staging modules when exporting a command-line service deployment zip file from WebSphere Integration Developer because serviceDeploy will re-create them.

 * Use of the -freeform serviceDeploy command-line option is not recommended. A Web module should be created instead. 

 * To develop an automated build solution with serviceDeploy look at the instructions and best practices in the following article: Develop an automated build engine for Service Component Architecture applications using WebSphere Integration Developer. [http://www.ibm.com/developerworks/websphere/library/techarticles/0711_manekar/0711_manekar.html]


Differences in serviceDeploy between WebSphere Process Server Version 7.0 and earlier releases: 
 * The following command-line options are no longer applicable and have been deprecated:  *  -fileencoding -javadebug -noJ2eeDeploy -nojavasource 
   
   Using these parameters has no effect on serviceDeploy. 

 * A new command-line option, -noValidate, allows all validation during serviceDeploy to be skipped. Use this command-line option with caution.

 * The format of the tracing options file that can be passed with the -debug command-line parameter has changed. For an example, see the default trace options file at: <WAS_HOME>/serviceDeploy/trace.options

 * The EJB staging module is no longer created by serviceDeploy, but the Web staging module is always generated.

 * serviceDeploy no longer runs ejbDeploy before exporting the EAR file. In many cases, running ejbdeploy is no longer needed, but if it is, it will be run during application installation as long as the option to deploy enterprise beans is checked. 
   
   For archive files that have custom EJB modules, you can run ejbDeploy from the command line on the EAR file that is exported from serviceDeploy in order to save time during application installation.

 * Most of the code generation and compilation from source artifacts now occurs during application installation, so the generated Java code will not be present in the EAR file created by serviceDeploy.

 * The temporary serviceDeploy working directory no longer contains an Eclipse workspace.

 * The artifact loading mechanism used by serviceDeploy is now the same one used by the WebSphere Process Server run time, so there might be new serviceDeploy errors, particularly during schema validation, that were not caught by the serviceDeploy tool in previous releases. 
   
   For example, in Version 6.2, if there are duplicated schemas in different modules, serviceDeploy just uses the first one that is found by following the order of the dependencies in the classpath or manifest. In Version 7.0, serviceDeploy finds all the schemas present in the module dependencies and correctly fails with errors if there are any duplicated ones.

RELATED INFORMATION
 Enabling tracing for the serviceDeploy command [http://www.ibm.com/support/docview.wss?uid=swg21438515]


 

Cross reference information Segment Product Component Platform Version Edition Business Integration WebSphere Enterprise Service Bus 7.0, 6.2, 6.1.2, 6.1