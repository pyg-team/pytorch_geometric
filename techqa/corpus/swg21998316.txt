Title: IBM How to set up IBM SPSS Modeler to use a self signed SSL Certificate - United States

Text:
CADS CNDS collaboration and deployment services C&DS modeler ssl com.spss.clementine.component.ServerFatalException: java.security.cert.CertificateException: Certificates does not conform to algorithm constraints mac os x macintosh computer modeler self signed keytool TECHNOTE (FAQ)

QUESTION
 How to set up IBM SPSS Modeler to use a self signed SSL Certificate 

ANSWER
The steps for configuring IBM SPSS Modeler to use a self signed SSL certificate in Windows are below:

1) First create a kdb and sth file on the server using the GSKit create command like this:

gsk8capicmd_64 -keydb -create -populate -db modeler-ssl.kdb -pw Pass1234 -stash


The password used in this example is Pass1234, but you may use any password that you wish, just make sure to remember what the password is that was used for this command for later steps. 


****NOTE****
After running this command you also need to manually set permissions on the "modeler-ssl.sth" file that is generated in the Modeler Server bin folder. At minimum all users of Modeler Server (including the user running the Modeler Server service must have read and read and execute permission on this file)

2) Create a new self signed certificate to add to the kdb created in step1 using a command like this:

gsk8capicmd_64 -cert -create -db modeler-ssl.kdb -stashed -dn "CN=MODELER_SERVER_NAME" -expire 1000 -label modelerssl -default_cert yes


NOTE: For the Common Name (CN) parameter, make sure to use the correct fully qualified domain name of the server. Otherwise in the optional steps for Text Aanlytics discussed below, SSL connections will not work between Modeler Server and Text Analytics. 


3) Extract the self signed certificate created in step 2 to be added to the Modeler client in step 4:

gsk8capicmd_64 -cert -extract -db modeler-ssl.kdb -stashed -label modelerssl -format ascii -target mycert.arm

4) Copy the file created in step 3 (named mycert.arm) to the Modeler client and then import that certificate to the Modeler client cacerts file using the keytool command from a command prompt changed to be at the "C:\Program Files\IBM\SPSS\Modeler\18.0\jre\bin" directory: 

keytool -import -alias modelerssl -keystore "C:\Program Files\IBM\SPSS\Modeler\18.0\jre\lib\security\cacerts" -file "C:\temp\mycert.arm" 

 

When prompted for the password for inserting the certificate into the cacerts truststore, you must use the password "changeit", without the double quotes. 

 

If the Modeler client is running on a Mac, then the keytool command is located at this location instead: 


<Modeler Client installation path>/SPSSModeler.app/Contents/PlugIns/jre/Contents/Home/bin

And so you would need to run the keytool command from a terminal window from that path and adjust the path to the cacerts file as well, like this:

keytool -import -alias modelerssl -keystore ..\lib\security\cacerts -file mycert.arm 

 


5) Update the appropriate SSL options in the Modeler server options.cfg like this:

ssl_enabled, Y
ssl_keystore, "C:/Program Files/IBM/SPSS/ModelerServer/18.0/bin/modeler-ssl.kdb"
ssl_keystore_stash_file, "C:/Program Files/IBM/SPSS/ModelerServer/18.0/bin/modeler-ssl.sth"
ssl_keystore_label, "modelerssl"

Note that if you choose to use a different .kdb or .sth name when originally creating these files in step 1, then be sure to match those file names in these parameters in the Modeler Server options.cfg file. The same thing applies to the label, if you choose to create the SSL certificate with a different label than the example provided here, "modelerssl", then make sure to set ssl_keystore_label parameter equal to the actual label you used in step 2. Also, the slashes used in the path must be forward slashes (as shown in the example), not back slashes. 

 

6) Finally restart the Modeler server and test the SSL connection from the Modeler client 

 

There are also additional optional steps that would be required if you also have IBM SPSS Text Analytics or IBM SPSS Collaboration and Deployment Services (C&DS) that are used with Modeler. These steps are not required if you do not use Text Analytics or do not use Collaboration and Deployment Services 

 

For SSL with Text Analytics:

Note that as mentioned in step 2 above, you need to make sure that the CN parameter originally used when creating the certificate is using the correct fully qualified domain name of the server. Otherwise Modeler Server and Text Analytics will not be able to communicate properly over SSL. But once you have confirmed that, then you need to create/generate a PKCS-12 file of your SSL certificate from your Modeler Server. To generate the PKCS-12 file for Text Analytics run a command like this from the Modeler Server bin directory:

gsk8capicmd_64 -cert -export -db modeler-ssl.kdb -pw Pass1234 -label modelerssl -target modeler-ssl_for_TA.p12 -target_type pkcs12 -target_pw

After entering this command you will be prompted for a password to protect the PKCS-12 file. You may use any password you wish, but you may want to consider using the same password used for creating the keystore in step 1 in order to be more likely to remember the password.

You then need to copy the modeler-ssl_for_TA.p12 file to the "<Modeler_Server_Install_directory>\ext\bin\spss.TMWBServer\lib" directory of the Modeler Server. 

Also, at this point it is a good idea to make a back up of the original axis2.xml file used by Text Analytics. That file can be found here:

<Modeler_Server_Install_directory>\ext\bin\spss.TMWBServer\conf\axis2.xml

After making a backup copy of that axis2.xml file, then you can use the C&DS Deployment Manager client (configured with an administered connection to your IBM SPSS Text Analytics Server) to update three configuration values. First set "Enable SSL" to Yes. Second, set the "Private Key File" to the file name of the file created in the command above (which was modeler-ssl_for_TA.p12 in this example). Third, in the"Private Key Password" box, type in the actual password used when creating that file, which was Pass1234 in this example.

Restart the Text Analytics Server service and test running a Text Analytics stream in Modeler client connected to the Modeler Server to confirm it is working.

For Modeler SSL connections within C&DS:
First, make sure that your Modeler Server resource definition has the option selected "This is a secure port".

Then you need to create/genearte a PKCS-12 file of your SSL certificate from your Modeler Server, in just the same way as was done in the instructions previously listed for Text Analytics. So if you already did that step for Text Analytics, you do not need to re-run the command to create the .p12 file. If you did not already do that step though, then you would need to run that command at this point to create that file, like this:

gsk8capicmd_64 -cert -export -db modeler-ssl.kdb -pw Pass1234 -label modelerssl -target modeler-ssl_for_TA.p12 -target_type pkcs12 -target_pw

After creating that .p12 file, review the documentation of your respective application server for instructions on how to import that certificate into the trusted certificate store of the application server. For example, in WebSphere, you need to import that .p12 file into the default Truststore inside the WebSphere admin console here:


Security > SSL certificate and key management > Key stores and certificates > NodeDefaultTrustStore > Personal certificates

And then restart WebSphere.

For JBoss or WebLogic, refer to the respective vendor documentation for how to import SSL certificates.