Title: IBM Correlating ITM events through generic_clear - United States

Text:
EIF; generic_clear; itm_event_clear; deduplication; ITM; OMNIBUS TECHNOTE (TROUBLESHOOTING)

PROBLEM(ABSTRACT)
 Most of ITM events are configured for deduplication, which means they generate an event with a duplicate Identifier which is processed by itm_deduplication. How can I configure the ITM events to clear through the generic_clear trigger instead? 

SYMPTOM
ITM Resolution events with ITMStatus='N' do not generate a clear event in OMNIbus, but update the existing problem event to Severity 0 (clear).


RESOLVING THE PROBLEM
In most cases, the default OMNIbus-ITM integration event processing of certain events through itm_deduplication is adequate and this customization is not needed. This customization should only be done if you have a business requirement for separate problem and resolution events. This customization requires advanced rules file and trigger customization. 

As a best practice when modifying the OMNIbus-ITM integration, make any rules file modifications to the itm_custom_override.rules, and copy the current default ITM triggers to custom triggers which can be edited, then disabling the default triggers. If the Omnibus-ITM integration is ever upgraded in the future, this will make it easier to add back in the customizations.


Here is a list of the changes needed:

1) In the EIF probe itm_custom_override.rules add the following. This will generate a separate ITM resolution Type 21 event for normal situation_status 'N' events.

if( match($situation_status, "N"))
{
if ( ! (match($situation_name, "**")))
{
log(DEBUG, "<<<<< Setting event to ITM Resolution >>>>>")
@Type = 21
@Identifier = @Identifier + ':' + $cms_hostname + ':' + @Type
}
}

The ITM resolution event received is critical severity, but it is set to clear within 5 seconds. You may want to set the resolution to a lower Severity like 1 or 2 initially in the rules file above, but it isn't necessary.


2) Make a copy of the itmerror trigger to a custom trigger, and disable the default trigger. Edit the new custom trigger to the check for normal ITMStatus='N'

Change
if( ((new.ITMStatus = 'A') or (new.ITMStatus = 'E') or
(new.ITMStatus = 'F')) or
((new.ITMStatus = 'N') and (new.AlertKey != '**')))

To the following, removing the lines in bold
if( ((new.ITMStatus = 'A') or (new.ITMStatus = 'E') or
(new.ITMStatus = 'F')))

3) Copy itm_deduplication to a custom trigger, and disable the default itm_deduplication. Edit the new custom itm_deduplication to remove the processing for ITMStatus='N'. Remove the following lines -

-- Handle Reset of situations
elseif ( (new.ITMStatus = 'N') and (new.ITMIntType = 'U') )
then
if (debug_itmsync = 1)
then
write into itmfile (to_char( getdate() )+ ': Reset of Situation has been received.');
end if;
if (new.ITMEventData = 'DROP~')
then
-- IZ70091 - Ignore this event, as it is from an agent switch
cancel;
elseif ( (old.ITMStatus = 'Y') or (old.ITMStatus = 'A') )
then
set old.ITMStatus = new.ITMStatus;
set old.ITMTime = new.ITMTime;
set old.ITMEventData = new.ITMEventData;
set old.Severity = 0;
set old.Acknowledged = 0;
else
set generate_error = 1;
end if;

You can either delete these lines or comment them out.

4) Copy itm_event_clear to a custom itm_event_clear trigger, and disable the default itm_event_clear. Edit the new custom itm_event_clear adding the following condition to clear normal ITMStatus='N' near the end of the trigger.


elseif ( resolution.ITMStatus = 'N' and
resolution.AlertKey != '**')
then
-- We have a N resolution event.
set resolution.Severity = 0;
update alerts.itm_problem_events set Resolved = true,
ITMStatus = resolution.ITMStatus,
ITMEventData = resolution.ITMEventData,
ITMTime = resolution.ITMTime where
LastOccurrence < resolution.LastOccurrence and
ITMHostname = resolution.ITMHostname and
AlertKey = resolution.AlertKey and
ITMSitOrigin = resolution.ITMSitOrigin and
(ITMStatus = 'Y' or
ITMStatus = 'A'
) ;

Add this right before the end if and clear of resolution events -
end if;
end;

-- Clear the resolved events


Optionally, if you need the ITM Resolution events to exist in the ObjectServer for a few minutes to be before they are deleted? By default, when the itm_event_clear trigger fires every 5 seconds, it immediately deletes the resolution events. For testing, I commented this out so I could see the ITM Resolution events in the Object Server. You may want to comment this out as well if you have another trigger which deletes the clear events, or you may want to change this to delete after 2 minutes if another client such as Impact or a historical gateway needs some time to read in the resolution event.
-- Remove all cleared resolution events
-- delete from alerts.status where Type = 21 and Severity = 0;


5) If you are using bi-directional event updates from Omnibus to ITM through the Situation Update Forwarder, you will also need to edit the synchronizeitm trigger. This step is not needed for uni-directional ITM to Omnibus events only. Copy synchronizeitm to a custom synchronizeitm trigger, and disable the default synchronizeitm. Edit the new custom synchronizeitm, remove the following lines for a loopback for ITMStatus 'N' alerts 


else
set opcode = 'c';
set loopbackstatus = 'N';
set send_loopback = 0;
set server_port = new.ITMHostname + ':' + new.ITMPort;
set event_data = 'op=' + opcode + ',sn=' + new.AlertKey + ',sh=' + new.ITMSitOrigin + ',sv=' + server_port + ',et=,di=' + new.ITMDisplayItem;
set event_updated = 1;

6) If you are using bi-directional event updates from Omnibus to ITM through the Situation Update Forwarder, you will also need to edit the deleteitm trigger. This step is not needed for uni-directional ITM to Omnibus events only. Copy deleteitm to a custom deleteitm trigger, and disable the default deleteitm. Edit the new custom deleteitm, deleteitm - if they use bi-directional event sync, remove the following lines for a loopback for ITMStatus 'N' alerts 


else
set opcode = 'c';
set loopbackstatus = 'N';
set send_loopback = 0;
set server_port = old.ITMHostname + ':' + old.ITMPort;
set event_data = 'op=' + opcode + ',sn=' + old.AlertKey + ',sh=' + old.ITMSitOrigin + ',sv=' + server_port + ',et=,di=' + old.ITMDisplayItem;
set event_deleted = 1;


You should now see separate ITM problem and resolution events received, which are correlated and cleared through the itm_event_clear trigger.