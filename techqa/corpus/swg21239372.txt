Title: IBM Things to watch out for with Not Logged Initially (NLI) - United States

Text:
 TECHNOTE (FAQ)

QUESTION
 Altering a table to enable the "not logged" feature can be very beneficial for performance purposes. However, there is also an element of risk involved, and so it should be used with caution because any failure can result in making the table inaccessible. This document will discuss how it works, and what to watch out for. 

CAUSE
Altering a table with the "not logged initially" attribute

ANSWER
To start with, read other technotes or documentation to learn some details on when to use the not logged initially feature and how it works. 

The purpose of this document is to provide some more details on it's use and to discuss the risks involved. For simplicity, we will refer to the "not logged initially" feature as NLI. 

Let us use the example: 

db2 alter table T1 activate not logged initially 

(Important: autocommit is turned off here, so this unit of work has not been committed and is still active) 

The way this works is that it will first try to acquire a super exclusive "Z" lock on the table. If the lock is granted/acquired, then it will write a specific NLI log record to the log file. Then, the command will return back to the user with an SQL success message:

DB20000I The SQL command completed successfully.

At this point, logging is turned off for this unit of work. If any failure causes this unit of work to be rolled back past the NLI log record, then the table will be marked inaccessible. The rollback functionality depends on logging, but since logging is turned off, it means that DB2 does not know anything about the events that happened since the logging was turned off. This means that DB2 has no choice but make the data inaccessible after a rollback and the only option here is to drop the table.

Special case:
In a DPF environment with more than one partition, there is also the added risk that if the alter NLI command itself fails, then it can also mark the table inaccessible due to the fact that partitions work independently of each other. Consider this scenario:

db2nodes.cfg:
0 HostA 0
1 HostA 1

1.) A table is altered with NLI
2.) The Z-lock is granted on the catalog partition 0, and the NLI log record is written.
3.) The Z-lock is NOT granted on partition 1, and it fails with a lock timeout SQL0911.
4.) Because of 3.), the alter command fails with SQL0911, causing rollback.
5.) The rollback on partition 1 is okay, because the NLI log record was not written.
6.) The rollback on partition 0 is not okay, because it hit the NLI log record, and so db2 has no choice but to make the table inaccessible.

(Note, this problem cannot happen in single partition case). 

 

To summarize, NLI is a feature that is great for performance. However, when using it you should be aware that it comes with the above mentioned risks. A user is willfully making the decision that they are sacrificing safety for performance by using this feature.