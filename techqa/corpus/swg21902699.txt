Title: IBM Orphaned XA transaction may occur using Microsoft SQL Server database engine with IBM FileNet Content Manager or IBM Case Foundation - United States

Text:
READ_COMMITTED_SNAPSHOT; hung treads; filenet.vw.api.VWSession.updateConfig TECHNOTE (TROUBLESHOOTING)

PROBLEM(ABSTRACT)
 Orphaned XA transactions may occur in when using Microsoft SQL Server as the database engine for IBM FileNet Content Manager or IBM Case Foundation. This can occur when the application is unable to complete or rollback the transaction, for example if the application server crashes or does not shutdown properly. 

SYMPTOM
The symptom will vary depending on what items are locked by the orphaned transaction. Some of reported symptoms include: 

 * Hung thread messages in WebSphere's SystemOut log indicating a socket read operation to SQL JDBC driver while other threads are concurrently waiting on Process Engine's getConfigInfo method. For example:  * Thread "WebContainer : x" (00000###) has been active for 600000 milliseconds and may be hung. There is/are x thread(s) in total in the server that may be hung.
      at java.net.SocketInputStream.socketRead0(Native Method)
      at java.net.SocketInputStream.read(SocketInputStream.java:140)
      at com.microsoft.sqlserver.jdbc.TDSChannel.read(IOBuffer.java:1782)
      ... 
    * Thread "WebContainer : y" (00000###) has been active for 600000 milliseconds and may be hung. There is/are x thread(s) in total in the server that may be hung.
      at filenet.pe.ejb.client.PEEJBSession.getConfigInfo(PEEJBSession.java:1430)
      at filenet.vw.api.VWSession.updateConfig(VWSession.java:6138)
      ...
   
   
 * Process Engine logs (pesvr_system.log) or client application's SystemOut.log may have repeated messages indicating "Process Engine server is not yet initialized" for an extended period of time.  * [FNRPE2131090482E]Server is being initialized. Retry the operation.
      The Process Engine server is not yet initialized. The software automatically retries your operation but if the problem persists, try again.
   
   

Terminology  * WebSphere Transaction Manager - The Transaction Manager code in WebSphere Application Server that manages the flow and recovery of the transaction initiated by the WebSphere applications. 
 * XAResource - The connector used by WebSphere to communicate with the transaction based resource, in this case JDBC. 
 * Microsoft Distributed Transaction Coordinator (MSDTC) - The service responsible for coordinating distributed transactions for Microsoft SQL Server. 
 * READ_COMMITTED_SNAPSHOT - Enabling this setting will isolate the transaction and allow other database connections to access the existing data values while the transaction is still in process. Microsoft SQL Server's default setting is to lock database records during update.


CAUSE
If the application is interrupted while processing a transaction and unable to complete or rollback the transaction, it may result in an orphaned transaction in the Microsoft SQL database. With READ_COMMITTED_SNAPSHOT disabled, which is the default behavior, the locks held by the transaction will be honored and may cause other SQL statements to wait. The default timeout is unlimited (0), so an orphaned transaction will wait indefinitely holding open any locks it owns.

DIAGNOSING THE PROBLEM
Identify any database connections blocked by orphaned connection. 

Query the sys.dm_exec_requests table for entries with blocking_session_id = -2. If there any entries matching the criteria, they are waiting on an orphaned transaction. (See "Reference for sys.dm_exec_requests TransactSQL")


RESOLVING THE PROBLEM
To cleanup the transaction, the first option is to shutdown the application server, Microsoft SQL Server, and Microsoft DTC service, then bring them back up in reverse order. 


An alternative option is to identify and remove the orphaned transaction. To identify the orphaned transaction, query the sys.dm_tran_locks table for entries with a request_session_id = -2. Use the kill command to terminate the transaction based on the entry's req_transactionUoW value. (See "Blog entry about Orphaned MSDTC transactions", "MSDN reference for sys.dm_tran_locks", and "MSDN reference for Kill command")

Additional settings that can help 

 * READ_COMMITTED_SNAPSHOT - This setting is required for both Content Engine and Process Engine databases and will allow queries to continue because the orphaned transaction is isolated. (See "InfoCenter: Reducing deadlock errors in Microsoft SQL Server" and "InfoCenter: Creating a Microsoft SQL Server database for an object store"). 
 * ENABLE_XARESOURCE_TIMEOUT - By default, the WebSphere transaction manager will send a timeout value of 0. Starting in WebSphere Application Server 8.5.5.1, 8.0.0.8, and 7.0.0.31, a new custom property called ENABLE_XARESOURCE_TIMEOUT can be set in the transaction service, allowing the transaction manager to send the remaining transaction timeout to the XAResource. (See "WebSphere APAR PM89173")

RELATED INFORMATION
 InfoCenter: Reducing deadlock errors in Microsoft SQL [http://www-01.ibm.com/support/knowledgecenter/SSNW2F_5.2.1/com.ibm.p8.planprepare.doc/p8ppi277.htm]
InfoCenter: Creating a Microsoft SQL Server database fo [http://www-01.ibm.com/support/knowledgecenter/SSNW2F_5.2.1/com.ibm.p8.planprepare.doc/p8ppi023.htm]
WebSphere APAR PM89173 [http://www-01.ibm.com/support/docview.wss?uid=swg1PM89173]
WebSphere BPM technote on Orphaned XA transactions [http://www.ibm.com/support/docview.wss?uid=swg21633692]
MSDN reference for sys.dm_exec_requests [https://msdn.microsoft.com/en-us/library/ms177648.aspx]
MSDN reference for sys.dm_tran_locks [https://msdn.microsoft.com/en-us/library/ms190345.aspx]
MSDN reference for Kill command [https://msdn.microsoft.com/en-us/library/ms173730.aspx]
Microsoft Technet reference: Minimizing Deadlocks [https://technet.microsoft.com/en-us/library/ms191242%28v=sql.105%29.aspx]




PRODUCT ALIAS/SYNONYM
 CE
PE
Content Platform
P8
Process Engine
Content Engine