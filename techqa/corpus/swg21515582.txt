Title: IBM Process Engine API Applications Seeing Java Class Conflicts Using pe3pt.jar - United States

Text:
ProblemDeterminationDocument TECHNOTE (TROUBLESHOOTING)

PROBLEM(ABSTRACT)
 While trying to configure a custom Process Engine java application, java class conflicts occur because the application's classpath includes conflicting versions of various 3rd party classes. 

DIAGNOSING THE PROBLEM
The actual exceptions can vary depending upon what APIs are being used and what conflicts are encountered. 

For example, consider an application that needs to use some Cognos APIs as well as some Process Engine APIs. The application's classpath might include the pe.jar and pe3pt.jar files to support the use of the Process Engine APIs. And it would include some Cognos jars and some axis jars required to support the use of the Cognos APIs. 

The pe3pt.jar file includes some axis classes, and the version of the axis classes in pe3pt.jar may not match the axis classes that are required by the particular version of Cognos the application is using. 

In that case, the application will see an exception similar to this: 

java.rmi.RemoteException: ; nested exception is: java.lang.NoSuchFieldError: org/apache/axis/enum/Style.RPC 
at com.cognos.developer.schemas.bibus._3.AgentServiceStub.<clinit>(AgentServiceStub.java:25) 
at java.lang.J9VMInternals.initializeImpl(Native Method) 
at java.lang.J9VMInternals.initialize(J9VMInternals.java:200) 
at com.cognos.developer.schemas.bibus._3.AgentService_ServiceLocator.getagentService(AgentService_ServiceLocator.java:43) 
at yourJavaApp.CRNConnect.connectToCognosServer(CRNConnect.java:244) 



RESOLVING THE PROBLEM
Any time an application uses two or more APIs, there is a chance that there could be a conflict in version requirements or class file names. When this occurs, the solutions might be to: 

 

 * 
 * 
 * 
 * 
 * 


Any of those possible solutions will work for this issue. The first two are self-explanitory. 

For the third solution choice, you can use log4j.jar, activation.jar, and mail.jar in the application's classpath rather than pe3pt.jar. These three jars bring in the minimum number of classes that support the use of the PE APIs. 

pe3pt.jar is intended for use with the out-of-the-box PE applications. It includes various 3rd party classes that are required by the out-of-the-box PE applications. pe3pt.jar includes classes above and beyond the minimum set of classes that are required to use the PE APIs. 

When you run your own custom application that use the PE APIs, you can include the pe3pt.jar on the application's classpath. With that one jar, you get every 3rd party class you need to use the PE APIs. But you also get other 3rd party classes that the out-of-the-box PE applications require even though your application may not require them. And those extra classes can be a cause of the conflicts, depending upon what other APIs your custom application is using. 

For example, if a custom java application needs to use both a particular version of Cognos and the PE APIs, using pe3pt.jar may cause problems if the versions of the axis classes in pe3pt.jar (as required by the PE out-of-the-box applications) are different from the version of axis classes required by the specific version of Cognos that your custom application requires. 

When this happens, don't put pe3pt.jar into the classpath of the application. 
Instead, use the minimum set of classes that the PE APIs require. 
Including the following four jars on the application's classpath will let the Process Engine API function properly: 

1) pe.jar (the Process Engine API itself) 
2) log4j.jar (logging and tracing) 
3) activation.jar (Java Activation framework) 
4) mail.jar (Java Mail) or mailapi.jar (Java Mail API) 

Our example situation is resolved by this change because the Process Engine API calls will have the jars that supply the classes they need and the Cognos part of the application will have access to the version of the axis jars that the Cognos APIs need. 

Putting the minimum number of classes on the classpath to support the Process Engine APIs (by specifying log4j.jar, activation.jar, and mail.jar instead of pe3pt.jar) will generally resolve these sorts of conflicts. 

The pe3pt.jar file is used by the out-of-the-box PE software. It works for that software, having the required versions of the required 3rd party classes that the PE out-of-the-box applications require. Using pe3pt.jar may work on a user-written custom application. But, depending upon what else your application is doing, you may be able to use just log4j.jar, activation.jar, and mail.jar instead of pe3pt.jar.