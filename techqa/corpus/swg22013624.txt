Title: IBM Traveler Server - Db2 failover does not work - United States

Text:
 TECHNOTE (TROUBLESHOOTING)

PROBLEM
In a Db2 HADR setup, Traveler Server - Db2 failover does not occur when the primary Db2 server stops responding.

SYMPTOM
When the primary Db2 server stops responding, the Traveler server starts logging Db2 connection errors like:
Traveler: SEVERE *system Error rollingback TransactionID=204 Error State:08003 
Error Code: -4470 Exception Thrown: com.ibm.db2.jcc.am.SqlNonTransientConnectionException: [jcc][t4][10335][10336][4.23.42] Invalid operation: Connection is closed. ERRORCODE=-4470, SQLSTATE=08003

Traveler: SEVERE *system Error starting a Transaction Exception Thrown: com.ibm.db2.jcc.am.StandbyServerSQLException: DB2 SQL Error:
SQLCODE=-1776, SQLSTATE= , SQLERRMC=1, DRIVER=4.23.42


On the Db2 HADR, the primary role is correctly assigned to the previously secondary server:
db2pd -db TRAVELER -hadr : confirms that HADR_ROLE = PRIMARY was correctly assigned to previous secondary server


CAUSE
This occurs when there is a need to assign a client affinities list explicitly to the JDBC driver on the Traveler server that contains all connections that need to be attempted when a connection failure occurs.


ENVIRONMENT
Traveler pool with Db2 HADR



RESOLVING THE PROBLEM
To resolve the problem, make sure the Traveler server is running 9.0.1.12 or newer, then follow these steps to set an affinities list: 

1) Shut down the Traveler server. 

2) Comment out NTS_DBCONNECTIONURL if it exists in Traveler server notes.ini 

3) Add new _EXT parameter that references two or three additional parameters. The additional parameter names can be anything you want. 
Example: NTS_DBCONNECTIONURL_EXT=NTS_DBCUSTOM_1,NTS_DBCUSTOM_2, NTS_DBCUSTOM_3 

4) Use the additional parameters to specify the JDBC URL. The Traveler server will concatenate them in the order they appear in the _EXT parameter.

Example:
NTS_DBCONNECTIONURL_EXT=NTS_DBCUSTOM_1,NTS_DBCUSTOM_2, NTS_DBCUSTOM_3
NTS_DBCUSTOM_1=jdbc:db2://primarydb2.company.com:port1/TRAVELER:enableClientAffinitiesList=1;
NTS_DBCUSTOM_2=clientRerouteAlternateServerName=primarydb2.company.com,secondarydb2.company.com;
NTS_DBCUSTOM_3=clientRerouteAlternatePortNumber=50001,50001;retryIntervalForClientReroute=1;maxRetriesForClientReroute=3;

5) Run travelerUtil if needed to set the DB username and password. (Note that if already set you can skip this step):
travelerUtil db set

6) Restart the Traveler server. 


With the Client Affinities list, the JDBC driver knows what servers to try if a connection fails. It will always try the servers in the list and in the order specified. 

You can also specify a retry count and retry interval if you want to try the first server in the list 3 times for example before trying the second server. Due to the length of the parameters that are stored in the notes.ini file, the line needs to be split into multiple parameters, which is a feature that was added in Traveler 9.0.1.12. 

Explanation of parameters used in the URL: 

 * enableClientAffinitiesList - This enables the client affinities feature of the JDBC URL 
 * clientRerouteAlternateServerName - The list in order of servers to try 
 * clientRerouteAlternatePortNumber - The list in order of port numbers for the servers 
 * retryIntervalForClientReroute - Time in seconds before retying connection 
 * maxRetriesForClientReroute - Maximum times to retry a particular server before moving to the next server


Note that the database name must be the same on both servers as there is no ability to specify more than one database name. 

The primary Db2 server is listed twice, once in NTS_DBCUSTOM_1 for the URL which provides to the Traveler server the primary Db2 server to connect to at server startup. Then again in the Alternate server name list which configures the AffinitiesServerList. 

With the values shown above for retry interval and max retries, the JDBC driver will try the first server in the list three times, one second apart before trying the second server in the list. If not set, then the JDBC driver will try the first server in the list for 10 minutes, which isn't desired behavior. You can adjust the parameters for desired behavior. Setting of zero for retry interval would mean no time between retries and zero for max retries means do not retry the server.