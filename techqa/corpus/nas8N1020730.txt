Title: IBM How to setup TLS (SSL) for Nodejs on the IBM i - United States

Text:
NODEJS; SSL; TLS; SETUP; IBM i; OPENSSL TECHNOTE (FAQ)

QUESTION
 In Node.js SSLv3 and SSLv2 are turned off by default. These are options that can be manipulated per server basis if the situation requires. This documentation will explain how to setup a standard Nodejs instance running the TLS (SSL) version of choice. Additionally it also explains how to generate your certificates and Certificate Authority utilizing OpenSSL commands. 

ANSWER

NOTICE: THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED.

Additional resource for Nodejs: Nodejs Common Questions & Basic Facts [http://www.ibm.com/support/docview.wss?uid=nas8N1020583]


Instructions:


 *  - [http://www.ibm.com/i/c.gif] Creating your certificates with OpenSSL: 
   Here are instructions on using OpenSSL to create a Certificate Authority and server certificate:
   
   http://www.ibm.com/support/docview.wss?uid=nas8N1011770 [http://www.ibm.com/support/docview.wss?uid=nas8N1011770]
   
   NOTE: If you receive a "random state" error during these creation steps, double check that your '/home' IFS directory exists. If this directory exists, remove the .rnd file (if it exists) and try the steps again.
   
   1. On the IBM i command issue the following command: 
   
    * 
    * CALL QP2TERM
   
   
   2. Within the PASE Shell issue the following commands:  * 
    * cd /QOpenSys/QIBM/ProdData/Node/bin
    * 
    * 
    * mkdir cert
    * 
    * 
    * cd cert
    * 
    * 
    * openssl
   
   
   3. At the OpenSSL prompt issue the following command:  * 
    * req -x509 -days 365 -newkey rsa:2048 -nodes -keyout ibm.key -out ibm.crt 
    * 
    * 
    * NOTE:
    * 
    * 
    * 
    * OPTIONAL: 
    * 
    * CALL QP2TERM
    * 
    * 
    * 
    * cp ibm.key ibmnopass.key
    * 
    * 
    * 
      
    * openssl rsa -in ibmnopass.key -out ibm.key
   
   
   4. If the optional step above was done first type the word 'openssl' (without quotes) and hit ENTER to get back to the Openssl prompt. If the optional step wasn't done you should still be in the Openssl prompt. Type the following:  * 
    * req -x509 -new -nodes -key ibm.key -days 1024 -out ibmCA.pem
    * 
    * 
    * NOTE: 
    * 
   
   
   5.We can now F3 to exit the PASE shell. On the IBM i command line type the following command:  * 
    * CHGAUT OBJ('/QOpenSys/QIBM/ProdData/Node/bin/cert') USER(QSYS)
    * 
    * DTAAUT(*RWX) OBJAUT(*ALL) SUBTREE(*ALL)
    * 
    * 
    * 
   
   


 *  - [http://www.ibm.com/i/c.gif] Copying the .js sample programs into IFS: 
   9. Copy the sample program and place in /QOpenSys/QIBM/ProdData/Node/bin 
   
    * 
    * File name: serverssl.js
    * 
    * 
    * //Advanced options for TLS/SSL; program replaces the simple serverssl.js 
    * 
    * //Created By IBM & Phil Rosen - copy and place in "/QOpenSys/QIBM/ProdData/Node/bin" 
    * 
    * //Requirement package for HTTP secure layer
      var https = require('https');
      //Requirement package for constants.js
      var constants = require('constants');
      //Package required for reading certs, CA and keys
      fs = require('fs'); 
    * 
    * var options = {
      //Private Key
      key: fs.readFileSync('./cert/ibm.key'),
      //Server Cert
      cert: fs.readFileSync('./cert/ibmcrt'),
      //Local CA
      ca: fs.readFileSync('./cert/ibm.cer'),
    * 
    * 
    * // The option "secure" for this directive ensures that the session does not 
    * 
    * // tranfers unsecured cookies meaning all cookies are sent via HTTPS
    * 
    * // We have disabled this in the example given however programmers can 
    * 
    * // enable and test.
    * 
    * // var sessionOpts = {cookie: { maxAge: timeout, secure: true}};
    * 
    * 
      //Security Options
    * 
    * // "requestCert" is when the server attempts to validate a client cert.
    * 
    * // In this example we are not using client authentication.
    * 
    * // This option is included if programmers want to explore client ssl.
    * 
    * requestCert: false,
      
    * 
    * // "rejectUnauthorized" is a complimentary option off of the "requestCert"
    * 
    * // option. If we are checking for client certificates and if fails, we can
    * 
    * // still allow that client to connect or we can reject all failed clients.
    * 
    * rejectUnauthorized: false,
    * 
    * 
      
    * // "secureProtocol" options used by Node.js:
      // SSLv2_method, SSLv3_method, TLSv1_method, TLSv1.1_method and
    * 
    * // TLSv1.2_method, SSLv23_method
    * 
    * // When we use SSLv23_method is an OpenSSL API and not an actual protocol.
    * 
    * // This is truly a catch all method. Clients will initiate connection and 
    * 
    * // advertise other additional higher protocols they can communicate. 
    * 
    * // Renegotiation occurs until highest level of communication can be 
    * 
    * // established.
    * 
    * // Note that in Nodejs SSLV2 and SSLV3 are off by default.
    * 
      secureProtocol: 'SSLv23_method',
      
    * 
    * // "secureOption" supported methods:
      // constants.SSL_OP_NO_SSLv2, constants.SSL_OP_NO_SSLv3,
    * 
    * // constants.SSL_OP_NO_TLSv1, constants.SSL_OP_NO_TLSv1_1, 
    * 
    * // constants.SSL_OP_NO_TLSv1_2
    * 
    * // If you are using secureProtocol SSLv23_method then we need to ensure we
    * 
    * // provide all of the SSL versions that we don't want to include with 
    * 
    * // "secureOptions". Otherwise just specify which protocols we do not want to
    * 
    * // use for Nodejs.
    * 
    * secureOptions: constants.SSL_OP_NO_SSLv3, constants.SSL_OP_NO_SSLv2
      }; 
    * 
    * 
    * https.createServer(options, function (req, res) {
      res.writeHead(200, {"Content-Type":"application/json"});
      res.end('Welcome To CTA/EWS Team Page');
      }
      //Listener Port
      ).listen(443);
      //Or if you need to specify IP
      //app.listen(8888, '192.168.0.101');
      //Or http.createServer(onRequest).listen(8888,'192.168.0.101'); 
    * 
    * 
    * NOTE:
    * 
    * https://nodejs.org/api/tls.html
   
   
   10. To run your server (in PASE):  * 
    * node serverssl.js
    * 
    * 
    * NOTE:
    * 
   
   


 *  - [http://www.ibm.com/i/c.gif] Testing your site: 
   11. Test your instance by connecting by opening browser to https://[serverName]. 
   
    * 
    * 
    * OPTIONAL:
    * 
    * 
    * http://www-03.ibm.com/systems/power/software/aix/linux/index.html
    * 
    * https://github.com/bagder/curl-www
    * 
    * https://curl.haxx.se/download.html
    * 
    * 
    * 
    * 
    * 
    * 
    * 
    * 
    * curl -v -s -k 
    * 
    * 
      
    * 
    * 
    * 
    * curl -v -s -k --key ibm.key --cert client.crt 
    * 
   
   


 *  - [http://www.ibm.com/i/c.gif] Additional resource for TLS/SSL options:  
   
    * https://www.openssl.org/docs/man1.0.1/ssl/SSL_CTX_set_options.html
   
   

 


Cross reference information Segment Product Component Platform Version Edition Operating System IBM i Operating System IBM i 7.2 Operating System IBM i 7.1