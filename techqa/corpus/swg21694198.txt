Title: IBM Displaying ITM keyfiles database certificate details - United States

Text:
gsk8ikm TECHNOTE (FAQ)

QUESTION
 What command can be used to display ITM keyfiles database certificate details? 

ANSWER
It depends on the GSKit version that was installed, and the system architecture.. Different versions of ITM have installed GSKit v7 or v8, and different platform architectures have either a 32-bit or 64-bit tool available. Either use gsk7capicmd, gsk7capicmd_64, gsk8capicmd, or gsk8capicmd_64 to list all the info available.
For example, on UNIX/Linux where the install was done to a default /opt/IBM/ITM path:

1. Find the available tool:

cd /opt/IBM/ITM
find . -name "gsk?capicmd*"

In this example, assume it finds /opt/IBM/ITM/lx8266/gs/bin/gsk8capicmd_64, the 64-bit version of the GSKit v8 tool.

2. Update the LD_LIBRARY_PATH environment variable, or the LIBPATH variable for AIX. For example:

LD_LIBRARY_PATH=/opt/IBM/ITM/lx8266/gs/lib64:$LD_LIBRARY_PATH
export LD_LIBRARY_PATH

3. Run the gsk8capicmd_64 command to list the certificate you want info on. For example, if it's in the default ITM 6.x keyfiles directory, and you wanted the IBM_Tivoli_Monitoring_Certificate, you would do:

./gsk8capicmd_64 -cert -details -label IBM_Tivoli_Monitoring_Certificate -db /opt/IBM/ITM/keyfiles/keyfile.kdb

Default password is "IBM61TIV" (that's IBM, not ITM). If you're using a custom certificate with a different label, different path, or different password, use those values instead.

Example output:

Label : IBM_Tivoli_Monitoring_Certificate
Key Size : 2048
Version : X509 V3
Serial : 230e8c80f24ea5ab
Issuer : CN=IBM Tivoli Monitoring Self-Signed Certificate,O=IBM,C=US
Subject : CN=IBM Tivoli Monitoring Self-Signed Certificate,O=IBM,C=US
Not Before : September 26, 2013 3:26:31 PM EDT
Not After : September 25, 2023 3:26:31 PM EDT
Public Key
30 82 01 22 30 0D 06 09 2A 86 48 86 F7 0D 01 01
01 05 00 03 82 01 0F 00 30 82 01 0A 02 82 01 01
00 CC 44 A9 68 CD 51 59 49 31 1A CE 43 43 33 EC
66 E4 68 88 18 3C D8 34 C8 27 57 2E 98 8D E1 1D
47 C8 02 59 08 AA 09 B8 F6 19 47 FC 56 70 38 58
A0 A1 08 38 43 DB 98 E0 F1 99 3F 50 5D FD 44 6F
3E 60 F3 A0 56 25 C5 88 EE 7A DF F6 1F FA F8 B3
9C 51 31 EC 88 C1 4F 00 E4 40 FE D3 11 E6 CA 2F
1F E3 11 DB CE BA DD CD AD 8A 7B E3 C5 64 71 BB
03 55 8B 01 D7 93 67 E3 F7 20 B6 11 D2 77 96 D0
15 C6 D1 DF 61 5F 3A F4 68 5D D8 45 0E 0C 34 B0
A1 4E 13 94 D0 F5 4A 12 4C BC ED BE DE 90 F5 7D
E0 8A CA 38 54 98 5A A2 60 52 F5 D2 C8 B7 AB A4
97 F3 B6 93 4F 01 40 1D 97 27 2E C0 8D 04 4B F2
E3 92 F9 97 63 55 B9 F7 A3 B4 04 60 C1 50 35 0F
D8 D8 9B 4E 81 F6 9F 0C D1 6F 29 9A 3A 84 94 FE
84 48 BA D7 51 60 FC F4 66 2D A5 9B DF A3 61 7E
FB 8F FC 2F F3 FF DF B5 CE DD EB 83 39 C1 13 01
1F 02 03 01 00 01
Public Key Type : RSA (1.2.840.113549.1.1.1)
Fingerprint : SHA1 :
42 62 07 71 27 58 69 44 19 66 5F E2 F8 B0 D0 F4
BA 55 C4 09
Fingerprint : MD5 :
50 C7 8F 27 9E 80 A1 BB BE 64 77 97 E4 5E 4B A6
Fingerprint : SHA256 :
BE 08 F0 78 50 3D 88 23 DE A9 A4 89 A6 0F ED F7
67 3F 98 F3 05 7B 23 A4 6B 0D BE 20 7C C3 C7 63
Extensions
basicConstraints
ca = false
pathLen = 140737327282944
critical
Signature Algorithm : SHA256WithRSASignature (1.2.840.113549.1.1.11)
Value
8F C7 D7 91 D5 72 34 C5 AE 8D 1B E6 F6 62 21 44
E0 22 E6 52 DE 23 B7 DD 17 EA 7A EE 6D 22 D0 67
CD 9A B9 C7 D6 05 68 90 6C F8 A2 21 F2 4B BE CC
A2 6E AF 08 97 0A B4 7F B6 A8 A4 D1 89 5F 45 BC
1E C7 8C 1F D3 6B 3E D2 83 49 A4 97 A0 37 DD 90
A4 5B 42 33 A1 DE 83 AC 07 EF 29 57 2F A9 C9 7F
E3 D7 CB D1 85 FC 8F 91 C3 13 0E C8 31 28 40 90
E6 E6 40 FF 9E A2 EB C5 E0 63 36 E5 B2 FB 71 0A
EA 80 63 CE 82 C7 B2 A2 F1 FC C8 94 A6 C9 F4 FC
9B CA EE 5F AA 02 6C 59 EF 3E F5 CB 22 61 A2 A4
9F 02 33 F2 DB 54 9E 6B BC BD 4A 60 E5 4C 3E F5
03 5C C6 10 3D E7 C4 E2 0E 93 C8 AF 24 41 89 3F
01 24 EA E1 92 5F 14 53 B6 63 10 AB 5D 10 69 6E
AB 64 12 39 74 B0 5E 70 90 E2 49 DC 1F 6A 5D 91
A4 96 D8 57 80 5F E1 3F FA E9 63 05 45 42 EA C3
3C 97 74 D4 77 55 BE 67 60 53 B4 1D A5 2D A9 BC
Trust Status : Enabled