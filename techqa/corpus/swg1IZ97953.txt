Title: IBM IZ97953: TEMS DOES NOT EVALUATE COMPLEX SITUATIONS CORRECTLY - United States

Text:
 SUBSCRIBE
You can track all active APARs for this component.



APAR STATUS
 * CLOSED AS PERMANENT RESTRICTION.
    
   
   

ERROR DESCRIPTION
 *  Recreated with 6.22 FP3 TEMS running on Linux.
   
   Created 3 individual situations to test individual criteria:
   Test_Log_Running
   Test_Log_Last_Modified_Date
   Test_Log_Format_Errors
   
   Created the complex situation that evaluates all 3 conditions
   that are tested separately by above situations:
   Test_Log_Combined
   
   Created a correlated situation that evaluates the 3 individual
   situations as the "complex" situation should have:
   Test_correlated
   
   In testing of each individual situation, it was confirmed that
   individual situations would evaluate and trigger an alert, and
   the correlated situation would also evaluate to true and fire.
   
   The complex situation that never raised an alert even though
   its formula should be evaluating the conditions similar to the
   correlated situation.
   
   Situation formulas from the above recreate demonstrating that
   TEMS does not process complex situation formulas as expected:
   
   Name                   : Test_Log_Running
   Type                   : UNIX Logs
   Formula                : *IF *VALUE Monitored_Logs.Log_Name_U
   *EQ 'REP_GATE_7.log.copy' *AND *VALUE Monitored_Logs.Log_Path_U
   *EQ '/home/test/' *AND *VALUE Monitored_Logs.Monitor_Status *NE
   Running
   
   Name                   : Test_Last_Modified_Date
   Type                   : UNIX Logs
   Formula                : *IF *VALUE Monitored_Logs.Log_Name_U
   *EQ 'REP_GATE_7.log.copy' *AND *VALUE Monitored_Logs.Log_Path_U
   *EQ '/home/test/' *AND *TIME Monitored_Logs.Date_Last_Modified
   *LE 'Local_Time.Timestamp - 5M'
   
   Name                   : Test_Log_Format_Errors
   Type                   : UNIX Logs
   Formula                : *IF *VALUE Monitored_Logs.Log_Name_U
   *EQ 'REP_GATE_7.log.copy' *AND *VALUE Monitored_Logs.Log_Path_U
   *EQ '/home/test/' *AND *VALUE
   Monitored_Logs.Number_of_Format_Errors_64 *GT 0
   
   Name                   : Test_Log_Combined
   Type                   : UNIX Logs
   Formula                : *IF ( ( *VALUE
   Monitored_Logs.Log_Name_U *EQ 'REP_GATE_7.log.copy' *AND *VALUE
   Monitored_Logs.Log_Path_U *EQ '/home/test/' *AND *TIME
   Monitored_Logs.Date_Last_Modified *EQ 'Local_Time.Timestamp -
   5M' ) *OR ( *VALUE Monitored_Logs.Log_Name_U *EQ
   'REP_GATE_7.log.copy' *AND *VALUE Monitored_Logs.Log_Path_U *EQ
   '/home/test/' *AND *VALUE Monitored_Logs.Monitor_Status *NE
   Running ) *OR ( *VALUE Monitored_Logs.Log_Name_U *EQ
   'REP_GATE_7.log.copy' *AND *VALUE Monitored_Logs.Log_Path_U *EQ
   '/home/test/' *AND *VALUE
   Monitored_Logs.Number_of_Format_Errors_64 *GT 0 ) )
   
   Name                   : Test_Correlated
   Type                   : All Managed Systems
   Formula                : *IF ( ( *VALUE *HSITNAME *EQ
   Test_Log_Running *AND *VALUE *HNODE *EQ NMP136:KUL *AND *VALUE
   *HDELTASTAT *EQ Y ) *OR ( *VALUE *HSITNAME *EQ
   Test_Last_Modified_Date *AND *VALUE *HNODE *EQ NMP136:KUL *AND
   *VALUE *HDELTASTAT *EQ Y ) *OR ( *VALUE *HSITNAME *EQ
   Test_Log_Format_Errors *AND *VALUE *HNODE *EQ NMP136:KUL *AND
   *VALUE *HDELTASTAT *EQ Y ) )
   
   
    
   
   

LOCAL FIX
 *  Instead of using a single complex situation, create individual
   situations for each clause, and a correlated situation to test
   combinations of the individual situations
   
   
    
   
   

PROBLEM SUMMARY
 *  Situations containing multiple "OR" criteria and utilizing the
   *TIME with either LOCALTIME or UTCTIME causing a JOIN
   operation may not raise correctly.
   
   
    
   
   

PROBLEM CONCLUSION
 *  The MKTIME function using a two table JOIN with the LOCALTIME or
   UTCTIME table has limitations. Further references to LOCALTIME
   will also implicitly include UTCTIME.
   
   Currently, only an SQL JOIN where LOCALTIME is compared to an
   application TIME column works,i.e. the application table's TIME
   column compared with eg. the LOCALTIME SYSTIME column.
   
   The problem reported here was a WHERE clause constructed with
   multiple "OR" filters where some of the "OR" filters did not
   include the LOCALTIME column.  If one filter includes LOCALTIME
   then all "OR"filters must include "LOCALTIME".  Although the
   "OR" filter without the LOCALTIME column would be logically
   true, the TEMS would not return data (raise a situation) because
   the JOIN'ed table was not included in the "OR" filter.
   
   The following is a specific example of what was described above:
   
   "OR" filter WHERE clause:
   
     WHERE  ULMONLOG.ORIGINNODE = "2ad9elp4:KUL"       AND
        ( ( ULMONLOG.ULOGPATH = N'/home/test/'         AND
            ULMONLOG.ULOGNAME = N'REP_GATE_7.log.copy' AND
            ULMONLOG.MONSTATUS  = 'Running')           OR
          ( ULMONLOG.ULOGPATH = N'/home/test/'         AND
            ULMONLOG.ULOGNAME = N'REP_GATE_7.log.copy' AND
            MKTIME(ULMONLOG.LOGMODDATE, '-', '5M') <=
                   LOCALTIME.SYSTIME ) OR
          ( ULMONLOG.ULOGPATH = N'/home/test/'         AND
            ULMONLOG.ULOGNAME = N'REP_GATE_7.log.copy' AND
            ULMONLOG.NUMERRORS >= 0 ) );
   
   The example above contains three "OR" filters.
   
     1. WHERE UUMONLOG.ULOGPATH = N'home/test/ AND
              ULMONLOG.ULOGNAME = N'REP_GATE_7.log.copy' AND
              ULMONLOG.MONSTATUS = "Running"
     2. WHERE UUMONLOG.ULOGPATH = N'home/test/ AND
              ULMONLOG.ULOGNAME = N'REP_GATE_7.log.copy' AND
              MKTIME(ULMONLOG.LOGMODDATE, '-', '5M') <=
                     LOCALTIME.SYSTIME
     3. WHERE UUMONLOG.ULOGPATH = N'home/test/ AND
              ULMONLOG.ULOGNAME = N'REP_GATE_7.log.copy' AND
              ULMONLOG.NUMERRORS >= 0
   
   All three "OR" filters have the same initial criteria.  i.e.
   UUMONLOG.ULOGPATH = N'home/test/ AND ULMONLOG.ULOGNAME =
   N'REP_GATE_7.log.copy'. It's only the third AND'ed condition
   that makes filters 1, 2 and 3 different/unique.
   
   The problem encountered here was the above SQL would only return
   data (raise a situation) when "OR" filter #2 was true.
   Conditions #1 and #3 would never return data (raise a situation)
   even though all conditions were true because conditions #1 and
   #2 did not utilize the JOIN table. In this case the JOIN'ed
   table is LOCALTIME.
   
   It may not be readily apparent that the construction of the
   WHERE clause for the situation predicate should give the idea
   that the filter is not for the same table; an SQL JOIN
   operation. This is a limitation of SQL predicate JOIN'ed tables.
   
   Also, since the advent of IRA remote agents, this JOIN operation
   was never considered or upgraded, meaning it has been a known
   deficiency since the introduction of the IRA remote agent
   design.  The following are the known deficiencies:
   
     1. Only a single time value is provided by the agent and the
        MKTIME function and the time comparison is performed at the
        TEMS. So relationally, the comparison done in incorrect.
   
     2. Performance wise, every row from the IRA remote agent
        table must be sent to the TEMS to perform the JOIN and data
        filtering operations.
   
     3.  Using a MKTIME SQL JOIN restricts other "OR" filters to
         the MKTIME JOIN criteria (the problem reported here), eg.
         a successful MKTIME JOIN operation has to be true before
         any other "OR" filters can be evaluated.  This is a
         limitation in the current ITM/TEMS implementation of
         MKTIME/JOIN.
   
   
    
   
   

TEMPORARY FIX

COMMENTS

APAR INFORMATION
 * APAR NUMBER
   IZ97953
   
   
 * REPORTED COMPONENT NAME
   TEMS
   
   
 * REPORTED COMPONENT ID
   5724C04MS
   
   
 * REPORTED RELEASE
   622
   
   
 * STATUS
   CLOSED PRS
   
   
 * PE
   NoPE
   
   
 * HIPER
   NoHIPER
   
   
 * SPECIAL ATTENTION
   NoSpecatt
   
   
 * SUBMITTED DATE
   2011-04-01
   
   
 * CLOSED DATE
   2011-07-22
   
   
 * LAST MODIFIED DATE
   2011-07-22
   
   

 * APAR IS SYSROUTED FROM ONE OR MORE OF THE FOLLOWING:
   
   
   
 * APAR IS SYSROUTED TO ONE OR MORE OF THE FOLLOWING:
   
   
   

FIX INFORMATION

APPLICABLE COMPONENT LEVELS