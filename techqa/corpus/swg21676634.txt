Title: IBM Activate() action function usage - United States

Text:
netcool; impact; netcool/impact; nci; activate; action; function; exit; use; usage; apply; chain; policy; ipl; language TECHNOTE (FAQ)

QUESTION
 Considerations when applying the Activate() function 

ANSWER
The Activate() action function is a useful tool for moving the processing of an event from one Policy to another and providing the latter Policy with the updates and additions to the context performed in the former Policy. Here are a few notes on how the Activate() action function operates and considerations in applying it.
The Activate() action function uses the syntax:



 * 


Where [DataItem] is a row of data acquire by a GetBy*() action function against the internal DataType "Policy", this acquired (usually by name) row being the Policy to be activated. The majority of situations now require a NULL value for this parameter as the preference is generally to activate the Policy by name. This parameter is mostly a legacy section of code from before the addition of the PolicyName feature. 
Where [PolicyName] is the name (string) of the Policy to trigger. This parameter would require a NULL value if you are activating the policy by DataItem. 

The subsequent Policy then launched acquires the context from the original Policy including all updates to the EventContainer and additional variables. 

Upon completion of the subsequent Policy, the Activate() action function returns the context (including all updates to the EventContainer and additional variables) back to the same point (immediately after the Activate()) in the original Policy, which is then processed to conclusion. 

If one has the need to configure a return to the original Policy before the conclusion of the subsequent Policy; one can employ the Exit() parser function - please see TechNote "Exit() action within User Defined Function in Impact Policy Language" [ link below]. This will exit the immediate scope of the process and return to the same point (immediately after the Activate()) in the original Policy with the context including all updates to the EventContainer and additional variables acquired in the subsequent Policy. 

Where one employs a chain of Activate() action functions across multiple Policies each Policy in turn has to complete (or exit) before the context is returned to its predecessor for it to conclude. 

In situations where the values acquired within former Policies are required within latter Policies, but do not determine which Policies are to be run, the use of EventReader Policy Chaining might be more appropriate - please see the TechNote "Policy Chaining usage" [ link below]. Please note that in Policy Chaining the determination of which Policies to run against the event is made at the time the event is initially captured. 
RELATED INFORMATION
 Exit() action within User Defined Function in Impact Po [http://www-01.ibm.com/support/docview.wss?uid=swg21675316]
Policy Chaining usage [http://www-01.ibm.com/support/docview.wss?uid=swg21623713]