Title: IBM Migration to Rational Rhapsody 7.6.1 - United States

Text:
migration; migrating; upgrade; upgrading; rhapsody 7.6.1; rhapsody 761; 7.6.1; 761; v7.6.1 PRODUCT DOCUMENTATION

ABSTRACT
 This document contains information regarding migrating existing models to Rational Rhapsody 7.6.1. 

CONTENT





Browser 


Beginning in version 7.6.1, model elements that are part of the current scope are displayed in bold in the Rational Rhapsody browser. To turn off this feature, set the value of the General::Model::HighlightElementsInActiveComponentScope property to False.




Diagram behavior 


In version 7.6.1, for token-based activity diagrams, Rational Rhapsody now displays the number of tokens. This feature is enabled by default. To preserve the previous diagram behavior for pre-7.6.1 models, the Animation::Activity::ShowFlowToken property was added to the backward compatibility settings for C++ models with a value of False.




Code generation 


C  * In the code generated for C projects, casting is now used for the destroyMethod member of the RiCReactive_Vtbl struct when its value is NULL.
 * Prior to version 7.6.1, if your Rhapsody in C model had a class that contained a part whose type had the Singleton stereotype applied to it, the following warning was issued: "Singleton stereotype ignored: matching instance is not owned by a package", and the code generated would result in compilation errors. Now, if you have such a situation in your model, it will be reported as an error ("A part cannot be a singleton").

C++  * For C++ applications, the code for timeout cancellation has been replaced by a single function. In order to maintain the previous code generation behavior for pre-7.6.1 models, the CPP_CG::Statechart::UsePreviousTimeoutCancellationCode property has been added to the C++ backward compatibility settings with a value of True.
 * Prior to version 7.6.1, there were situations where the declaration of the "send" operation for classes derived from OMReactive was missing the "virtual" keyword. This problem has been corrected in this release.

Java In version 7.6.1, a new property, JAVA_CG::Relation::InitializationStyle, was added to control how relations are initialized in the generated code. The default behavior now is for relations to be initialized when they are declared. Previously, relations were initialized in the constructor by default. To maintain the previous behavior for pre-7.6.1 models, this property is set to "InConstructor" in the Java backward compatibility settings.

Makefiles  * For C++ projects, the generated makefile now references an additional library in order to allow tracing of activities.
 * In general, the makefiles generated by Rational Rhapsody use relative paths to reference files. Prior to version 7.6.1, there were a number of situations where files were referenced with absolute paths. These have been corrected in this release.
 * For C and C++ applications developed for a Linux target, the generated makefile now includes a reference to the librt library.

CORBA Prior to version 7.6.1, there were situations where code generated for CORBA projects contained unnecessary include directives and forward declarations. Beginning with this release of Rational Rhapsody, this unnecessary code is no longer generated.

MISRA C++ profile  * When using the MISRA C++ profile, there were situations where the "virtual" keyword was erroneously used in declarations of inheritance from OMReactive. This issue has been corrected.
 * As a result of the effort to improve MISRA compliance of C++ code generated by Rational Rhapsody, you might find changes in the code generated for your model if the code generated previously included code where the right hand operand of a logical && or || operator contained side effects. 
 * Beginning in version 7.6, the code generated for ports included initialization of the _p_ attribute in the port's constructor, however, this was not done in the code generated with the MISRA C++ profile. Now, this initialization is also included for MISRA-compliant code.
 * When using the MISRA C++ profile, the isTypeOf() operation is no longer generated if there is no event hierarchy. In cases where there is event inheritance, the method is generated and a message is included to point out that this code is not MISRA-compliant. For cases where this method is no longer generated, the calls to the method have been replaced by alternative code that performs the same actions.
 * When using the MISRA C++ profile, there are cases where the code generated for statecharts includes empty "else" blocks. In such cases, a comment is now generated to explain this deviance from the standard.
 * In the MISRA C++ profile, the value of the CPP_CG::Configuration::GenIndexTypeAs property has been changed from RhpInteger to Rhp_int32_t. In the generated code, you will see this change reflected in the parameter type used for the getAt operation generated for relations.

Activities and statecharts  * Beginning in version 7.6.1, the text specified for guards in token-based activity diagrams is included in the generated code. Before this change, guards could contain any text, and this could result in compilation problems if the new behavior was used for pre-7.6.1 models. To prevent any such problems, the CPP_CG::Activity::MeaningfulGuards property was added to the backward compatibility settings for C++ projects with a value of False.
 * Prior to version 7.6.1, a bug prevented code from being generated for transition actions between a junction connector and the next state if one of the transitions entering the junction connector was the default transition. This problem has been corrected in version 7.6.1. To preserve the previous code generation behavior for pre-7.6.1 models, the CG::Statechart::GenerateActionsAfterJunctionForDefaultTransition property was added to the backward compatibility settings for C++ and Java with a value of False.




SysML 


Beginning in version 7.6.1, when constraints are displayed in a compartment, both the name and specification are displayed, as opposed to just the specification, as was the case previously. This change was made to increase compliance with the SysML specification.

When constraints are displayed as individual elements on a diagram, if you select "Box Style" as the Notation Style, the specification of the constraint is now displayed in addition to the name.

The Display Options window now allows you to display stereotypes assigned to Flow Ports, Action Pins, and Activity Parameters.



 Back to top