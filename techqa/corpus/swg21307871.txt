Title: IBM Problems with Anonymous principal UNAUTHENTICATED when using the Java API - United States

Text:
Requested item not found. Principal UNAUTHENTICATED not found WebSphere Anonymous Thick client JAAS TECHNOTE (TROUBLESHOOTING)

PROBLEM(ABSTRACT)
 Client configuration issues can cause the calling principals identity to not be propagated to the server. Usually this type of problem occurs with thick java clients where the code is not executing inside of the WebSphere application server. 


SYMPTOM
The server throws an com.filenet.api.exception.EngineRuntimeException to the client with one of the following messages: 

Anonymous users aren't allowed access to the Content Engine.

Requested item not found. Principal UNAUTHENTICATED not found. 


CAUSE

The WebSphere® client is not configured correctly and is unable to propagate the calling principals identity across the EJB transport.

This problem can be caused by any of the following issues:


 1. Problems with use of JAAS (Java Authentication and Authorization Service).
    
    a. Improper login module was used. The WebSphere login module must be used for authentication.
    
    b. Missing or improper execution of code inside a PrivilegedAction using the com.ibm.websphere.security.auth.WSSubject.doAs method. 
    
    TIP The API provides methods for creating and executing code using a JAAS Subject. See the UserContext class in the API documentation for further information.
    
 2. The IBM JRE was not used or a version of the JRE was used that doesn't match the server.
    
 3. The required IBM WebSphere jar files are not on the class path.
    
 4. Missing or invalid sas.client.props file. The client program should pick up the correct sas.client.props file through the com.ibm.CORBA.ConfigURL JVM command line argument. (-Dcom.ibm.CORBA.ConfigURL=<SAS_CLIENT_PROPS_LOCATION>/sas.client.props)


ENVIRONMENT
WebSphere on any operating system.



DIAGNOSING THE PROBLEM
 

An exception will be thrown from the server to the client indicating that Anonymous users are not allowed or that the UNAUTHENTICATED principal can not be found.


RESOLVING THE PROBLEM
 

Carefully review each configuration item that can cause this problem and verify that it is correct. See the product documentation for setting up a thick client. See "Setting up a Thick Client Development Environment" in the Content Engine Java and .NET Developer's Guide (IBM FileNet P8 Documentation > Developer Help > Content Engine Development > Java and .NET Developer's Guide > Getting Started > Concepts). You can download the IBM FileNet P8 Documentation [http://www.ibm.com/support/docview.wss?rs=3278&uid=swg27010422] from the Product Documentation for FileNet P8 Platform Web page. 

 

Follow these guidelines when setting up a thick client configuration:

1. Install the IBM® WebSphere® Application Client for WebSphere Application Server (WAS) on your development client workstation. 
Note that the Application Client version must match the WAS version. 

2. Set up the environment to use the Java Runtime Environment (JRE) that you installed in step 1. Make sure to set the JAVA_HOME environment variable and JRE bin in the path. 

3. Update the sas.client.props (which you installed in step 1) with the following values: 

com.ibm.CORBA.securityServerHost=<hostname>
com.ibm.CORBA.securityServerPort=<portnumber>
com.ibm.CORBA.loginSource=none

where: 

 * hostname is the computer running WebSphere and on which the IBM Filenet Content Engine is deployed. 
 * portnumber is the port number used by the computer identified by hostname (change this value if it differs from the default of 2809)


Setting the loginSource value from prompt (the default) to none can prevent repeated login prompts for user ID and password. When you run your program, make sure that you: 


 * Add the following Java Virtual Machine (JVM) argument: 
   
   For Windows systems:
   -Dcom.ibm.CORBA.ConfigURL=file:/c:/WebSphere/AppClient/properties/sas.client.props
   
   For UNIX systems:
   -Dcom.ibm.CORBA.ConfigURL=file:///usr/WebSphere/AppClient/properties/sas.client.props
   
   The sas.client.props file is located in the directory in which the WebSphere client is installed. Make sure you provide the correct path. 
   
 * Add the appropriate JAR files using one of the approaches listed below: 
   
 * Follow the WebSphere instructions for setting up and running a thick application client on a client machine. (See your WebSphere documentation. Note that WebSphere documentation refers to this environment as a "thin" client, not a thick client.) 
 * Use the -Djava.ext.dirs command line option to include the JAR files from the following directories: <WebSphere install path>\AppClient\lib, <WebSphere Install path>\AppClient\jre\lib\ext, and <WebSphere Install path>\AppClient\plugins. Example (Windows): 


-Djava.ext.dirs="C:\Program Files\IBM\WebSphere\6.1.0.9\AppClient\java\jre\lib\ext;C:\Program Files\IBM\WebSphere\6.1.0.9\AppClient\lib;C:\Program Files\IBM\WebSphere\6.1.0.9\AppClient\plugins" The WebSphere setupClient script creates environment variables that point to the home locations of these directories. You can substitute those variables for the explicit path in your command. Examples: 

Windows: 
-Djava.ext.dirs=%WS6_JAVA_HOME%\AppClient\java\jre\lib\ext;%WS6_HOME%\AppClient\lib;%WS6_HOME%\AppClient\plugins 

UNIX: 
-Djava.ext.dirs="$WS6_JAVA_HOME/AppClient/java/jre/lib/ext:$WS6_HOME/AppClient/lib:$WS6_HOME/AppClient/plugins" 

 

 * Explicitly add all of the JAR files in the <WebSphere install path>\AppClient\lib and <WebSphere install path>\AppClient\plugins directories to your classpath. 
 * Pass the correct URI to the connection. 
   
   A typical URI is "iiop://<hostname>:<port>/FileNet/Engine", where hostname and port must match the host name and port number specified in the BOOTSTRAP_ADDRESS configuration parameter from the WebSphere administration console under Server > Ports.
   
   TIP From the command line on your client development workstation, double-check the host name by issuing a ping command. If ping reports problems find the host specified for the BOOTSTRAP_ADDRESS, you must resolve that situation first. 
 * Add the following Java Virtual Machine (JVM) argument: -Djava.naming.factory.initial=com.ibm.websphere.naming.WsnInitialContextFactory
   

Other issues Based on your environment, be aware of the following issues that require additional steps to be taken:


 * If you do not use UserContext.createSubject, then the caller must initialize the ORB before making the Java Authentication and Authorization Service (JAAS) login call, as shown in the following example:
   
   Context ic = new InitialContext();
   ic.lookup(""); 
   
 * If you use a JAAS stanza other than the FileNetP8 stanza, or if you use an authentication scheme other than username and password, then you must supply a JAAS configuration file. You specify that file using a standard command line argument, as shown in the example below (you should adjust the JAAS stanza name to match the name you plan to use):
   
   -Djava.security.auth.login.config=C:\jaas.conf.WebSphere 
   
   The JAAS stanza in the jaas.conf.WebSphere file should look like this:
   
   FileNetP8 {

com.ibm.ws.security.common.auth.module.proxy.WSLoginModuleProxy required delegate=com.ibm.ws.security.common.auth.module.WSLoginModuleImpl; 
}; 


The WebSphere application client tracing can be used to collect more detailed information for problem isolation. In this case, reviewing the WebSphere application client must gather document [http://www.ibm.com/support/search.wss?rs=180&tc=SSEQTP&tc1=SSC3NAD&q=MustGatherDocument] is useful.