Title: IBM ICM query: Searching for items, documents, and folders based on item, document, and folder attributes - United States

Text:
combined query; combined search TECHNOTE (FAQ)

QUESTION
 How can I run a query that filters some of the attributes in the documents inside a folder and attributes of the folder itself? How can I get this combined query to return a result set (like a matrix or table) with rows and columns where each row corresponds to a matching folder and the columns are determined by the given attributes? The attributes can be from the folder itself or from the documents inside the folder.

The problem I have is that query always returns an item (DKDDO object). While projections can be used to reduce the number of returned attributes, each "fetch" will still return a DKDDO. I will not get a single object returning exactly the requested attribute values, but instead will get item instances of the item types.

I only see a way to get the documents back, and not specify a condition on the folder or linked item attributes.

I can get all the documents, folders, or linked items in the search results, but I cannot figure out which belongs to which just from the result set.

Lastly, what happens if we have multiple instances of a document type in a folder? Would we have multiple values for an attribute? 

CAUSE
This is caused by a limitation in the DB2Â® Content Manager Version 8 query language, because only items can be returned from a query.

ANSWER
You can achieve the result (functionally) that you desire. However, you probably cannot use a single query that returns the results in the exact format that you desire. This document explores several options. Test these options for performance and see if you can find one that works for you. There is no direct solution for these general questions. However, this document can provide building blocks for you to consider. 

First, DB2 Content Manager Version 8 query will always return root or child component DKDDOs. Query itself just populates blank DKDDOs with completed PID information (IDONLY search). If you use a retrieve option, query will call multi-item retrieve on your behalf. Retrieving only information you are interested in displaying at first will save you time. Of course, utilize multi-item retrieve whenever possible. Note that links and folders are not supported by multi-item retrieve, but will instead turn into 1-2 calls to retrieve folder and link information for each item, even when you use multi-item retrieve. The attributes and children are still retrieved in bulk. For example, avoid the ITEMTREE, LINKS_OUTBOUND, and LINKS_INBOUND retrieve options unless you really need all that information loaded in memory.

If you just want to retrieve some attributes and not others, you can use projections as you indicate.

You can also define an item type view, activate it, and query using that view to have only a subset of the attributes and children show through.

You can also create a view that is filtered based on a particular attribute value. For example, a view can show through all forms that have author==smith, and maybe you would call it folderSmithView. This is called a row-based view filter. The system administration client allows you to easily set these when creating view (also known as an item type subset).

Consider using two queries. First use a query to get your full list of folders. Then when a user selects one folder, search for and display all contents of that folder. You can then apply any search criteria you desire to limit what appears in the folders. Also, depending on what view you selected as active for the session, folder contents can be automatically filtered out if they do not meet the view criteria or access privileges needed to view it.

Strongly recommended: Consider setting up the initial query to only return the information you need to show on the first screen, limiting retrieve to only the information you actually need for that display. Then when a user selects one of the results, perform another query or perform a retrieve. If you are displaying multiple levels at once, you can perform several queries. 

Another option is to let the query retrieve all of the folder contents, and then just filter out the ones you do not want in memory or just hide them in your display to the user. As far as the user knows, they did not return in the search. This really is not the best option due to unnecessary memory, processing, and network traffic, but is worth considering.

If you perform several queries, some returning folders and others returning contents of folders, or if you have a single query returning a combination, you need a way to figure out which results belong to which query. You can have your application maintain an attribute of its own in the contents that indicates who their parent folder is without a special call to the server for each, just to figure it out (online support document #1175137), but that still is a call for every item, which is not recommended unless really necessary). Maintaining your own attribute could be very tricky to ensure it is always correct. Plus there is no referential integrity of it. The best solution is to use separate queries where you use the ITEMID of the folder to find the contents using the outbound link traversal, or if you use the ITEMID of one of the contents to traverse the inbound link to the parent folder.

If you end up having to retrieve a whole tree of folders, consider using the two-level link retrieve option (see online support document #1177745.




Cross reference information Segment Product Component Platform Version Edition Enterprise Content Management Content Manager Usage AIX, Linux, Solaris, UNIX, Windows 2000, Windows NT, Windows XP, Windows 2003 8.1, 8.2, 8.3 All Editions