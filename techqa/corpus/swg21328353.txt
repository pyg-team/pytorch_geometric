Title: IBM Using Java api to access workflow is failing with java.lang.NoClassDefFoundError - United States

Text:
java.lang.NoClassDefFoundError: com/ibm/mq/jms/MQDestination; com.ibm.workflow.api.Agent.locate(""; "")) is called. TECHNOTE (TROUBLESHOOTING)

PROBLEM(ABSTRACT)
 You upgraded to WebSphere MQ Workflow 3.6 on same server as WebSphere Application Server, and included fmcjapi.jar and fmcrc file in WebSphere JVM classpath, while WebSphere MQ Series 6.0 version jars was configured with WebSphere Variable MQ_INSTALL_ROOT. But the below WebSphere MQ Jars were not explicitly set in Javaâ„¢ Virtual Memory (JVM) Classpath. "com.ibm.mq.jar, com.ibm.mqjms.jar, jms.jar, connector.jar". 

When these Jars are included in the JVM classpath, MDB listener failed start. WebSphere Application Server support suggests you remove above jars and use WebSphere variable MQ_INSTALL_ROOT in order to resolved MDB listener issue. But now when using Java api to connect to WebSphere MQ Workflow you are getting the below error exceptions:

com.ibm.workflow.api.Agent.locate("","")) is called. 
java.lang.NoClassDefFoundError: com/ibm/mq/jms/MQDestination 
at com.ibm.workflow.client.api.FmcSession.<init>(FmcSession.java:68) 
at com.ibm.workflow.client.api.FmcService.<init>(FmcService.java:54) 
at com.ibm.workflow.client.api.FmcExecutionService.<init>(FmcExecutionService.java:97) 
at com.ibm.workflow.client.api.FmcDomainControllerImpl.locate(FmcDomainControllerImpl.java:97) 
at com.ibm.workflow.api.MQWFAgent$LocLocator.locate(MQWFAgent.java:69) 
at com.ibm.workflow.api.MQWFAgent.locate(MQWFAgent.java:197) 
at com.ibm.workflow.api.Agent.locate(Agent.java:117) 
at com.companyxyz.cc.server.workflowmanager.WorkflowAdapter.logonWorkflowRuntime(Unknown Source) 


CAUSE
WebSphere Application Server uses a hierarchy of classloaders to provide access to various types of classes for an Application running in WebSphere Application Server. When a particular class (requesting class) attempts to load or use another class (target class), the following policies apply to determine which classloader the target class gets loaded on.


 1. The requesting class's classloader will be used to load the target class. 
 2. Classloaders delegate load requests to their parent classloader, so the highest classloader in the hierarchy which has a particular class on its classpath would be the one to load the class.
    

The consequence of this is that target classes which are only available on a classloader lower in the hierarchy than the requesting class's classloader will be hidden from the requesting class 
RESOLVING THE PROBLEM
The solution is to: 

 

 1. Move WebSphere MQ Workflow fmcjapi.jar file into the 'sharedlib'. 
 2. Remove both the WebSphere MQ and WebSphere MQ Workflow classes from the classpath. The WebSphere MQ classes will then be loaded on the WebSphere Application Server Bootstrap Extension Class Loader, and will have access to all the classes they need.
    
    See details in the following Information Center article:
    Shared Libraries in WebSphere Application Server distributed platforms. [http://publib.boulder.ibm.com/infocenter/wasinfo/v6r0/index.jsp?topic=/com.ibm.websphere.base.doc/info/aes/ae/tcws_sharedlib.html]
    

WebSphere MQ Workflow classes need to be loaded in a location which is accessible to your application classes, but also has access to the WebSphere MQ classes using the WebSphere Application Server Bootstrap Extension Class Loader. Based on the WebSphere Application Server documentation, an appropriate way to do this would be to include the WebSphere MQ Workflow classes in a Shared Library. The shared library can then either be associated with specific applications which need access to the classes, or with the application server to make them available to all applications. 


PRODUCT ALIAS/SYNONYM
 fmc00inc fmc00jav fmc00wcl fmc00mqm WMQ WF MQ WF fmc00prf fmc00usa fmc00sya