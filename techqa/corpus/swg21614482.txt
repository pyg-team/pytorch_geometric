Title: IBM Refresh fails with "CREATE UNIQUE INDEX statement terminated because a duplicate key was found" error while replicating to SQL Server target - United States

Text:
CDC; Infosphere CDC; Infosphere Change Data Capture; Change Data Capture; ISCDC; IS-CDC; DataMirror; TS; DataMirror TS; Transformation Server; DataMirror Transformation Server; duplicate key; case sensitive; case insensitive; collation; sql server; refresh TECHNOTE (TROUBLESHOOTING)

PROBLEM(ABSTRACT)
 Refresh fails with "CREATE UNIQUE INDEX statement terminated because a duplicate key was found" error while replicating to SQL Server target. Source table has corresponding columns defined as primary key or unique index so no duplicates are possible and present on the source. 

SYMPTOM
Refresh fails and the message similar to the one below is present in event log: 

[CDC][SQLServer JDBC Driver][SQLServer]The CREATE UNIQUE INDEX statement terminated because a duplicate key was found for the object name 'dbo.TABLE1' and the index name 'PK__TABLE1__4C6B5938'. The duplicate key value is (Value1, Value2). 
A SQL exception has occurred. The SQL error code is '1750'. The SQL state is: HY000. The error message is: 
[CDC][SQLServer JDBC Driver][SQLServer]Could not create constraint. See previous errors. 

Target database uses case-insensitive collation and source database is case-sensitive.

Character columns are part of primary key or unique index on both source and target.


CAUSE
 If source database is case-sensitive and target database uses case-insensitive collation, some rows might be duplicates on target even though they are not duplicates on source. For example:

('EXAMPLE', 12, 'A') and ('Example', 12', 'a')

Above primary key values are not duplicates on source, as they have different case, but they are duplicates in target database which is case-insensitive.


RESOLVING THE PROBLEM
To resolve the problem, you must either: 

 * Make sure that source and target databases are both case sensitive or both case insensitive 
 * Do not use character columns as part of the key 
 * Make sure that no source-side primary key or unique index values differ only by case