Title: IBM RTC on IBM i dependency build loads unchanged source and unrelated files to target library - United States

Text:
 TECHNOTE (TROUBLESHOOTING)

PROBLEM(ABSTRACT)
 When running a dependency build for source that is compiled, but not changed, the source file and other unrelated and non-dependent files are being loaded to the load directory when they should not. The source file should not be uploaded because it is not being changed. The file types are CICSCBLLE, Copybooks, and COBOL. 

SYMPTOM
Unnecessary files are uploaded to the target library.


CAUSE
Build definition settings

ENVIRONMENT
IBM i

RESOLVING THE PROBLEM
The two keys to ensuring that the right files are included and extraneous files are not is to


1) uncheck "Delete directory before loading" in the build definition under Jazz Source Control/Load Options and
2) review the order of the language definitions being used. 

To determine if a file exists on the file system at the current version in the SCM, the SCM creates and stores file metadata for every file it loads to either IBM i or z/os system. When must load a file, the SCM first checks the metadata to see if a) the file is loaded and b) what version the loaded file is. If the file is already loaded at the version in the SCM, it skips loading the file. 

The "Delete directory before loading" build option also deletes the SCM metadata directory (.jazz5) for the resource prefix of the build definition. 

When the option is unchecked, the metadata is being saved, so the SCM process will begin to skip the already loaded files unless they have been changed. 

As for the language definition order, the IBM i dependency build does not load in any specific order, but there is an order to what occurs in the build. Physical files will be built prior to logical files and copybooks and SQL includes are built prior to RPG and COBOL files. A sample order could be: 


Build_Physical Files
Build_Display Files
Build_Logical Files
Build_COPYBOOK
Build_SQL
Build_SQLCBLLE
Build_CICSCBLLE
Build_CICSMAP
Build_CLLE
Build_CL_OPM
Build_CBL
Build_SQLCBL
Build_RPGLE
Build_PARM 

Ensuring these two steps are followed can reduce the number of unrelated or unwanted files from being loaded.