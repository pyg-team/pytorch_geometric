Title: IBM Enabling Trace Options for Native JDBC Applications - United States

Text:
 TECHNOTE (TROUBLESHOOTING)

PROBLEM(ABSTRACT)
 This document describes the options that are available for enabling traces of the Native IBM OS/400 JDBC driver. 

RESOLVING THE PROBLEM
This document describes the methods that are available to trace the Native IBM OS/400 JDBC driver (com.ibm.db2.jdbc.app.DB2Driver). Most trace options can be enabled using JVM properties. Some trace options can also be set by using environment variables as described below. Trace settings are read when a JDBC connection is made. The trace ends when all connections being traced are closed. 

JVM Property Environment Variable Connection Property Description jdbc.db2.trace QIBM_JDBC_TRACE_LEVEL trace=true
*The connection property is limited to true or false. Traces JDBC program flow with increasing levels of detail. Possible values are 0-4. For more information see trace level below. jdbc.db2.trace.config QIBM_JDBC_TRACE_CONFIG [/support/docview.wss?uid=nas8N1019479&amp;aid=1] File name to direct trace output to. Default is standard output. Possible values:

stdout
file://[path/]<filename>

Notes: 
1. The directories in the path must exist.
2. Include %j in the file name to have the job number inserted in the file name. jdbc.db2.cli.trace <none> [/support/docview.wss?uid=nas8N1019479&amp;aid=1] Adds a subset of CLI calls to trace output. Possible values are true and false. jdbc.db2.malloc.trace <none> [/support/docview.wss?uid=nas8N1019479&amp;aid=1] Adds detailed memory allocation information to trace output. Possible values are true and false. jdbc.db2.trace.monitor=true
<none> [/support/docview.wss?uid=nas8N1019479&amp;aid=1] Enable Dynamic tracing. Possible values are true and false.

See document New Native JDBC dynamic tracing for further information. <none> <none> "server trace=n" Provides additional diagnostic options, such as job log and database monitor. See the Server Trace section below for more detail. 
Note: The file created by the jdbc.db2.trace.config JVM property is limited to a 2 GB maximum file size, at which point tracing will stop. If this limit is being encountered, consider using the dynamic tracing option to be more selective about when tracing is enabled. 

Property: jdbc.db2.trace (QIBM_JDBC_TRACE_LEVEL) 

The property and environment variable can be set to one of the options shown in the table below: 
No Trace '0' No tracing. Error Level '1' Trace failures only. Info Level '2' JDBC trace and errors. Verbose Level '3' All JDBC calls and internal calls. Extended Level '4' All JDBC trace points except CLI and malloc. 
Server Trace 

The value is a combination of the following options. To enable multiple options, add the values. For example, database monitor, job debug and save joblog would be a value of 14. 

SERVER_TRACE_START_DATABASE_MONITOR 2 Start the database monitor on the JDBC server job. Output file is QUSRSYS/QSQL123456 where 123456 is the job number of the QSQSRVR job that was traced. SERVER_TRACE_DEBUG_SERVER_JOB 4 Start debug on the JDBC server job. SERVER_TRACE_SAVE_SERVER_JOBLOG 8 Save the joblog when the JDBC server job ends. SERVER_TRACE_TRACE_SERVER_JOB 16 Start job trace on the JDBC server job. SERVER_TRACE_SAVE_SQL_INFORMATION 32 Save SQL information. 

Depending on the type of application, one of the following methods should be used to set the trace options: 

Setting the trace in QSHELL 
For console applications that can be run from the QSHELL environment ( STRQSH command), the JVM properties can be set with the Java command when the program is run: 

Java -Djdbc.db2.trace=4 -Djdbc.db2.trace.config=file:///adirectory/jdbcLog.txt -Djdbc.db2.cli.trace=true -Djdbc.db2.malloc.trace=false MyClass 

Setting the trace in RUNJVA 
To specify JVM properties on the RUNJVA or JAVA commands use the "PROP" field (press F10=Additional parameters): 

RUNJVA CLASS(MyClass) PROP( (jdbc.db2.trace '4') (jdbc.db2.trace.config 'file:///adirectory/jdbcLog.txt') (jdbc.db2.cli.trace 'true')) 

Setting the trace using Environment variables 
If only the basic trace is required the environment variables may be used rather than the JVM properties. Before issuing the RUNJVA or STRQSH commands, use the following to update the environment variables for the current job: 

ADDENVVAR ENVVAR(QIBM_JDBC_TRACE_LEVEL) VALUE('4') LEVEL(*JOB) 
ADDENVVAR ENVVAR(QIBM_JDBC_TRACE_CONFIG) +
VALUE('file:///adirectory/jdbcLog.txt') LEVEL(*JOB) 

If the job that contains the JVM can not be determined, it may not be possible to set the environment variables for the job before the JDBC connection is made. In this case, it may be necessary to set the environment variable for the system before launching the application. Note that this will trace all JDBC applications on the system. 

ADDENVVAR ENVVAR(QIBM_JDBC_TRACE_LEVEL) VALUE('4') LEVEL(*SYS) 
ADDENVVAR ENVVAR(QIBM_JDBC_TRACE_CONFIG) +
VALUE('file:///adirectory/jdbcLog.txt') LEVEL(*SYS) 


IBM WebSphere Advanced Server 

If the application being traced is a WebSphere Application Server, then command line arguments can be specified using the WebSphere Advanced Administrative Console. Listed below is a typical JVM property string that would be used in a WebSphere environment: 

-Djdbc.db2.trace=3 -Djdbc.db2.trace.config=file:///tmp/jdbcLog.txt -Djdbc.db2.cli.trace=true 

Refer to the following document for screenshots showing where the JVM properties are updated on various WebSphere versions: 

N1012541, WebSphere Screenshots for Native JDBC [http://www-01.ibm.com/support/docview.wss?uid=nas8N1012541] 

Connection Properties 
To enable traces set by a connection property, the application or datasource must be modified to include the new property. 

Related Information 
For information about the dynamic trace refer to the following Rochester Support Center Technote: N1019313, Native JDBC Dynamic Tracing [http://www-01.ibm.com/support/docview.wss?uid=nas8N1019313]  

HISTORICAL NUMBER
 22922131