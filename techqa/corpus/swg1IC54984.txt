Title: IBM IC54984: java.lang.StackOverflowError exception thrown when using the    '//' operator in the message filter primitive - United States

Text:
 
APAR STATUS
 * CLOSED AS PERMANENT RESTRICTION.
    
   
   

ERROR DESCRIPTION
 *  A java.lang.StackOverflowError exception is thrown when using
   the Message Filter primitive, where the message being filtered
   on contains a byte array and the filter causes a parse of
   binary data, such a byte array.
   
   The exception occurs when the message filter examines the byte
   array to determine if a match is found.  One XPath expression
   which causes this to happen is whenever the operator '//' is
   used in the matching expression, which results in the primitive
   searching all elements in the array.
   
   The stack trace resembles the following:
   
   CNTR0020E: EJB threw an unexpected (non-declared) exception
   during invocation of method "invokeRequestFlow" on bean
   "BeanId(SomeApp#SomeEJB.jar#MediationFlow, null)". Exception
   data:
   java.lang.StackOverflowError
           at
   org.apache.commons.jxpath.ri.model.beans.CollectionPointer.test
   Node(CollectionPointer.java(Compiled Code))
           at
   org.apache.commons.jxpath.ri.model.beans.CollectionPointer.test
   Node(CollectionPointer.java(Compiled Code))
           at
   org.apache.commons.jxpath.ri.model.beans.CollectionPointer.test
   Node(CollectionPointer.java(Compiled Code))
   ...
   ... etc.
   
   
    
   
   

LOCAL FIX
 *  Suppose we an XML represented structure such as:
   
     <context/>
     <headers>
       <SMOHeader>
   <MessageUUID>4D37D44B-0115-4000-E000-39647F000001</MessageUUID>
         <Version>
           <Version>6</Version>
           <Release>0</Release>
           <Modification>2</Modification>
         </Version>
         <MessageType>Request</MessageType>
       </SMOHeader>
     </headers>
     <body xsi:type="_interface:operation1RequestMsg">
       <operation1>
         <input1>000100010001</input1>
       </operation1>
     </body>
   
   where <input1> is defined as a byte array Java object type (a
   hexBinary type in XSD terminology).
   
   Then we encounter the problem whenever we use an XPath
   expression of the form:
   
       //body/operation1/input1="something"
   
   This is a valid XPath expression (if a little strange with the
   leading //, instructing to search the entire document for
   body/operation1/input1) and something we should be able to work
   with.  If we change the XPath expression to any one of:
   
       /body/operation1/input1="something"
       //body/operation1/input1
   
   we do not see the problem.  The scenario also works fine if the
   message does not contain a Java byteArray.
   
   
    
   
   

PROBLEM SUMMARY
 *  ****************************************************************
   * USERS AFFECTED: Users of WebSphere Enterprise Service Bus    *
   *                 and WebSphere Process Server where a         *
   *                 mediation flow component is being used       *
   *                 which contains a message filter primitive,   *
   *                 and the messages being processed contain     *
   *                 binary elements.                             *
   ****************************************************************
   * PROBLEM DESCRIPTION: The message filter primitive makes use  *
   *                      of JXPath to process XPath operations.  *
   *                                                              *
   *                      When JXPath examines a binary field,    *
   *                      in certain circumstances a              *
   *                      java.lang.StackOverflowError exception  *
   *                      is thrown.                              *
   ****************************************************************
   * RECOMMENDATION: If you encounter this problem, it is         *
   *                 recommended that you adjust your XPath       *
   *                 expression such that JXPath does not search  *
   *                 any binary fields within the Service         *
   *                 Message Object messages.                     *
   ****************************************************************
   Supposing you have Service Message Object (SMO) of the
   following form:
   
   <context/>
   <headers>
     <SMOHeader>
       <MessageUUID>4D37D44B-0115-4000-E000-39647F01</MessageUUID>
       <Version>
         <Version>6</Version>
         <Release>0</Release>
         <Modification>2</Modification>
       </Version>
       <MessageType>Request</MessageType>
     </SMOHeader>
   </headers>
   <body xsi:type="_interface:operation1RequestMsg">
      <operation1>
        <input1>000100010001</input1>
     </operation1>
   </body>
   
   where the element <input1> is defined in the schema as a byte
   array Java object type (for example a hexBinary or base64Binary
   type in XSD terminology).
   
   
   If you have a message filter primitive within a mediation
   flow component, which operates on this SMO, you could choose
   an XPath expression of the form:
   
          //body/operation1/input1="something"
   
   This is a valid (if slightly unusual) XPath expression which
   instructs the XPath engine to search through all elements
   within the document, examining the content of a
   /body/operation1/input1 child tree and comparing it with the
   value "something".
   
   However, at runtime when the message is processed, you will
   see an exception thrown by JXPath (the underlying XPath engine
   for the message filter primitive), which is of the form:
   
   [28/09/07 18:44:05:592 BST] 00000049 ExceptionUtil E
   CNTR0020E: EJB threw an unexpected (non-declared) exception
   during invocation of method "invokeRequestFlow" on bean
   "BeanId(simpleJXPathTestApp#simpleJXPathTestEJB.jar#MediationFl
   ow, null)". Exception data: java.lang.StackOverflowError
           at
   org.apache.commons.jxpath.ri.model.beans.CollectionPointer.test
   Node(CollectionPointer.java(Compiled Code))
           at
   org.apache.commons.jxpath.ri.model.beans.CollectionPointer.test
   Node(CollectionPointer.java(Compiled Code))
           at
   org.apache.commons.jxpath.ri.model.beans.CollectionPointer.test
   Node(CollectionPointer.java(Compiled Code))
   ... ... ... etc.
   
   
   This problem is the result of a defect within the version of
   JXPath which is currently being utilised by the message
   filter primitive.
   
   
    
   
   

PROBLEM CONCLUSION
 *  To resolve this problem, you are required to modify your XPath
   expression such that JXPath is not instructed to search every
   possible element.  This is achieved by removing the leading
   '/' character on the XPath expression.
   
   To illustrate using the above example, we used an XPath
   expression of:
   
       //body/operation1/input1="something"
   
   Removing the leading '/' to work around this problem, the
   expression becomes:
   
       /body/operation1/input1="something"
   
   which is likely to have the same intended functional meaning as
   the original expression with respect to the match, in that the
   filter primitive matches whenever the structure
   
   <body>
     <operation1>
       <input1>something</input1>
     </operation1>
   </body>
   
   is present in the SMO.
   
   Note that this problem will only be encountered when the SMO
   contains elements which are treated by Java as Java byte
   arrays.
   
   
    
   
   

TEMPORARY FIX

COMMENTS

APAR INFORMATION
 * APAR NUMBER
   IC54984
   
   
 * REPORTED COMPONENT NAME
   WEB ESB FOR WIN
   
   
 * REPORTED COMPONENT ID
   5724I8200
   
   
 * REPORTED RELEASE
   200
   
   
 * STATUS
   CLOSED PRS
   
   
 * PE
   NoPE
   
   
 * HIPER
   NoHIPER
   
   
 * SPECIAL ATTENTION
   NoSpecatt
   
   
 * SUBMITTED DATE
   2008-01-22
   
   
 * CLOSED DATE
   2008-05-23
   
   
 * LAST MODIFIED DATE
   2008-05-23
   
   

 * APAR IS SYSROUTED FROM ONE OR MORE OF THE FOLLOWING:
   
   
   
 * APAR IS SYSROUTED TO ONE OR MORE OF THE FOLLOWING:
   
   
   

FIX INFORMATION

APPLICABLE COMPONENT LEVELS