Title: IBM Errors in import jobs after migrating to version 10 or later - United States

Text:
migrateDataToXml.sh; user interface; MQ; UTF-8; UTF-16 ; UTF-32; locale TECHNOTE (FAQ)

QUESTION
 We migrated to version 10 and started seeing errors in our import jobs related to updating and saving items. Why am I seeing them and how I can prevent them? 

CAUSE
Prior to version 10 fix pack 1, the product stored indexed item attributes in a regular table called ITA and the non-indexed attributes in a binary blob table ITD (for efficiency in storage). This meant only indexed attributes could be used for searches. 

Version 10 fix pack 1 onwards, we introduced XML version of the item data in ITX table. This lead to improved product performance and greater flexibility in search.

Before this enhancement, there were very few restrictions on the type of data or characters that the users could use within item attributes. But XML has restrictions on what can and can not be stored within valid XML elements. As a result the product also has a limitation on the type of data we can store within an item. Therefore some characters or strings which could have been saved in previous versions result in an error in version 10 especially when we use a feed file for import. Please review the following link for valid XML data:
http://en.wikipedia.org/wiki/Valid_characters_in_XML [http://en.wikipedia.org/wiki/Valid_characters_in_XML]


ANSWER
If you frequently encounter errors during imports related to the character being saved in items, then you can update your import job to format the corresponding attributes (of type String) to prevent it. The errors resemble the following stack:
Exception:Error processing xml queue. m_xmlPendingQueue contained at time of failure: [] 

Error processing xml queue. m_xmlPendingQueue contained at time of failure: []
at com.ibm.ccd.content.common.EntryXmlProcessor.sendPendingXmlToDb(EntryXmlProcessor.java:311)
at com.ibm.ccd.common.context.common.DBContext.ensurePendingXMLWrittenToDB(DBContext.java:592)
at com.ibm.ccd.common.context.common.DBContext.commit(DBContext.java:560)
at com.ibm.ccd.common.context.common.DBContext.commit(DBContext.java:538)
... 

 

To prevent these, you may use the following functions (the IBM InfoSphere MDM Information Center has detailed information at: http://pic.dhe.ibm.com/infocenter/mdm/v10r0m0/index.jsp [http://pic.dhe.ibm.com/infocenter/mdm/v10r0m0/index.jsp]): 

- encodeUsingCharset
- replaceCharsNotInDecRangeWithHex
- escapeWithHTMLEntities
- stripOutNonASCII 

 

For example, if we are importing a Str to update an attribute, then we can use the following function to remove unreadable ASCII characters from it: escapeWithHTMLEntities(str,21,127). If you already have an unreadable character in some of your items(from previous versions), then you can either save that item again from the UI individually or use a function like the following: 
theItem.setCtgItemAttrib("Spec_Name"+ "/Attr1", escapeWithHTMLEntities(theItem.getCtgItemAttrib("Spec_Name"+ "/Attr1"),21,127)); 

 

We provided a range of 21 to 127 because ASCII characters 0 to 1F (hexadecimal) are unreadable as shown below: 

[/support/docview.wss?uid=swg21633581&amp;aid=1]




PRODUCT ALIAS/SYNONYM
 WPC 
MDMCS
MDMPIM
MDM Server for PIM
WebSphere Product Center
InfoSphere MDM Server for PIM
Infosphere Master Data Management Collaboration Server
InfoSphere Master Data Management Server for Product Information Management