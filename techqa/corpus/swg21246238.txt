Title: IBM MustGather: WebSphere Application Server Community Edition JVM Crash on Windows - United States

Text:
ce; windows; wasce; was ce; crash; jvm; sdk; java; MustGatherDocument; WAS CE; WAS CE; WAS CE; WASCE; WASCE; WASCE; JBoss; JBoss; JBoss; Glassfish; Glassfish; Glassfish; App Server; App Server; WebSphere CE; WebSphere CE; WebSphere CE; WebSphere Community Edition; WebSphere Community Edition; WebSphere Community Edition; IBM CE; IBM CE; IBM CE; Open Source; Open Source; Open Source TECHNOTE (TROUBLESHOOTING)

PROBLEM(ABSTRACT)
 MustGather for problems with WebSphere Application Server Community Edition JVM crash on the Microsoft Windows platform. Gathering this information before calling IBM support will help familiarize you with the troubleshooting process and save you time 

RESOLVING THE PROBLEM
This document details the MustGather data to be collected for WebSphere Application Server Community Edition when IBM Java 1.5 or IBM Java 1.6 Runtime crashes on the Windows operating system. 

Setup for a Crash on Windows
The information below will allow you to ensure that the required settings are in place to generate Crash data files. 

 * Ensure the generation of a full crash dump file
   
   Java Virtual Machine Settings
   
   To Generate Crash Dumps on Crash Events: 
   
   Check that the JVM is set to produce a core file when a crash occurs, run the following: 
   
   java -Xdump:what
   
   which should produce the following: 
   
   dumpFn=doSystemDump
   events=gpf+abort
   filter=
   label=c:\sdk\jre\bin\core.%Y%m%d.%H%M%S.%pid.dmp
   range=1..0
   priority=999
   request=nodumps
   
   The values above are the default settings. At least events=gpf must be set in order to generate a core file when a crash occurs. Options can be changed and/or set using the command line option: 
   
   -Xdump:system[:=, ...]
   
   More information about using the -Xdump option is available here [http://www.ibm.com/support/docview.wss?uid=swg21242497].
   
   Available Disk Space 
   
   It is also important to ensure that there is enough disk space available for the crash dump file to be written to. The JVM allows the crash dump file to be written to any directory that is specified in the label option. In order for the crash dump file to be written to this location, there must be sufficient disk space (up to 2GB may be required),and the correct permissions for the Java process to write to that location. 
   
   
 * Ensure the generation of a javacore.txt file
   The Javadump (javacore) is a useful file to provide information about the general state of the Java runtime and the applications running on it. In order to ensure this is generated the relevant settings must be in place. Although they are set by default it is possible that the default setting has been changed so it is important to check that the correct settings are in place.
   
   Check that the JVM is set to produce a javadump file when a user signal (SIGQUIT) or GPF (General Protection Fault i.e. SIGSEGV) occurs, by adding the following
   command line option: 
   
   java -Xdump:what
   
   which shows the options which are set, such as:
   
   dumpFn=doJavaDump
   events=gpf+user+abort
   filter=java/lang/OutOfMemoryError
   label=c:\sdk\jre\bin\javacore.%Y%m%d.%H%M%S.%pid.txt
   range=1..0
   priority=10
   request=exclusive
   
   The above values are the default settings. At least events=gpf and events=user must be in place to generate javadumps on a crash or a user signal. Options can be changed and/or set using the command line option: 
   
   -Xdump:java[:=,...]
   
   So, for example, to set the ability to generate javadump files on user signals you would use: 
   
   -Xdump:java:events=user



Gathering data 
The following steps should be taken to collect the necessary diagnostic data 
 * Run JExtract tool
   Run JExtract against the crash dump file located as specified by the label field in the -Xdump:what output as shown the in setup: 
   
   <SDK>/jre/bin/jextract.exe [core file]
   
   and collect the .jar file created which contains the crash dump file along with the xml output of jextract. Should for any reason the jextract fail, collect the crash dump file (core.xxxx.dmp) instead.
   
   Note: jextract.exe should be used from the same SDK which faced the crash.
   
   
 * Collect javadump (javacore)
   This should be in the location detailed against the label field in the -Xdump:what output as shown in the setup.
   
   
 * Collect any stdout and stderr generated by the Java process
   


Additional information  * Testcase to simulate the crash (if any) 
 * Recent changes to the environment prior to crash 
 * Collect general information of the server as discussed here [http://www.ibm.com/support/docview.wss?uid=swg21231419#generalMustGather]


These data files should then be submitted to IBM Support. 
RELATED INFORMATION
#Submitting diagnostic data to IBM Support [http://www.ibm.com/support/docview.wss?uid=swg21153852]