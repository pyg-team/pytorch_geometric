Title: IBM Rendering an Alphablox ReportBlox report to CSV or tab-delimited formats for Excel (or other applications) - United States

Text:
 TECHNOTE (FAQ)

QUESTION
 Sample JSP code for rendering an Alphablox ReportBlox report to CSV or tab-delimited formats for Excel (or other applications) 

ANSWER



Alphablox® ReportBlox report content can be exported to many applications and format using some JSP code and ReportBlox API calls. An example of exporting a ReportBlox report to Microsoft® Excel as HTML is included in the Relational Reporting BloxSampler, under Alphablox 5.5 and later, and can typically be found at: 

http://<yourAlphabloxWASHost>/AlphabloxReporting/index.html 

You can export the data out to any other application that can read an HTML document by simply changing the <%@ page contentType="..." directive) which sets the mime type in the document. You can also output the report data in other formats like Tab-delimited data by iterating over the ReportBlox result set. 

Below is a generic page to render a ReportBlox as CSV or tab delimited data. Attached to this technote is a simple test page that uses the Oracle® version of QCC. While this code sample is a little more 'complex' than it needs to be, it is also more flexible, so you can adapt it to your particular needs. 

Note the use of the bloxName attribute in the SQLData tag and the reportname passed thru the URL in this example. This is so that you can use this one JSP page to render any ReportBlox in this fashion. 

 

<%@ taglib uri="bloxreporttld" prefix="bloxreport" %> 

<%-- for the taglibs --%> 

<%@ page errorPage="error.jsp" %> 

<%-- error handling; ensure file exists --%> 

<%@ page import="com.alphablox.blox.*,
com.alphablox.pipeline.*" %> 

<%-- for report blox & pipeline classes --%> 

<%@ page import="java.io.*" %> 

<%-- for standard java.io classes --%> 

<%@ page contentType="application/vnd.ms-excel; charset=UTF-8" %> 

<%-- Set the contentType (application) --%> 

<%
String reportName = request.getParameter( "reportname" );
String delimiterName = "tab";
String reportDataName = reportName + "_data" ;
String title = "render to csv sample page";
String lineDelimiter = "\n";
String columnDelimiter = "\t";

if( (request.getParameter( "delimiter" )!= null) && 
("comma".equals( delimiterName )) )
columnDelimiter = ",";

String dataSetBegin = title + " for the ReportBlox " + reportName;
String dataSetEnd = "\nend " + reportName + " data";
%><bloxreport:sqlData id="data" 
bloxName="<%= reportDataName %>" 
/><%

IDataSet dataSet = data.getData();
IDimension columnDimension = 
dataSet.getDimension( IDimension.COLUMN_DIMENSION_NAME );
int rowIdx = dataSet.getDimensionIndex( IDimension.ROW_DIMENSION_NAME );
int columnIdx = dataSet.getDimensionIndex( IDimension.COLUMN_DIMENSION_NAME );
int rowCount = dataSet.getDimension( IDimension.ROW_DIMENSION_NAME ).getMemberCount();
int columnCount = dataSet.getDimension( IDimension.COLUMN_DIMENSION_NAME).getMemberCount();

int[] coordinates = new int[2];

out.println( "There are " + rowCount + " rows and " 
+ columnCount + " columns." ) ; 

if( dataSetBegin != null )
out.println( dataSetBegin );

// itterate over the column headers
for( int column = 0; column < columnCount; column++ )
{
if( column != 0 )
out.print( columnDelimiter );
out.print( columnDimension.getMember( column ).getName() );
}

out.println( lineDelimiter );

// itterate over the actual data
for( int row = 0; row < rowCount; row++ )
{
if( lineDelimiter != null && row != 0 )
out.print( lineDelimiter );

for( int column = 0; column < columnCount; column++ )
{
if( column != 0 )
out.print( columnDelimiter );
coordinates[rowIdx] = row;
coordinates[columnIdx] = column;
out.print( dataSet.getValue( coordinates ) );

} // end columns

}//end rows

if( dataSetBegin != null )
out.print( dataSetEnd );
%> 




1176889.zip [/support/docview.wss?uid=swg21176889&aid=2] [/support/docview.wss?uid=swg21176889&aid=1]