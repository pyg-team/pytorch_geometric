Title: IBM Using ReleaseBuilder effectively - United States

Text:
xmlaccess; releasebuilder; XMLACCES; PORTSE TECHNOTE (TROUBLESHOOTING)

PROBLEM(ABSTRACT)
 This document describes the IBM WebSphere Portal ReleaseBuilder utility and the scenarios in which it is used. 

RESOLVING THE PROBLEM

Introduction
ReleaseBuilder is an IBM WebSphereÂ® Portal utility that was introduced in version 5.1 to simplify the task of updating one Portal environment with changes made in another, that is, to "stage" a Portal release between environments.

ReleaseBuilder eliminates the need to export and import entire configurations which can take considerable time, or partial configurations generated using hand-written XML. ReleaseBuilder can also account for Portal artifacts that have been deleted from the source Portal, something that the XML Configuration Interface (XMLAccess) cannot do.

The use of ReleaseBuilder is the recommended "best practice" to synchronize changes between Portal environments.

Using ReleaseBuilder
The most common ReleaseBuilder problem is the attempt to create a release using XMLAccess exports from two different WebSphere Portal hosts. ReleaseBuilder is designed to generate a proper release only when run against two XML files exported from the same Portal environment. 

Running ReleaseBuilder against exports from two different Portal environments is not supported. Doing so may not cause an error immediately but the procedure has not been tested, and may lead to unexpected results such as data becoming out of sync, potential system downtime or data loss.

The typical ReleaseBuilder process flow to deploy a release from a staging server to a production server is usually similar to the steps listed below. The steps apply to virtual portals as well as the "base" Portal server configuration.

Note: These instructions do not apply if you are using syndication to update content between Portal version 8 servers. See Updates using ReleaseBuilder [http://www-10.lotus.com/ldd/portalwiki.nsf/xpDocViewer.xsp?lookupName=IBM+WebSphere+Portal+8+Product+Documentation#action=openDocument&res_title=Updates_using_ReleaseBuilder_wp8&content=pdcontent].

1. Install the target (production) Portal environment and then empty it of content using the ConfigEngine task empty-portal.

2. Prepare the production system to receive future releases by importing an XMLAccess export taken from the staging Portal generated using ExportRelease.xml. Use XMLAccess to create an export of staging using ExportRelease.xml as the input file and import the resulting output file to the production Portal. 

Note that ExportRelease.xml must be used to generate the export files for use by ReleaseBuilder. No other xml file should be used, including Export.xml.


 * 


3. Save the export generated in Step 2 above to use as a baseline file for ReleaseBuilder. 

4. Make changes to the staging portal over time. 

5. When it is necessary to generate a release, take a new export from the staging portal using ExportRelease.xml. 
 * 
 * ExportRelease.xml
 * 
 * ExportRelease.xml
 * 
 * <WP_Root>/doc/xml-samples.


6. Run ReleaseBuilder against the XML files taken in Steps 2 and 5 to generate a release. 
 * 

 * 
 * 
 * 

 * 
 * 
 * 

 * 
 * -inOld
 * 
 * -inNew
 * 

 * 
 * outputfile.xml
 * 


7. Import outputfile.xml to the target Portal using XMLAccess to update the target production Portal. 
 * 


After Step 7 is completed, the production Portal should contain the changes made to the staging server. 

Once a Portal begins to receive releases generated by ReleaseBuilder, it is important that the target Portal (the system to which the releases are imported) no longer be modified manually, or modified by importing an XMLAccess export taken from a third Portal environment. 

Updating the target manually will cause the target to become out of sync with the Portal from which releases are generated. Similarly, importing XML configuration files from another Portal, one that is neither the staging or production system (whether these imports are "difference" or diff files created using ReleaseBuilder or not), can generate different unique identifiers (object IDs). This can lead to unexpected results. 

Customizations 
By definition, a staging server does not capture user-defined customizations (for example, pages that are owned by a and visible only to individual users). ReleaseBuilder is designed to create a release by generating an XML file that contains the changes made to the pages and other Portal artifacts over time, not to capture user-defined additions to a source Portal that may have been created during Testing or QA. 

This means that exports taken using ExportRelease.xml specifically exclude customizations made on the staging or source Portal and releases generated will not include these data. If you must transfer customizations made on the source server to another environment the only option is to use the standard XMLAccess export and import process. 

For additional information, refer to the WebSphere Portal Information Center pages below. 

A detailed description of staging scenarios can be found in the developerWorks article, " IBM WebSphere Portal Version 6.0 staging scenarios using ReleaseBuilder [http://www.ibm.com/developerworks/websphere/library/techarticles/0712_kubik/0712_kubik.html]." The article applies to all versions of WebSphere Portal in which ReleaseBuilder is available. 

Custom scripts 
Use cases in which custom scripting code examines the XML input files must not rely on existence of elements that may be common to both files. If data element is required (for example a web application URL) retrieve it from the input files, do not depend on a particular output in the difference XML. RELATED INFORMATION
 About ReleaseBuilder [http://publib.boulder.ibm.com/infocenter/wpdoc/v6r1/index.jsp?topic=/com.ibm.wp.ent.doc_v615/admin/dep_rbabout.html]


 


Cross reference information Segment Product Component Platform Version Edition Organizational Productivity- Portals & Collaboration WebSphere Portal End of Support Products Not Applicable AIX, HP-UX, IBM i, Linux, Solaris, Windows, z/OS 7.0, 6.1, 6.0