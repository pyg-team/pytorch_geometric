Title: IBM Learning more about Connection Pooling (J2C) - United States

Text:
LearningMoreDocument TECHNOTE (TROUBLESHOOTING)

PROBLEM(ABSTRACT)
 Learning more about connection pooling (J2C) is the first step in the troubleshooting process. This document provides you with educational information that can help you learn more about this topic. 

RESOLVING THE PROBLEM
 

TAB NAVIGATION
 * Learn more- selected tab,
 * Troubleshoot [http://www.ibm.com/support/docview.wss?uid=swg21247168]
 * Collect data [http://www.ibm.com/support/docview.wss?uid=swg21254645]


Getting background information on Connection Pooling and J2C  * What is connection pooling?
   IBM® WebSphere® Application Server provides connection pooling for Java™ Database Connectivity (JDBC), Java Message Service (JMS), and Enterprise Information System (EIS) connections. The purpose of pooling connections is to improve performance by reducing the overhead involved in creating a new connection every time the application requests one. Connection pooling allows J2EE applications to reuse connections to databases and other backend systems for multiple requests. For further information on connection pooling refer to Connection pooling [http://www.ibm.com/support/knowledgecenter/SSAW57_9.0.0/com.ibm.websphere.nd.multiplatform.doc/ae/cdat_conpool.html] in the WebSphere Application Server Information Center.
   
   WebSphere Application Server V7.0 supports the Java EE Connector Architecture (JCA) 1.5 specification. WebSphere Application Server V8.0 and above support the JCA 1.6 specification.
   
   For JDBC connections, there is one connection pool for each data source that is created in WebSphere Application Server. Connection pools are configured in the WebSphere Application Server Administrative Console under Resources. For information on configuring JDBC connection pools, see Connection pool settings [http://www.ibm.com/support/knowledgecenter/SSAW57_9.0.0/com.ibm.websphere.nd.multiplatform.doc/ae/udat_conpoolset.html?pos=3]..
   
   
 * JMS Connection Pools
   WebSphere Application Server pools both JMS connections and JMS sessions. This is different from JDBC connection pooling in that there are two levels of pooling. A JMS application will call createQueueConnection() on a connection factory to get a JMS connection object from the connection pool and then call createQueueSession() on the connection to get a JMS session object from the session pool. Each connection has its own session pool. More details about how JMS connection pooling works can be found in the Explanation of connection pool and session pool settings for JMS connection factories [http://www-1.ibm.com/support/docview.wss?rs=180&uid=swg21201242] technote. For more information on configuring JMS connection pools, see Connection pool settings [http://www.ibm.com/support/knowledgecenter/SSAW57_9.0.0/com.ibm.websphere.nd.multiplatform.doc/ae/udat_conpoolset.html] and Session pool settings [http://www.ibm.com/support/knowledgecenter/SSAW57_9.0.0/com.ibm.websphere.nd.multiplatform.doc/ae/umj_sesspoolset.html]. [http://www-1.ibm.com/support/docview.wss?rs=180&context=SSEQTP&uid=swg21168924]
   
   
 * What are the best programming practices when using a connection pool?
   When using a connection pool, it is important to follow specific programming practices to make connection pooling work most efficiently and to prevent problems. One of the most important practices is to always call close() on a connection object as soon as the application finishes using it. This is necessary so that the connection can return to the free connection pool. Care should be taken to make sure connections are closed even in exception condition. Failing to close connections means that connections are leaked, reducing the number of connections available in the connection pool, and leading to ConnectionWaitTimeoutExceptions. For more information on this, you can become familiar with the connection life cycle [http://www.ibm.com/support/knowledgecenter/SSAW57_9.0.0/com.ibm.websphere.nd.multiplatform.doc/ae/cdat_conlifcyc.html].
   
   If a JDBC or JMS connection becomes invalid while it is in a connection pool, then a StaleConnectionException will occur when an application tries to use the connection. WebSphere Application Server will then discard its reference to the connection and purge the connection pool based on the Purge Policy setting. The best practice for dealing with stale connections is to handle them in the application by catching the StaleConnectionException and then retrying the connection (after the pool is purged). For more information about this, see the Demystifying the WebSphere StaleConnectionException [http://www.ibm.com/support/docview.wss?rs=180&uid=swg21063645] technote, and these two Knowledge Center articles on Stale Connections [http://www.ibm.com/support/knowledgecenter/en/SSAW57_9.0.0/com.ibm.websphere.nd.multiplatform.doc/ae/cdat_daexcp.html#daexcp__stale], and on how to handle the StaleConnectionException (Example: Handling data access exception - stale connection [http://www.ibm.com/support/knowledgecenter/en/SSAW57_9.0.0/com.ibm.websphere.nd.multiplatform.doc/ae/cdat_daexcp.html#daexcp__stalecon_exp]). [http://www-1.ibm.com/support/docview.wss?uid=swg21063645] Another option is to validate each connection to check for invalid connections. Both new and existing connections can be validated. Refer to the Configuring connection validation timeout [http://www.ibm.com/support/knowledgecenter/SSAW57_9.0.0/com.ibm.websphere.nd.multiplatform.doc/ae/tdat_connectimeout.html] article for configuration information.
   
   
 * Shareable vs. Unshareable Connections
   The JCA specification defines two different types of connections, shareable and unshareable. Shareable connections can be shared within a transaction if the connection properties are the same. When shareable connections are used, each time a connection to the same resource is allocated, a connection handle [http://www.ibm.com/support/knowledgecenter/SSAW57_9.0.0/com.ibm.websphere.nd.multiplatform.doc/ae/cdat_cconpconh.html] to the same physical connection is returned to the application. With unshareable connections, there is only one handle per physical connection. The default connection type is shareable for JDBC connections and unshareable for JMS connections. The default can be changed in the resource reference that is used to access the resource. A key point is that shareable connections are shared within the scope of a single transaction. Also, shareable connections are not returned to the free connection pool, even after the application calls close() on the connection, until the transaction is committed. This could cause unexpected consequences, which are listed in Default behavior of managed connections in WebSphere Application Server [http://www.ibm.com/developerworks/websphere/library/techarticles/0506_johnsen/0506_johnsen.html]. More information about shareable and unshareable connections can be found in Knowledge Center article Unshareable and shareable connections [http://www.ibm.com/support/knowledgecenter/SSAW57_9.0.0/com.ibm.websphere.nd.multiplatform.doc/ae/cdat_conshrnon.html].
   
   
 * J2C Authentication
   In WebSphere Application Server, J2C authentication aliases can be configured to hold the user ID and password that are used to connect to a backend resource. The authentication alias is then specified on the data source or connection factory in order to authenticate the user when establishing a connection. Most databases, messaging systems, and enterprise information systems require a user ID and password. A common cause of a connection problems is a problem with authentication.

 

Cross reference information Segment Product Component Platform Version Edition Application Servers Runtimes for Java Technology Java SDK