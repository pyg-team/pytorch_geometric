Title: IBM MustGather: WebSphere Application Server Community Edition hang or performance degradation problems on Windows - United States

Text:
mustgather; MustGather; Windows; hang; performance degradation; bad performance; HANG; ce; wasce; community edition; MustGatherDocument; WAS CE; WAS CE; WAS CE; WASCE; WASCE; WASCE; JBoss; JBoss; JBoss; Glassfish; Glassfish; Glassfish; App Server; App Server; WebSphere CE; WebSphere CE; WebSphere CE; WebSphere Community Edition; WebSphere Community Edition; WebSphere Community Edition; IBM CE; IBM CE; IBM CE; Open Source; Open Source; Open Source TECHNOTE (TROUBLESHOOTING)

PROBLEM(ABSTRACT)
 
MustGather for hang or performance degradation problems with WebSphere Application Server Community Edition on the Microsoft Windows platform. Gathering this information before calling IBM support will help familiarize you with the troubleshooting process and save you time 

RESOLVING THE PROBLEM
 

Should WebSphere Application Server Community Edition experience a perceived hang or performance problem on the Windows operating system, there are a number of diagnostics data files that are useful for diagnosing the problem. The information below will allow you to ensure that the required settings are in place to generate those data files.


Setup for hang/performance degradation data collection


1. Ensure javacore.txt generation is enabled

The Javacore (javadump) is a useful file to provide information about the general state of the Java runtime and the applications running on it. In order to ensure this is generated the relevant settings must be in place. Although they are set by default it is possible that the default setting has been changed so it is important to check that the correct settings are in place.

Check that the JVM is set to produce a javacore file when a user signal (SIGQUIT) occurs, by adding the following
command line option: 



java -Xdump:what 
which shows the options which are set, such as: 


dumpFn=doJavaDump events=gpf+user+abort filter= label=c:\sdk\jre\bin\javacore.%Y%m%d.%H%M%S.%pid.txt range=1..0 priority=10 request=exclusive 
The above values are the default settings. At least events=user must be in place to generate javadumps on a user signal. 
Options can be changed and/or set using the command line option: 

-Xdump:java[:=,...] 
So, for example, to set the ability to generate javadump files on user signals you would use: 

-Xdump:java:events=user 

2. Enable verbose GC logging 

Verbose GC logging gives an insight into the actions that the Garbage Collector is taking. This allows an application to be monitored and better tuned for performance, in addition to being vital for diagnosing problems. 

Verbose GC logging is not enabled by default, and can be done by one of the following ways. 

a) Enabling the generation of Verbose GC logging is done to direct the Verbose GC logging output to a single file using the following command line option: 

-Xverbosegclog:[DIR_PATH][FILE_NAME] 
where: 
[DIR_PATH] is the directory where the file should be written 
[FILE_NAME] is the name of the file to write the logging to 
For example, java -Xverbosegclog:C:\temp\verbose_output.xml 

b) The logging can also be done in a circular fashion to a series of files, this is carried out using the following command line option: 

-Xverbosegclog:[DIR_PATH][FILE_NAME],X,Y 
where: 
[DIR_PATH] is the directory where the file should be written 
[FILE_NAME] is the name of the file to write the logging to 
X is the number of files to write to 
Y is the number of GC cycles a file should contain 

The parameter needs to be set in the setenv.bat located under <WAS CE Installation Directory>/bin. 

Edit setenv.bat, locate "set JAVA_OPTS=" line and append the parameter to the existing list 
For example: 
set JAVA_OPTS=-Xms32m -Xmx256m -Xverbosegclog:C:\temp\verbose-ouput.xml 

MustGather Collection 

Having ensured that Windows is properly setup for MustGather collection, follow these steps to collect the data files: 

1. Take a snapshot of the network activity using the following command: 

netstat -an > netstat_before.out 
2. Generate three javacore.txt files, taken two minutes apart from the time of 100% CPU usage 

This can be done by one of the following:  * using Ctrl - Break in the server's console window 
 * using kill -3 command if MKS Toolkit is installed on Windows


3. Take a second snapshot of network activity: 

netstat -an > netstat_after.out 
4. Collect the verbose GC output 

5. Does the application require connection to a database server. If yes, what is the state of database server and network connectivity to the database server while the problem was experienced. Application server hang could be caused by database lock contention or network failure to the database server. 

6. Additional Information  * Recent changes to the server before the problem occurred 
 * Brief description of the applications running while problem occurred 
 * Collect general information of the server as discussed here [http://www-1.ibm.com/support/docview.wss?uid=swg21231419#generalMustGather]


These data files should then be submitted to IBM Support 

If you want to analyze the javacore files yourself, download the IBM Thread and Monitor Dump Analyzer for Java Technology [http://www.alphaworks.ibm.com/tech/jca]. It is useful for identifying deadlocks, contention, bottlenecks, and to summarize the state of threads within WebSphere Application Server Community Edition.