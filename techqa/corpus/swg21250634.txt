Title: IBM Timezone MST, EST, AGT changes in Java 1.4.2 v5 or greater will impact TWS, JSC, TDWC v8.3.0, v8.4.0 v8.5.0, v8.5.1 and v8.6. - United States

Text:
offset; change; tz; daylight; savings; dst; time; change TECHNOTE (TROUBLESHOOTING)

THIS DOCUMENT APPLIES ONLY TO THE FOLLOWING LANGUAGE VERSION(S):
 English 

PROBLEM(ABSTRACT)
 TimeZone changes for MST, EST, and AGT have been reported against Java 1.4.2 version 5 or greater level.

There is a major incompatibility issue in the recent Java service refreshes (1.4.2 SR5 or above; 5.0 SR1 or above) due to the reassignment of the three letter timezone IDs ("EST" and "MST") introduced into the standard Olson time zone table. 

As a result, applications (in this case Job Scheduling Console (JSC) 1.4 FP02 or Tivoli Workload Scheduler (TWS) and JSC v8.3 using "EST" or "MST" will start to get an incorrect timezone offset from Java APIs during the Daylight Saving Time period. 

If those are used, you should plan to change TWS object definitions to use the long time zone ID such as "America/New_York" or GMT based time zone ID such as "GMT-05:00".

From TWS v8.2.1 and higher, the long time zone ID has been implemented so it is strongly recommended to use these long time zones.

In addition, a previous bug in Java 1.4.2 version 5 removed the "AGT" timezone. AGT can now be accessed as America/Argentina/Buenos_Aires with TWS v8.3 and with America/Buenos_Aires with TWS v8.2.1. 

SYMPTOM
During the period of DST, the time returned by the API call is now incorrect by one hour. 


CAUSE
Java 1.4.2 sr5 or above program errors

RESOLVING THE PROBLEM
There are different configurations:


 JSC v1.4 FP02 and TWS v8.2.1 base code level or greater 

 

NOTE: This version of TWS is no longer supported without a support extension in place. If you have a support extension, the following recommendation is made: 

_________________________________________ 

You are strongly recommended to define the long timezone names for MST, EST,and AGT. 

If those are used, change TWS object definitions to use the long time zone ID such as "America/New_York" or GMT based time zone ID such as "GMT-05:00".

If this is not done during the Daylight Saving Time period, the JSC submission ad hoc with time-dependencies on these timezones could be incorrect of one hour. The same time gap could be observed in displaying jobs/jobstream that had these timezone from JSC if it is installed on OS with these timezones.

The AGT timezone is not recognized from JSC v1. 4 FP02. Customers should use America/Buenos_Aires.



 JSC 1.4 FP02 and TWS v8.2 or lower level 

NOTE: This version of TWS is no longer supported without a support extension in place. If you have a support extension, the following recommendation is made: 

_____________________________________ 

TWS v8.2 or lower level does not support long timezone names.
Upgrade TWS to a supported version of (v8.3, v8.4, or v8.5.x). Otherwise, jobs or jobstreams that are submitted during the DST period will have a time-gap of one hour. NOTE: As a workaround, you can issue these operations via the command line instead of using the JSC.

The same time gap could be observed in displaying jobs or jobstream that have these timezones from the JSC if it is installed on an OS with these timezones.

The AGT timezone is not recognized from JSC v1. 4 FP02.
If a customer defines it via composer, then the JSC will display jobs and jobstreams with this timezone and time dependencies with a warning message and the time will be set to the GMT timezone.


__________________________________ 

 

TWS v8.3, v8.4, v8.5.x and v8.6
JSC/TDWC v8.3 and v8.4 and higher 

On these newer releases, you are strongly recommended to use the long time zone names. 

 To understand if you are impacted: 

 


ï‚§ Use TWS composer command [https://publib.boulder.ibm.com/infocenter/tivihelp/v47r1/topic/com.ibm.tivoli.itws.doc_8.6.0.2/distr/src_ref/awsrgcompocom.htm]"extract" to dump the workstation and verify no EST /MST definition as timezone is present for your CPUS and jobstreams/jobs. 

Identify CPUs and Schedule/Jobs with EST definition and correct them. 


Then you can check the validity of DST plan before DST change. 


Run the forecast plan and then check the validity of the scheduling (starting 3 days in advance of DST date) for eg: 

planman crtfc dstfile -from 10/30/2014 -days -3 

planman crtfc dstfile1 -from 10/31/2014 -days -2 

planman crtfc dstfile2 -from 11/01/2014 -days 1 

 

If you use the "MST" or "EST" timezone, then TWS v8.3, v8.4, and v8.5 planner will incorrectly schedule jobs or jobstreams during the DST timeframe with a one hour offset for time-dependencies. 

The JSC v8.3 will incorrectly display or submit ad hoc job/jobstream with these timezone and time-dependencies if it is installed on an OS with these timezones. 

For the "AGT" that is not recognized from Java 1.4.2 sr5, the TWS v8.3, v8.4, v8.5.x, and v8.6 planner will default these jobs and jobstreams to the GMT timezone. 

NOTE: If you cannot use the "Long Time Zone names" as a workaround, you can perform this operation following the instructions published here: 
http://www.ibm.com/developerworks/java/jdk/dst/index.html [http://www.ibm.com/developerworks/java/jdk/dst/index.html]


To clarify steps needed in TWS to resolve the issue:

1. Install TWS v8.3 Fixpack04 (it includes JVM 1.4.2 sr8) on the MASTER or TWS v8.5 general availability (GA) version.

2. Stop TWS Application server:
<TWSHOME>/wastools/stopwas -user <was_user> -passwors <passwrod>

3.Create a backup copy of server.xml file locate under:
<TWSHOME>/appserver/profiles/twsprofile/config/cells/DefaultNode/nodes/DefaultNode\servers\server1

4. Edit server.xml file
- search for genericJvmArguments
- add the following parameter: -Dibm.dst.compatibility=true

You should see this:
genericJvmArguments="-Dibm.dst.compatibility=true"

5. Restart TWS Application server

6. Run ResetPlan -scratch to have TWS LTP re-calculated with this value.

7. If you cannot perform ResetPlan -scratch, use this solution:

a. Determine the StartOfDay value using optman ls 

b. Execute: 
optman chg sd=<same value that you got from optman ls>

c. At the next Jnextplan, the LTP will be automatically re-calculated and therefore jobstreams will be added to the Symphony with the correct time. 
NOTE: With this solution, incorrect jobstreams that have been carryforwarded from 
previous Symphony will still have incorrect value.

If the JSC still has an issue, you can also add the -Dibm.dst.compatibility=true parameter for the the JVM of the JSC Fixpak03 (uses JVM 1.4.2 sr8), JSC v8.3 Fixpack04 (uses JVM 1.4.2 SR09), or JSC v8.4 FP01. The following procedure can be used for these versions:

1. Create a backup copy of NTconsole.bat file located under:
<JSC_HOME>\bin\java\NTconsole.bat

2. Edit NTconsole.bat file
- search for /bin/javaw
- add the following parameter: -Dibm.dst.compatibility=true


Consider that the option -Dibm.dst.compatiblity=true is only implemented on IBM JDKs(AIX,Linux,Windows,Z/OS) and not on IBM Hybrid JDKs(Solaris,HP) as the respective JVM vendor has to implement it in their own JVMs. 


On the IBM Hybrid JDK, run the JTZU tool with BACKWARDCOMPATIBLITY=true in the target JVM bundled with TWS. 

 

For Java level of JSC and TDWC: 

 * The JSC v8.3 and v8.4 latest Fix Pack has Java 1.4.2 sr9.


 * The TDWC v8.4 and TDWC v8.5 has Java 1.5 sr8.


See the following link for TZ/DST included on these java levels: 


http://www.ibm.com/developerworks/java/jdk/dst/ [http://www.ibm.com/developerworks/java/jdk/dst/]


 

In addition, be aware of the information about DB2 component for DST.


 

PRODUCT ALIAS/SYNONYM
 Maestro
TWS
ITWS