Title: IBM The External Library Interface feature has been deprecated in Rational Rose RealTime - United States

Text:
generate; share; external; library; interface; rosert; realtime; 1117982 TECHNOTE (TROUBLESHOOTING)

PROBLEM(ABSTRACT)
 Product management has deprecated this feature due to known issues. This technote shows how to create a sharable external library interface without using the feature of the toolset and explains why the feature of the toolset should not be used. 

CAUSE
Product management has deprecated this feature due to known issues. 



The following defects have been identified on "External Library Interface" functionality.

 * RATLC00516739 RoseRT toolset vanishes when using the Build menu->Generate External Library Interface 
 * RATLC00210906 Unable to launch Build ->Generate External Library Interface due to missing file. 
 * RATLC00211889 External library interface is non-intuitive and confusing RATLC00212503 Generate Library Interface: Handler: OnSelectedContextMenuItemForObjects 
 * rose00051078 Exception when using Generate External Library 
 * rose00055645 External library interface - Codegen error, can't open shared LV package file 
 * rose00055674 External library interface - directory conflict in default use case. 
 * rose00057172 RoseRT freezes on "Lengthy Operation" using Generate Library Interface. 
 * rose00057175 Generate Library Interface: Sharing in two interfaces generated from the 
 * same model fails with GUID problems. 
 * RATLC00514621 Remove Library Interface Generation - QE 
 * RATLC00514622 Remove Library Interface Generation - Dev 
 * RATLC00514613 Remove Library Interface Generation - Doc 
 * RATLC00519358 Patch Request: Remove Library Interface Generation - Dev 
 * RATLC00519361 Patch Request: Remove Library Interface Generation - Doc 

It is useful to have an understanding of how the feature was implemented. 

During the publishing phase of the "Generate Library Interface" functionality the wizard prompts for the location of a new <<interface>> model, which is named after the <<C++ Library>> component. The name of the <<C++ Library>> component is also used by default as the name of the directory used for the build process. If the locations are in conflict, the wizard will destroy the previous build. 

Then, the feature starts a new background instance of Rose RealTime with a copy of the model and presents the user with a "Lengthy Operation" status bar. This activity may require a great deal of computer resources if the model is large. Copying the model also preserves the unique identifiers for all model elements which impacts how those model elements can be shared into client models. For example, a model element cannot be shared into a model containing an element with the same identifier. 

Then, within the background instance, a new logical view package is created to contain the interface elements. All elements in the logical view not referenced by the <<C++ Library>> component are deleted from the model. All elements referenced by the library with Private visibility are deleted. 

Then, if the visibility is set to limited public the following internal details are deleted: 

 * State machines for capsules, protocols and classes (if one exists). 
 * Protected and private operations for capsules and classes. 
 * Public operations code. 
 * Protected and private attributes for capsules and classes. 
 * Protected ports for capsules.


Note: In client models, there is no method to determine which interface elements were generated using Limited Public or Public visibility. Using an inheritance relationship with an interface element generated with limited public visibility has undefined problems. The resulting logical package is then saved as a control unit in a new location. 

A new component view package is created with a <<C++ External Library>> Component. This component references the logical view elements and is saved as a control unit in a new location. 

The intention is that these new package control units are shared into client models. The logical view package contains a copy of the elements from the supplier model and the component view contains a single <<C++ External Library>> component. The specification for the <<C++ External Library>> component must be carefully configured before hand in the <<C++ Library>> component specification to ensure proper settings result. 

"Limited Public" elements are available for use, but are not recommended for use in inheritance relationships. 

Public classes, protocols and capsules, are still in the same state as they were in the original model.



RESOLVING THE PROBLEM
A more robust and maintainable design and methodology can be achieved without using the "External Library Interface" feature. 

The recommendation is to design logical view packages containing only interface elements that can be used by client models. In other words, interface packages are designed such that they do not contain any of the implementation or realization. 

These packages are owned and maintained within developer (supplier) models. The implementation details that realize the interface are kept in control units that will not be shared into client models. 

Capsules in the interface packages should not have any internal structure or behavior. They can be used to define capsule roles in client models and 'realized' by capsules in the developer model through inheritance relationships. 

The interface package would also contain any protocols required and abstract classes such that they can be used without direct dependencies on the implementation. 

Elements in logical view interface packages should have no dependencies on any elements in other packages. The control units for interface packages can be delivered to clients anywhere, and shared into client models. 

It is also recommended that developers produce and maintain a component view interface to their libraries. For each <<C++ Library>> component in the model there should be a counterpart <<C++ External Library>> component in a Component view interface package. Developers can then test the library functionality using the same <<C++ External Library>> interface clients will use. 

Please note when sharing control units into new models, default properties may not be consistent between models and may change how the specification for a model element is interpreted by the toolset. It is best to explicitly override properties in elements in the supplier model where the value should not change between models. 








 

HISTORICAL NUMBER
 169998509