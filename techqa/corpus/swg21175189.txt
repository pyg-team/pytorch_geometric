Title: IBM Pass and verify a userid password pair from a JMS application using JNDI - United States

Text:
com.sun.jndi.fscontext.RefFSContextFactory; security exit mqminfo TECHNOTE (TROUBLESHOOTING)

PROBLEM(ABSTRACT)
 You are not using LDAP. You must pass a userid and password pair from a JMS client using JNDI to be validated by WebSphere MQ. 



SYMPTOM
The process for writing the server-side security exit [http://www.ibm.com/support/knowledgecenter/SSFKSJ_8.0.0/com.ibm.mq.dev.doc/q028010_.htm]is well documented in the online documentation for WebSphere MQ.. Unfortunately, there was less documentation available which shows how to write a security exit in Java in previous levels of WebSphere MQ. The more recent versions of the WebSphere MQ online documentation contain information on Creating a channel exit in WebSphere MQ classes for Java [http://www.ibm.com/support/knowledgecenter/SSFKSJ_8.0.0/com.ibm.mq.dev.doc/q031040_.htm]. The steps below were documented here for the versions of WebSphere MQ, previous to V7.0, to elaborate on the process of writing a security exit in Java. The steps below remain valid, but the new method is preferred for improved functionality and performance. Since it is still valid for current versions, this document can be used as an additional reference point. However, please refer to Creating a channel exit in WebSphere MQ classes for Java [http://www.ibm.com/support/knowledgecenter/SSFKSJ_8.0.0/com.ibm.mq.dev.doc/q031040_.htm] for the more up to date and preferred instructions. 


RESOLVING THE PROBLEM
Use a security exit program on both the client (QCF and TCF) and the server (SVRCONN) definitions. You will need two exits: 

 * A server-side security exit, written in C, which is associated with the SVRCONN channel used by the JMS application to talk to the MQ Server. 
 * A client-side security exit, written in Javaâ„¢, which is associated with the Connection Factory used by the JMS application.
   


Reminder: The steps below remain valid, but the new method is preferred for improved functionality and performance . Please refer to Creating a channel exit in WebSphere MQ classes for Java [http://www.ibm.com/support/knowledgecenter/SSFKSJ_8.0.0/com.ibm.mq.dev.doc/q031040_.htm] for the more up to date and preferred instructions.  

Old method for writing a security exit in Java: 

First, write a class which implements the MQSecurityExit interface. This class must implement a constructor (which takes a string as a parameter) and the securityExit method, which takes three parameters:


 * MQChannelExit securityExit - this contains information about the context in which the method is being invoked. 
 * MQChannelDefinition channelDefinition - details of the channel used to communicate with the queue manager. 
 * byte[] agentBuffer - this buffer holds the data which has been received from the server-side security exit. 
   
   



The first thing the method should do is to check the value of the exitReason variable in the securityExit object, which indicates why the security exit was called. If the exitReason is set to MQXR_INIT the security exit should copy the user name and password to the agentBuffer, and set the exitResponse variable to MQXCC_SEND_SEC_MESSAGE. This will direct MQ to forward the data in the buffer to the WebSphere MQ server.  * 


The server-side security exit should now validate the username password it has received, and can take two actions:  * Allow the client to continue by setting exitResponse to MQXCC_OK. 
 * Prevent the JMS application from connecting by setting exitResponse to MQXCC_SUPPRESS_FUNCTION. 
   


Regardless of the value of the exitResponse set by the server-side exit, the client-side security exit will now be called with the exitReason set to MQXR_TERM. The security exit should now perform any necessary shut-down processing. It does not need to worry about closing the connection with the queue manager as the WebSphere MQ server will do this if necessary. When it is finished cleaning up, the security exit should set the exitResponse variable to MQXCC_OK to indicate the security checks are finished.  

In order to use the security exit, the Connection Factory used by your JMS client must have: 

 * 
 * 


If you wish to pass a string to the security exit constructor, be sure to set: 

 * 
 * 
 * 


For further information refer to the WebSphere MQ Using Java manual [http://publibfp.boulder.ibm.com/epubs/pdf/csqzaw12.pdf] Chapter 5. Using the MQ JMS administration tool -> Administering JMS objects->Properties and specify a security exit built on both the client (sending) and the Server (receiving) channels. 


The samples attached to this item demonstrate the old method of using JMS with JNDI. 

svrauth.c [/support/docview.wss?uid=swg21175189&aid=2] [/support/docview.wss?uid=swg21175189&aid=1]MyMQExits.java [/support/docview.wss?uid=swg21175189&aid=4] [/support/docview.wss?uid=swg21175189&aid=3]JMSPutExitDriver.java [/support/docview.wss?uid=swg21175189&aid=6] [/support/docview.wss?uid=swg21175189&aid=5]

DISCLAIMER
All source code and/or binaries attached to this document are referred to here as "the Program". IBM is not providing program services of any kind for the Program. IBM is providing the Program on an "AS IS" basis without warranty of any kind. IBM WILL NOT BE LIABLE FOR ANY ACTUAL, DIRECT, SPECIAL, INCIDENTAL, OR INDIRECT DAMAGES OR FOR ANY ECONOMIC CONSEQUENTIAL DAMAGES (INCLUDING LOST PROFITS OR SAVINGS), EVEN IF IBM, OR ITS RESELLER, HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES. 

PRODUCT ALIAS/SYNONYM
 WMQ MQ