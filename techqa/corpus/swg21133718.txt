Title: IBM How do  I use the Precompiled Header Feature in Rose 98/C++ - United States

Text:
c; ++; cg; precompiled; header; feature; c++; 1133718 TECHNOTE (TROUBLESHOOTING)

PROBLEM(ABSTRACT)
 How do I use the Precompiled Header Feature in Rose 98/C++ 

RESOLVING THE PROBLEM
QUESTION:

How do I use the Precompiled Header Feature in Rose98 /C++

ANSWER:


The C++ precompiled header feature in Rose allows you to generate an automatic #include of a precompiled header file instead of header files it contains. There are four main steps to configuring your model to use the precompiled header feature.
Note: these steps do not work with Rose 98i

1) Specify the precompiled header file.
You specify the precompiled header file with the PrecompiledHeader property of the Component View subystem. This property is on the C++ tab of the specification dialog for the Component View. You need to set the property file name of the precompiled header, with extension. For instance, it might be stdafx.h if you are using MFC. Although other subsytems have this property, you only need to set it on the root subystem, Component View.

2) Model the header files to be replaced by the precompiled header.
You need to create a component for each header file which will be replaced by the precompiled header. Set the C++ FileName property of each component to the name of the file it represents, with extension. You can not leave this property set to AUTO GENERATE. You need to specify the file name, even if AUTO GENERATE would produce a file with the same name. Using the MFC example, the FileName property might be set to afxwin.h.

3) Model the precompiled header file.
You need to create a component to represent the precompiled header file. The name of the component is not important, but you need to set its FileName property to the same file name you specified in the PrecompiledHeader property. In the MFC example, you would set FileName to stdafx.h.
You also need to place the full paths of the files to be replaced in the IncludeClosure property of this component. This is how you let Rose know what files are part of the precompiled header. When Rose generates a #include because of a dependency on one of the files listed in the IncludeClosure property, it will know to generate a #include of the precompiled header instead of that header file. You must supply the complete path to the header files. In the MFC example, you might list "C:\Program Files\DevStudio\VC\mfc\include\afxwin.h". Each path should be on its own line.
Set this component's C++ property Generate to False, so Rose will not generate a source file for it.

4) Set the IncludePrecompiledHeader property to True on components which will #include it.
You need to create a component for each source file which will #include the precompiled header. These are the source files that would otherwise #include the header files within the precompiled header. Setting the C++ property IncludePrecompiledHeader of these components tells the code generator to check #includes in the source file for possible replacements with the precompiled header. In the MFC example, a component such as MyDialog might need to turn on this property to get a #include of stdafx.h instead of afxwin.h.

Example Steps:

1) Create two classes named "Clock" and "Second" in the Logical View.
2) Create an aggregation from Clock to Second, so that Clock will have a data member of type Second.
3) Create three component specifications named "Clock", "Second", and "Time" in the Component View.
4) Assign component Clock to class Clock and component Second to class Second.
5) Use the Tools: Options menu command and go to the C++ tab of the options dialog. Select Project from the Type list. Set the Directory property to a directory near the top of your drive. This is the directory where will Rose will generate our source code. In this example, we will use "C:\precomp\".
6) Open the specification dialog of Component View and go to the C++ tab. Set the PrecompiledHeader property to "Time.h".
7) Open the specification dialog of component Clock and go to the C++ tab. Set the FileName property to "Clock.h". Set the IncludePrecompiledHeader property to True.
8) Open the specification dialog of component Second and go to the C++ tab. Set the FileName property to "Second.h".
9) Open the specification dialog of component Time and go to the C++ tab. Set the IncludeClosure property to "C:\precomp\Second.h". This is a complete path to the file enclosed by this precompiled header. Set the Generate property to False. Set the FileName property to "Time.h".
10) Generate code for class Clock. Open file "C:\precomp\Clock.h" with a text editor. You will see that there is a #include of Time.h, and not of Second.h.

Note on IncludeOrder
The Rose 98 documentation on the P symbol's effect on the C++ component property IncludeOrder is not accurate. The symbol is supposed to determine where the #include of the precompiled header is generated in the component, but it is always generated in the same place. Also, it is not supposed to have an effect unless IncludePrecompiledHeader is set to True, but it does. If IncludePrecompiledHeader is set to False, and IncludeOrder contains the symbol P, the #include of the precompiled header will be generated, even though the documentation says it will not. Basically, it is not necessary to use the P symbol unless you also want to turn off other Rose generated #includes. If IncludeOrder contains P but not R, then only the #include of the precompiled header will be generated. See the online help for more information on the IncludeOrder property.

 

HISTORICAL NUMBER
 5990