Title: IBM How to use the WebSphere MQ Workflow Authentication Exit - United States

Text:
Jar files required Java Authentication Exit TECHNOTE (TROUBLESHOOTING)

PROBLEM(ABSTRACT)
 WebSphere MQ Workflow (WMQWF) provides an exit where customers can implement their own user authentication. This exit can be implemented either in C or in Java™ programming language. WMQWF client programs that want do exploit this authentication mechanism need to use a specific logon() API and provide the appropriate credentials that are required by the authentication exit implementation. In the past there was some confusion about the constraints and how to use the sample code shipped by WMQWF. 

The Java Authentication Exit requires several classes that must be available in the environment where the MQWF Administration Server is running. Users that implement a Java Authentication Exit need to understand which classes are required and how to build the jar file.

Users that implement a C Authentication Exit need to understand how to build the exit.

Users need to understand the restrictions what can be used in which environment for the shipped sample code that demonstrates the usage of the Authentication Exit. 

CAUSE
Customers that start by using the shipped samples need to know that the samples all consist of a client part and a server (implementation) part and that these parts cannot be mixed, i.e. you cannot run the Java client sample against the C implementation and vice versa. You also cannot run the client code of Java sample 1 against the Java implementation of sample 2. This is because the implementation makes some assumptions about the credentials structure that need to match between the client and the server part.

RESOLVING THE PROBLEM
Authentication Exit constraints that you should know 

An Authentication Exit client program can be coded in any programming language supported by WMQWF. It must use the logon() API with the credentials signature and these must adhere to the conventions imposed by the Authentication Exit server implementation. 

As a Java web application the Web Client requires a Java implementation of the Authentication Exit client. The BasicAuthenticationHandler sample as part of the Web Client sample code demonstrates Basic HTTP authentication. This client sample correlates with the implementation sample provided in smp/java/authexit/sample2. If your Authentication Exit implements a different algorithm, you need to write your own matching command handler. 

A different Java sample demonstrating authentication based on X509 certificates is provided in smp/java/authexit/sample1. This directory contains the client code as well as the implementation. 

On z/OS Java is not supported for the Authentication Exit implementation. You need to code the implementation in C language. For a sample implementation that connects to RACF® see sample SFMCSRCV(FMCHSAXR). 


How to build a Java Authentication Exit implementation 

The authentication exit examples are shipped as part of the product CD. All shipped authentication source code is provided with the Java Authentication Exit examples in the smp/java/authexit subdirectory of the WMQWF installation directory. 

In former releases, the binary version of some Authentication Exit classes like AuthenticationConstants was shipped in multiple jar files. This was confusing because it was not clear what to set in the CLASSPATH. 

This has changed with version 3.6. The jar files shipped with WMQWF no longer contain classes that are required for the implementation of a Java Authentication Exit. Only Java source code is shipped and you have to build a dedicated jar file containing all classes that are needed by the implementation. 

Users who want to implement a Java Authentication Exit need to copy all required Java source code (including their own exit implementation) to a specific directory structure com/ibm/workflow/java/exit and create a single binary file fmcaexit.jar. This file has to be added to the Administration Server's CLASSPATH. In addition the MQWF Java API implementation file fmcjapi.jar has also to be set in the server's CLASSPATH. 

This is described in <MQWFDir>/smp/java/authexit/sample1/ReadMe.txt. 

Customers that have an already existing Java Authentication Exit and are now upgrading to MQWF version 3.6 will have to modify their Authentication jar file if they use the AuthenticationConstants class. 

In order to add this class to the jar file 

 * In an empty working directory, create a directory structure com/ibm/workflow/java/exit
   mkdir /com/ibm/workflow/java/exit
   
 * Copy the file <MQWFDir>/SMP/java/authexit/AuthenticationConstants.java to the directory structure com/ibm/workflow/java/exit
   copy <WMQWFDir>/SMP/java/authexit/AuthenticationConstants.java 
   /com/ibm/workflow/java/exit
   
 * Compile the file with the command:

javac -classpath <MQWFDir>/bin/fmcjapi.jar 
com/ibm/workflow/java/exit/AuthenticationConstants.java
 * Add the AuthenticationConstants file to your jar file with the command:

jar -uvf fmcaexit.jar com 

Installing an Authentication Exit See the Programming Guide for more information on how to configure a C or a Java Authentication Exit. 

When the startup of the Administration Server with an Authentication Exit fails, and you cannot figure out the root cause from the error message, a good practice is, to retry the server start with tracing enabled. Usually the trace file provides more specific information what is going wrong.

 

PRODUCT ALIAS/SYNONYM
 MQWF WF