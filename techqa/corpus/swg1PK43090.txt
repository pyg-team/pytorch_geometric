Title: IBM PK43090: DETECTING AND RECOVERING DEADLOCK DURING THREAD SUSPENSION - United States

Text:
 SUBSCRIBE
You can track all active APARs for this component.



APAR STATUS
 * CLOSED AS PROGRAM ERROR.
    
   
   

ERROR DESCRIPTION
 *  Error Message: 1.4.2 JVM Garbage Collector (GC) on SLES9, RHEL4
   and MCP4 (and above) in multiprocessor systems. This hang can be
   seen in other JVM components like DG also.
   The new implementation of pthread_cond_timedwait() has a call to
   calloc() and the GC threads went into this hangs because one of
   the suspended application thread holding the calloc lock (In
   this case the thread which is in fork() holding this lock). All
   other GC threads are waiting for this hung GC threads
   notification.
   Stack Trace: Hanging thread:
   ---------------
   #3  0x00000000 in ?? ()
   #4  0x4010e08e in __lll_mutex_lock_wait () at lowlevellock.S:57
   #5  0x400ae4d5 in _L_mutex_lock_6034 () from /lib/tls/libc.so.6
   #6  0x403e2a9c in sysThreadIsInterrupted (tid=0x30,
   clear_interrupted=1073901944)
       at /userlvl/cxia32142/src/hpi/pfm/threads_md.c:2478
   #7  0x400adff2 in __libc_calloc () from /lib/tls/libc.so.6
   #8  0x40027178 in __pthread_cond_timedwait_2_0 () from
   /lib/tls/libpthread.so.0
   #9  0x403d56e1 in condvarWait (self=0x43b00ca0,
   mutex=0x42710c00, millis=1)
       at /userlvl/cxia32142/src/hpi/pfm/condvar_md.c:147
   #10 0x403dacab in sysMonitorWait (self=0x43b00ca0,
   mid=0x42710c00, millis=1)
       at /userlvl/cxia32142/src/hpi/pfm/monitor_md.c:628
   #11 0x402ca01a in parallelMark (ee=0x43b00ac4, s=0x42704b00,
   traceRefs=FALSE)
       at
   /home/vinalla/cxia32142-20070118/src/jvm/sov/st/msc/gc_mark.c:22
   28
   #12 0x402dbabc in gc0_locked (ee=0x43b00ac4,
   free_space_goal=524, clear_soft_refs=FALSE, target_heap=64)
   This is the main GC thread hung for a system level lock held by
   a suspended application thread
   ==========================================================
   GC Helper thread:
   -----------------
   #0  0xffffe410 in ?? ()
   #1  0x426cdda8 in ?? ()
   #2  0x00000002 in ?? ()
   #3  0x00000000 in ?? ()
   #4  0x400290ee in __lll_mutex_lock_wait () at lowlevellock.S:57
   #5  0x40025eae in _L_mutex_lock_29 () from
   /lib/tls/libpthread.so.0
   #6  0x00000001 in ?? ()
   #7  0x00000002 in ?? ()
   #8  0x04000000 in ?? ()
   #9  0x42704658 in ?? ()
   #10 0x426cdec8 in ?? ()
   #11 0x00000216 in ?? ()
   #12 0x42710c00 in ?? ()
   #13 0xffffffff in ?? ()
   #14 0x0000002d in ?? ()
   #15 0x426cdec8 in ?? ()
   #16 0x403da79c in sysMonitorEnter (self=0x42710c00,
   mid=0x42710c00) at
   /userlvl/cxia32142/src/hpi/pfm/monitor_md.c:429
   #17 0x403da79c in sysMonitorEnter (self=0x42704658,
   mid=0x42710c00) at
   /userlvl/cxia32142/src/hpi/pfm/monitor_md.c:429
   #18 0x402c6f2d in localPublish (ee=0x4270447c, s=0x42708b00,
   n=48)
       at
   /home/vinalla/cxia32142-20070118/src/jvm/sov/st/msc/gc_mark.c:96
   1
   #19 0x402c9649 in fastLocalMark (ee=0x4270447c, s=0x42708b00)
       at
   /home/vinalla/cxia32142-20070118/src/jvm/sov/st/msc/gc_mark.c:18
   11
   #20 0x402c9e27 in parallelMark (ee=0x4270447c, s=0x42708b00,
   traceRefs=FALSE)
       at
   /home/vinalla/cxia32142-20070118/src/jvm/sov/st/msc/gc_mark.c:21
   20
   #21 0x402ca2b9 in parallelMarkHelper (ee=0x4270447c, n=0)
       at
   /home/vinalla/cxia32142-20070118/src/jvm/sov/st/msc/gc_mark.c:23
   16
   #22 0x402c0641 in gcHelper (arg=0x1006b858) at
   /userlvl/cxia32142/src/jvm/sov/st/msc/gc_helpers.c:282
   #23 0x40339f7a in xmExecuteThread (args=0x402c0470) at
   /userlvl/cxia32142/src/jvm/sov/xm/thr.c:1706
   #24 0x4033281a in threadStart (args=0x42702628) at
   /userlvl/cxia32142/src/jvm/pfm/xe/common/xe_thread_md.c:114
   #25 0x403e0433 in _start (tid_=0x42704658) at
   /userlvl/cxia32142/src/hpi/pfm/threads_md.c:638
   #26 0x40024be3 in start_thread () from /lib/tls/libpthread.so.0
   #27 0x4010234a in clone () from /lib/tls/libc.so.6
   This thread is waiting for Main GC thread's notification
   ==========================================================
   Application thread holding the system level lock:
   -------------------------------------------------
   #3  0x00000008 in ?? ()
   #4  0x400707b5 in *__GI___sigsuspend () from /lib/tls/libc.so.6
   #5  0x403e41cd in _hpiThreadHardSuspend (self=0x427c12a0,
   sc=0x4377e6bc) at
   /userlvl/cxia32142/src/hpi/pfm/threads_md.c:3341
   #6  0x403d702b in srSignalCommonHandler (self=0x427c12a0,
   sig=12, info=0x4377e628, uc=0x4377e6a8, sc=0x4377e6bc)
       at /userlvl/cxia32142/src/hpi/pfm/hpi_signal_md.c:138
   #7  0x403d72c8 in signalSigactionAdapter (sig=12,
   info=0x4377e628, uc=0x4377e6a8)
       at /userlvl/cxia32142/src/hpi/pfm/hpi_signal_md.c:321
   #8  <signal handler called>
   #9  0xffffe410 in ?? ()
   #10 0x4377ea54 in ?? ()
   #11 0x00000000 in ?? ()
   #12 0x00000000 in ?? ()
   #13 0x400d17b9 in __libc_fork () from /lib/tls/libc.so.6
   #14 0x4002b1b4 in __fork () from /lib/tls/libpthread.so.0
   #15 0x424cee05 in Java_java_lang_UNIXProcess_forkAndExec () from
   /root/javahang/testcase/sdk/jre/bin/libjava.so
   #16 0x42ee03d2 in ?? ()
   #17 0x427c10c4 in ?? ()
   #18 0x43780c8c in ?? ()
   .
   This Hang will not even generate javacore on kill -3 so
   attaching GDB is a good idea to get the threads information.
   
   
    
   
   

LOCAL FIX
 *  1) JVM workaround: ?Xgcthreads1
   Note: above workaround may create performabce issues if the heap
   usage and size is more.
   2) export LD_ASSUME_KERNEL=2.4.19
   No side effects for this workaround.
   
   
    
   
   

PROBLEM SUMMARY
 *  ****************************************************************
   * USERS AFFECTED: IBM WebSphere Application Server version     *
   *                 6.0.2 users                                  *
   ****************************************************************
   * PROBLEM DESCRIPTION: Detecting and recovering deadlock       *
   *                      during thread suspension                *
   ****************************************************************
   * RECOMMENDATION:                                              *
   ****************************************************************
   The implementation of pthread_cond_timedwait() in
   SLES9/RHEL4/MCP4 has a call to calloc().
   Garbage Collection thread hung because,it needs to execute
   pthread_cond_timedwait() and one of the suspended application
   threads is holding the calloc lock (Example: one suspended
   application thread is executing fork() in which it is holding
   malloc lock). All other Garbage Collection helper threads are
   waiting for this hung thread's notification.
   
   
    
   
   

PROBLEM CONCLUSION
 *  This defect will be fixed in:
   
   1.4.2 SR9 (Linux)
   
   .
   
   JVM suspension code has been changed to detect this deadlock and
   
   
   
   recover from the same.
   
   .
   
   To obtain the fix:
   
   Install build 20070421 or later
   
   
    
   
   

TEMPORARY FIX

COMMENTS

APAR INFORMATION
 * APAR NUMBER
   PK43090
   
   
 * REPORTED COMPONENT NAME
   WEBSPH APP SERV
   
   
 * REPORTED COMPONENT ID
   5724J0800
   
   
 * REPORTED RELEASE
   60I
   
   
 * STATUS
   CLOSED PER
   
   
 * PE
   NoPE
   
   
 * HIPER
   NoHIPER
   
   
 * SPECIAL ATTENTION
   NoSpecatt
   
   
 * SUBMITTED DATE
   2007-04-11
   
   
 * CLOSED DATE
   2007-04-26
   
   
 * LAST MODIFIED DATE
   2007-04-26
   
   

 * APAR IS SYSROUTED FROM ONE OR MORE OF THE FOLLOWING:
    PK42965
   
   
 * APAR IS SYSROUTED TO ONE OR MORE OF THE FOLLOWING:
   
   
   

MODULES/MACROS
 *  SDK
   
   
    
   
   

FIX INFORMATION
 * FIXED COMPONENT NAME
   WEBSPH APP SERV
   
   
 * FIXED COMPONENT ID
   5724J0800
   
   

APPLICABLE COMPONENT LEVELS
 * R60I PSY
   UP