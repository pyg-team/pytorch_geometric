Title: IBM FileNet Component Integrator does not close RMI layer threads causing excessive threads when calling theVWSession - United States

Text:
Component Integrator RMI layer threads VWSession TECHNOTE (TROUBLESHOOTING)

PROBLEM(ABSTRACT)
 IBM FileNet Compoment Integrator does not close RMI layer threads, causing excessive threading when calling the VWSession 

SYMPTOM
In IBM FileNet P8 Component Integrator 4.0.3, threads created by the Listener and Worker threads that are related to the RMI layer are not being closed because of the calling of VWSession.


CAUSE
A new Java ORB was created for each outgoing request, resulting in multiple instances of ORBs getting created and staying on as long as the request was serviced. Having multiple ORBs in a single JVM is a highly discouraged practice because each ORB instance spawns a number of internal support data structures which add to the memory footprint of the application.

DIAGNOSING THE PROBLEM
The Java heap dump reflects Listener threads in a "runable" state and Worker threads in a "waiting" state. Excerpt from Java heap dump as follows: 

Listener Threads are in Runnable state, with Java Stack :at 
java.net.PlainSocketImpl.socketAccept(Native Method) at 
java.net.PlainSocketImpl.accept(PlainSocketImpl.java:417) 
at java.net.ServerSocket.implAccept(ServerSocket.java:471) 
at java.net.ServerSocket.accept(ServerSocket.java:442) 
at com.ibm.rmi.transport.ListenerThread.run(ListenerThread.java:177) 

Worker threads, Waiting on condition 
Java Stack: at java.lang.Object.wait(Native Method) 
at com.ibm.rmi.iiop.WorkerThread.getWork(ThreadPoolImpl.java:256) 
at com.ibm.rmi.iiop.WorkerThread.run(ThreadPoolImpl.java:200) 
at java.lang.Thread.run(Thread.java:571)


RESOLVING THE PROBLEM
 

The ORB is pooled so it will start with a minimum number and grow up to maximum number, at which point they will be re-used. Each ORB (Sun, IBM, JacORB) behaves slightly differently in how they deal with connections. The IBM ORB can multiplex different threads on the same connection or can have different connections for the same client to the same server. When the IBM FileNet Process Engine API is being deployed in WebSphere, only the single ORB should be used, since a JNDI look-up has to be done for that ORB. It was observed that starting up and shutting down ORBs is costlier than reusing them from the pool, which will decrease the performance and increase memory usage in longevity tests. 

To resolve this issue, the JVM system properties min and max: 

filenet.pe.peorb.pool.min 
filenet.pe.peorb.pool.max 

need to be limited. If not, the number of ORBs will grow. And with IBM ORB, no ORB destroy calls should be made. The recommendation is to set the system parameters on the Component Manager JRE parameters to be:

-Dfilenet.pe.peorb.pool.max=5. 

This will help the spawning of ORBs.