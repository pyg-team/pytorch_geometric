Title: IBM Loading documents into Content Manager OnDemand server results in an "Unable to allocate enough memory" error - United States

Text:
 TECHNOTE (TROUBLESHOOTING)

PROBLEM(ABSTRACT)
 Loading documents into IBM® Content Manager OnDemand server results in an "Unable to allocate enough memory" error. 

SYMPTOM
Using the arsload command to load a large document results in the following similar error: 

arsload -h ARCHIVE -u userid -p password -nvf -g "test-large-tiff" inputFile
arsload: Processing file >inputFile<

arsload: 02/09/10 14:34:07 -- Loading started, 442073904 bytes to process
Unable to allocate enough memory. File=arslacif.c, Line=711
Unable to read from offset 0 for length 442073904 from the file: inputFile.out
Loaded 0 rows into the database
arsload: 02/09/10 14:34:07 Loading failed
arsload: Processing failed for file >inputFile<
arsload: Processing has stopped. The remaining files will NOT be processed.


CAUSE
Content Manager OnDemand must store each document and its related index information into memory to process, segment, and compress document data before loading into storage.

The arsload command is either not able to allocate sufficient memory to compress the document in memory or the number of indexes generated is too many to contain in memory. This can indicate an exhaustion of available memory on the system or a limit being imposed on the user process. 

For large documents that are being compressed, the amount of memory needed is approximately twice the size of the original document plus some memory reserved for the actual arsload and arsadmin program. Content Manager OnDemand server is a 64-bit application in V8.4 and later on Unix® platforms, so memory allocations are no longer limited to a 32-bit address space. On Windows®, Content Manager OnDemand server is a 64-bit application in V8.5.0 and later, while previous versions on Windows are still a 32-bit application and thus limited to the 2GB address space imposed by Windows. 

Care should also be taken when choosing indexing parameters. The field parameters defined for indexing should contain unique values that allow the indexer to break the input file into logical documents based on index values an end user would search against. One common mistake is to use only a date value for indexing. Since date values tend not to change within an input file, a single large logical document will created. 

For documents with too many indexes, OnDemand keeps all index values in memory while segmenting document data into storage objects. A storage object by default is configured in the application group to have a maximum size of 10MB. If you have defined indexing parameters in the application in such a manner that would index an unnecessary and unuseful amount of index information, memory may be exhausted before the document can be segmented into a storage object. Index parameters should be designed with the mindset of the end user and how the document will need to be identified for retrieval. Excess index information will hurt performance and waste storage. Further information on designing your application, application group, and folder to fit your business needs can be found in the Related information section.


RESOLVING THE PROBLEM
To resolve a problem related to a large document being loaded:


 * On Unix systems, increase the data seg size, memory size, and virtual memory under the ulimit of the user account running arsload. 
 * Break the input file into smaller individual documents. Either by:  * Physically breaking the input file into smaller files and loading each file individually. 
    * Changing your index parameters, so smaller logical documents will be created based on your index information. 
    * If using ACIF, enable Large Object support in the application.
   
   


To resolve a problem related to too many indexes: 
 * Reduce the amount of indexing information captured by re-evaluating your indexing parameters.

RELATED INFORMATION
 Loading files greater than 4 GB into OnDemand [http://www.ibm.com/support/docview.wss?rs=0&uid=swg21170676]
Designing a solution for perf and user satisfaction [http://www.ibm.com/developerworks/data/library/techarticle/0205hann/0205hann.html]