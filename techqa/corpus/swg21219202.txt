Title: IBM How is the ECB heap size distributed by CCCTIN in z/TPF? - United States

Text:
memory allocation; NBR Heap; CCCTIN; available lists; heap storage; Keypoint A; CTKA; heap storage; AVL1; ECB heap allocation; ECB heap TECHNOTE (TROUBLESHOOTING)

PROBLEM(ABSTRACT)
 The heap storage in z/TPF is carved into different fixed buffer sizes (AVL1 to AVL5). AVL1 to AVL4 have a fixed buffer size. AVL5 is stated to be more than 4 KB in size. Is the heap storage for AVL5 allocated from the AVL1 to AVL4 buffer size? For example, if we require heap storage of 5 KB, how will ECB heap allocation be carved out? 

RESOLVING THE PROBLEM
Here are explanations of what the 31-bit ECB heap looks like when it is carved out by CCCTIN and how this is used by the ECB heap service routines: 
There are several important values that you can modify that exist in Keypoint A that are used by CCCTIN when setting up the initial 31-bit ECB heap allocation. 


 * First, you must determine the size of the buffers on each of the first four available lists (parameters HAVSZ1, HAVSZ2, HAVSZ3, and HAVSZ4). Any ECB heap requests for buffers greater than the size for those on AVL4 will be filled from the variable-sized available list (AVL5)
   
 * Second, you must determine how many buffers you want to place on each of the first four available lists (parameters HAVL1, HAVL2, HAVL3, and HAVL4)
   
 * Lastly, using the values that were just established for the size and number of buffers on each available list, you must determine the total number of 4-KB units that should be reserved for the total size of the 31-bit preallocated ECB heap (parameter PEH). The following formula is used to determine the minimum size of the PEH: 


PEH >= ( (HAVL1 * HAVSZ1) + (HAVL2 * HAVSZ2) + (HAVL3 * HAVSZ3) + (HAVL4 * HAVSZ4) ) / 4096 

If the size of the PEH is greater than this minimum value, the remaining amount of storage is placed as a single buffer on AVL5. 

To illustrate, let us assume the following settings: 

HAVL1 = 64 buffers, HAVL2 = 16 buffers, HAVL3 = 16 buffers, 
HAVL4 = 4 buffers 

HAVSZ1 = 64 bytes, HAVSZ2 = 256 bytes, HAVSZ3 = 1024 bytes, 
HAVSZ4 = 4096 bytes 
PEH = 14 4-KB units ( = 56 KB) 

Using the above formula, the total amount of storage required for the initial allocation of buffers on AVL1 - AVL4 is 40 KB. However, because the total value of PEH is 56 KB, this leaves 16 KB remaining. This 16 KB is placed on AVL5 as a single buffer. 

When an application requests 31-bit ECB heap storage with a size that is less than or equal to the size of buffers on AVL4 (parameter HAVSZ4) (which in this example is 4096), an attempt will be made to fulfill the request from one of the available lists that leaves the least amount of extra storage. Any allocation request that is greater than HAVSZ4 will be fulfilled from the AVL5 list. Once again, an example might clarify. 

Assume the same initial heap allocation settings as above. If an application requests 562 bytes of storage, we will attempt to fill this request with a buffer from AVL3. We could not use AVL1 because the requested buffer size is greater than the size of the buffers on that list (562 > 64). Likewise, AVL2 cannot be used (562 > 256). Additionally, using buffers from AVL4 is undesirable because it would leave a greater number of unused bytes than would the buffers on AVL3. Therefore, AVL3 is chosen. 

In another instance, if an application requests 5 KB of storage, the ECB heap service routine will recognize that this is greater than HAVSZ4 and will attempt to fill the request from AVL5. Servicing of AVL5 is slightly different than the other four lists. The ECB heap service routine will check to see if there is a buffer on AVL5 that is equal to or greater than the requested size. If there is, it will remove it from the list. If the chosen buffer is greater than the requested size, the service routine will see if the difference between the buffer size and the requested size is greater than HAVSZ4. If it is, this buffer will be split into two, with the remaining bytes of the buffer being placed back on AVL5 as available for use. If the buffer cannot be split, the entire buffer will remain intact. If there is no storage available on AVL5 to satisfy the requested amount of storage, a new 1-MB frame will be obtained to dynamically back additional virtual storage in the 31-bit ECB heap. After obtaining the 1-MB frame, the AVL5 allocation logic continues as stated above. RELATED INFORMATION
#TPF Family Libraries [http://www.ibm.com/software/htp/tpf/pubs/tpfpubs.htm ]