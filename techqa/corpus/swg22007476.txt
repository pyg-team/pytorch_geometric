Title: IBM Initial indexing is slower than expected when LQE is running on a virtualized Microsoft Windows server - United States

Text:
lqe; mapped; performance; slow; indexing; Jena; direct; IO; hardware; disk; NAS; SAN; netapp; throughput; kernel TECHNOTE (TROUBLESHOOTING)

PROBLEM(ABSTRACT)
 Initial LQE indexing can be slower than expected due to a problem with memory mapped IO on virtualized Microsoft Windows server environments. 

SYMPTOM
Testing shows that LQE indexing can run at the rate of ~1 million resources per day when running on ideal hardware as described in Best Practices for Configuring LQE for Performance and Scalability [https://jazz.net/wiki/bin/view/Deployment/LifecycleQueryEngineBestPractices]. 

It has been observed in some cases that initial indexing is much slower. 


CAUSE
LQE uses Memory Mapped IO mode for accessing the Jena index by default. This is desirable as caching the Jena index in memory results in much faster query performance. 

After some investigation, it has been determined that the following code is running slower than expected. The java.nio.MappedByteBuffer.force0 method relies on native operating system methods to flush data to the disk. These methods are typically very fast, however on Microsoft Windows/VMWare have been proven to be a bottleneck. 



Thread Name: lqe.BatchWriter[TRS 2.0 for DNG Resources]-thread-0:

at java/nio/MappedByteBuffer.force0(Native Method) 
at java/nio/MappedByteBuffer.force(MappedByteBuffer.java:216(Compiled Code)) 
at com/hp/hpl/jena/tdb/base/file/BlockAccessMapped.flushDirtySegments(BlockAccessMapped.java:247(Compiled Code)) 
at com/hp/hpl/jena/tdb/base/file/BlockAccessMapped.force(BlockAccessMapped.java:269(Compiled Code)) 
at com/hp/hpl/jena/tdb/base/file/BlockAccessMapped.sync(BlockAccessMapped.java:138(Compiled Code)) 
at com/hp/hpl/jena/tdb/base/block/BlockMgrFileAccess.syncForce(BlockMgrFileAccess.java:131(Compiled Code)) 
at com/hp/hpl/jena/tdb/base/block/BlockMgrWrapper.syncForce(BlockMgrWrapper.java:114(Compiled Code)) 
at com/hp/hpl/jena/tdb/transaction/JournalControl.replay(JournalControl.java:265(Compiled Code)) 
at com/hp/hpl/jena/tdb/transaction/JournalControl.replay(JournalControl.java:226(Compiled Code)) 
at com/hp/hpl/jena/tdb/transaction/TransactionManager.writerCommitsWorker(TransactionManager.java:494(Compiled Code)) 



ENVIRONMENT
Windows/VMWare



RESOLVING THE PROBLEM
A JVM argument is available in LQE 6.0.3 iFix006 and 6.0.4 through Add a hook to force Jena to direct mode (418787) [https://jazz.net/jazz/resource/itemName/com.ibm.team.workitem.WorkItem/418787] to switch Jena to use Direct-access mode that avoids use of the method found to be the bottleneck. 

While enabling this argument should increase the throughput of the initial indexing, it is highly recommended to switch back to memory mapped mode once the initial indexing has completed in order to take advantage of faster query performance. 

 

To enable direct-access mode for Jena, add the JVM argument -Dlqe.jena.direct.mode to the server and set its value to true 


For Tomcat or WebSphere Liberty, the argument can be applied by adding the following line in the JVM arguments section in the startup script. 

 

set JAVA_OPTS=%JAVA_OPTS% -Dlqe.jena.direct.mode=true



To set the JVM parameter on WebSphere Application Server, refer to technote 1417365 [http://www-01.ibm.com/support/docview.wss?uid=swg21417365].

Note: The server must be restarted after making the change in order for the change to take effect.

Once the initial LQE indexing has completed, remove the property and restart the server when possible.