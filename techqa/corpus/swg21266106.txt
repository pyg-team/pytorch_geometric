Title: IBM Documentation errata for IBM XL C/C++ Advanced Edition for Linux, V9.0 - United States

Text:
manualXlcpp90linux; 1266106 PREVENTIVE SERVICE PLANNING

ABSTRACT
 This page contains corrections and additions to the product documentation shipped with IBM XL C/C++ Advanced Edition for Linux, V9.0 

CONTENT
Installation Guide
The following correction applies to the IBM XL C/C++ Advanced Edition for Linux, V9.0 Installation Guide:

Viewing the PDF document
----------------------------------
The following text:

After default installation, the PDF documentation can be found in the /opt/ibmcmp/vacpp/9.0/doc/$LANG/pdf/ directory. For non-default installations, the PDF documentation is located in the $target_dir/vacpp/9.0/doc/$LANG/pdf/ directory, where target_dir is the target directory for installation specified by the -b option of the non-default installation script.

should read:

After default installation, the PDF documentation can be found in the /opt/ibmcmp/vacpp/9.0/doc/$LANG/pdf/ directory. For non-default installations, the PDF documentation is located in the installation_path/vacpp/9.0/doc/$LANG/pdf/ directory. 

Compiler Reference
The following corrections and additions apply to the IBM XL C/C++ Advanced Edition for Linux, V9.0 Compiler Reference:

-qfloat

-qfloat=fltint | nofltint option
The following new information is added:

If -qarch is set to a processor that has an instruction to convert from floating point to integer, that instruction will be used regardless of the [no]fltint setting. This conversion also applies to all PowerPC processors in 64-bit mode.

-qinfo=private suboption
In the syntax diagram the suboption -qinfo=private has no affect when specified and should be removed. Instead, use the -qreport option to report compiler-driven automatic parallelization cases; user parallelization cases are not reported.

-qlanglvl

-qlanglvl=[no]FileScopeConstExternLinkage option
The following -qlanglvl option is added: 

[no]FileScopeConstExternLinkage
Controls whether the file scope of constant variables have internal or external linkage when the static or extern keyword is not specified.

When -qlanglvl=fileScopeConstExternLinkage is in effect, all file scope constant variables are marked as externally visible. Otherwise, all file scope constant variables are marked as static.

Default: nofileScopeConstExternLinkage

-Q, -qinline 

Specifying -Q (or -qnoinline) disables all inlining, including that performed by the high-level optimizer with the -qipa option, and functions declared explicitly as inline.

should read:

Specifying -Q! (or -qnoinline) disables all inlining, including that performed by the high-level optimizer with the -qipa option, and functions declared explicitly as inline.

#pragma stream_unroll

Examples

Should read:

The following example shows how #pragma stream_unroll can increase performance. 

int i, m, n;
int a[1000];
int b[1000];
int c[1000];

....

#pragma stream_unroll(4)
for (i=0; i<n; i++) {
a[i] = b[i] * c[i];
}

The unroll factor of 4 reduces the number of iterations from n to n/4, as follows: 

m = n/4;

for (i=0; i<n/4; i++){
a[i] = b[i] + c[i];
a[i+m] = b[i+m] + c[i+m];
a[i+2*m] = b[i+2*m] + c[i+2*m];
a[i+3*m] = b[i+3*m] + c[i+3*m];
}

The increased number of read and store operations are distributed among a number of streams determined by the compiler, which reduces computation time and increase performance.

Programming Guide
The following corrections and additions apply to the IBM XL C/C++ Advanced Edition for Linux, V9.0 Programming Guide:

Under Parallelizing your programs, Shared and private variables in a parallel environment

The following text:

The compiler can privatize some shared variables if it is possible to do so without changing the semantics of the program. For example, if each loop iteration uses a unique value of a shared variable, that variable can be privatized. Privatized shared variables are reported by the -qinfo=private option. Use critical sections to synchronize access to all shared variables not listed in this report.

Should read:

The compiler can privatize some shared variables if it is possible to do so without changing the semantics of the program. For example, if each loop iteration uses a unique value of a shared variable, that variable can be privatized. Privatized shared variables are reported by the -qreport option. Use critical sections to synchronize access to all shared variables not listed in this report.

For information on how to list which shared variables are privatized by the compiler, see:
How to list privatized shared variables in an automatic parallel loop [http://www-01.ibm.com/support/docview.wss?uid=swg21326216]



RELATED INFORMATION
 README updates [http://www.ibm.com/support/docview.wss?uid=swg21259939]


 



Cross reference information Segment Product Component Platform Version Edition Software Development XL C/C++ for Linux Documentation Linux 9.0 Advanced