Title: IBM SDK, Java Technology Edition, Version 8 - United States

Text:
 NEWS

ABSTRACT
 IBM® SDK, Java™ Technology Edition, Version 8 is now available on AIX®, Linux, and z/OS® platforms. 

CONTENT

IBM SDK, Java Technology Edition, Version 8 is a new release that provides compatibility with Oracle Java SE version 8 class libraries, while exploiting the unique capabilities of IBM platforms to achieve performance and usability improvements. Follow these links to read about the highlights:


 * IBM z Systems exploitation 
 * General improvements to throughput and startup relative to IBM SDK, Java Technology Edition, Version 7 Release 1 
 * Improved graphics processor unit (GPU) support 
 * Improved tracing for the Object Request Broker (ORB) 
 * Autonomic connection management for the Object Request Broker (ORB) 
 * Java Native Interface (JNI) static linking 
 * New MBean for measuring and categorizing CPU usage of the Java virtual machine 
 * Reserving memory space for compressed references 
 * Advanced dump filtering on exception strings 
 * Improved performance for the Data Access Accelerator API


The documentation to support this release is available in IBM Knowledge Center [http://www.ibm.com/support/knowledgecenter/SSYKE2_8.0.0/welcome/welcome_javasdk_version.html]. To read more about the enhancements, follow these direct links for each platform-specific user guide or security guide: 

 * AIX User Guide
 * 
 * Linux User Guide
 * 
 * z/OS User Guide
 * 
 * Security Guide



For any late breaking news or supplementary information that is not included in the product documentation, see IBM SDK, Java Technology Edition, Version 8: Current news [http://www.ibm.com/support/docview.wss?uid=swg21672834]. 

To download the SDK for AIX or Linux, visit developerWorks: IBM developer kits [http://www.ibm.com/developerworks/java/jdk/index.html]. 
For z/OS systems, visit Java Standard Edition Products on z/OS [http://www.ibm.com/systems/z/os/zos/tools/java/]. 

Note: The IBM SDK and Java runtime environment for Windows are available only as part of an IBM product. 






The following enhancements and new features are available: 

IBM z Systems exploitation

This release exploits the new hardware features of the IBM z13 system, including Simultaneous Multi-Threading (SMT), Single Instruction Multiple Data (SIMD), Cryptographic function (CPACF), and new instruction sets. These features help provide improved performance for workload optimized runtimes, which delivers better application throughput without changes to application code. 


General improvements to throughput and startup relative to IBM SDK, Java Technology Edition, Version 7 Release 1

IBM SDK, Java Technology Edition, Version 8 includes incremental improvements to throughput on all platforms without changes to application code, reduced CPU consumption for JIT compilation, better JCA (cryptography) performance, and improved ORB (Object Request Broker) performance. 


Improved graphics processor unit (GPU) support

IBM SDK, Java Technology Edition, Version 7 Release 1 provides capabilities that allow certain functions to be processed on a GPU instead of a CPU, which can improve application performance. GPU support is enhanced with this release, adding new function that allows the Just-In-Time (JIT) compiler to offload specific parallel processing tasks to the GPU. This new capability exploits certain IBM POWER8™ systems with NVIDIA Compute Unified Device Architecture (CUDA) devices. 


Improved tracing for the Object Request Broker (ORB)

Component level tracing is now available to improve the debugging of ORB problems. A new system property can be set to generate trace information for one or more ORB components, such as DISPATCH or MARSHAL. 


Autonomic connection management for the Object Request Broker (ORB)

The ORB automatically manages the number of concurrent connections to the server endpoint, which can improve efficiency. If you want to retain control of these connections, you can turn off this feature by setting the system property com.ibm.CORBA.ConnectionMultiplicity. 


Java Native Interface (JNI) static linking

The JNI now enables runtime linking to static native libraries. 


New MBean for measuring and categorizing CPU usage of the Java virtual machine

A new MBean is available that monitors CPU consumption of the Java virtual machine and provides detailed accounting for analysis. You can discover the amount of CPU time that is used by system and application threads, with a further breakdown to show time that is spent on Garbage Collection and the JIT compilation processes. 


Reserving memory space for compressed references

A new option is available for securing space in memory for any native classes, monitors, and threads that are used by compressed references. Setting this option can help prevent OutOfMemoryError exceptions that might occur if the lowest 4 GB of address space becomes full. 


Advanced dump filtering on exception strings

A new -Xdump suboption is available that allows you to filter dump events to produce dumps only for exceptions that contain a specific text string in the exception detail message. This capability allows you to fine-tune the point at which a dump is produced, and reduce the time taken for problem diagnosis. 

 

Improved performance for the Data Access Accelerator API

IBM SDK, Java Technology Edition, Version 7 Release 1 introduced the Data Access Accelerator application programming interface, which allows a Java application program to manipulate data in byte arrays. In this release, further enhancements are made to the API, with measurable performance improvements. For more information, see Data Access Acceleration [http://www.ibm.com/support/knowledgecenter/SSYKE2_8.0.0/com.ibm.java.api.80.doc/com.ibm.dataaccess/index.html].

Go back to top








Oracle content 

The IBM implementation is based on Oracle FCS level 8 Update 31 Build 12. The SDK includes the following Oracle enhancements: 
 * Generalized Target-Type Inference JEP 101 [http://openjdk.java.net/jeps/101] 
 * Parallel Array Sorting JEP 103 [http://openjdk.java.net/jeps/103] 
 * Annotations on Java Types JEP 104 [http://openjdk.java.net/jeps/104] 
 * DocTree API JEP 105 [http://openjdk.java.net/jeps/105] 
 * Add Javadoc to javax.tools JEP 106 [http://openjdk.java.net/jeps/106] 
 * Bulk Data Operations for Collections JEP 107 [http://openjdk.java.net/jeps/107] 
 * Enhance Core Libraries with Lambda JEP 109 [http://openjdk.java.net/jeps/109] 
 * Charset improvements JEP 112 [http://openjdk.java.net/jeps/112] 
 * MS-SFU Kerberos 5 Extensions JEP 113 [http://openjdk.java.net/jeps/113] 
 * TLS Server name Indication (SNI) Extension JEP 114 [http://openjdk.java.net/jeps/114] 
 * AEAD Cipher Suites JEP 115 [http://openjdk.java.net/jeps/115] (Already available in earlier versions of the IBM SDK) 
 * Remove the Annotation-Processing Tool (apt) JEP 117 [http://openjdk.java.net/jeps/117] 
 * Access to Parameter Names at Runtime JEP 118 [http://openjdk.java.net/jeps/118] 
 * javax.lang.model Implementation Backed by Core Reflection JEP 119 [http://openjdk.java.net/jeps/119] 
 * Repeating Annotations JEP 120 [http://openjdk.java.net/jeps/120] 
 * Stronger Algorithm for Password-Based Encryption JEP 121 [http://openjdk.java.net/jeps/121] (Generating 2048-bit DSA and Diffie-Hellman public key pairs is already supported in earlier versions of the IBM SDK) 
 * Enhance the Certificate Revocation-Checking API JEP 124 [http://openjdk.java.net/jeps/124] 
 * Lambda Expressions & Virtual Extension Methods JEP 126 [http://openjdk.java.net/jeps/126] 
 * Improve Locale Data Packaging and Adopt Unicode CLDR Data JEP 127 [http://openjdk.java.net/jeps/127] 
 * BCP 47 Locale Matching JEP 128 [http://openjdk.java.net/jeps/128] 
 * NSA Cipher Suites JEP 129 [http://openjdk.java.net/jeps/129] (Already available in earlier versions of the IBM SDK) 
 * SHA-224 Message Digests JEP 130 [http://openjdk.java.net/jeps/130] (There is limited support of SHA224 algorithm in earlier versions of the IBM SDK) 
 * PKCS#11 Crypto Provider for 64-bit Windows JEP 131 [http://openjdk.java.net/jeps/131] 
 * Unicode 6.2 JEP 133 [http://openjdk.java.net/jeps/133] 
 * Base64 Encoding & Decoding JEP 135 [http://openjdk.java.net/jeps/135] 
 * Enhance javac to Improve Build Speed JEP 139 [http://openjdk.java.net/jeps/139] 
 * Limited doPrivileged JEP 140 [http://openjdk.java.net/jeps/140] 
 * Date & Time API JEP 150 [http://openjdk.java.net/jeps/150] 
 * Launch JavaFX Applications JEP 153 [http://openjdk.java.net/jeps/153] (Note: JavaFX is not supported by IBM SDK, Java Technology Edition, Version 8) 
 * Concurrency Updates JEP 155 [http://openjdk.java.net/jeps/155] 
 * Prepare for Modularization JEP 162 [http://openjdk.java.net/jeps/162] 
 * Leverage CPU Instructions for AES Cryptography JEP 164 [http://openjdk.java.net/jeps/164] 
 * JDBC 4.2 JEP 170 [http://openjdk.java.net/jeps/170] 
 * Fence Intrinsics JEP 171 [http://openjdk.java.net/jeps/171] 
 * DocLint JEP 172 [http://openjdk.java.net/jeps/172] 
 * Nashorn JavaScript Engine JEP 174 [http://openjdk.java.net/jeps/174] 
 * Mechanical Checking of Caller-Sensitive Methods JEP 176 [http://openjdk.java.net/jeps/176] 
 * Optimize java.text.DecimalFormat.format JEP 177 [http://openjdk.java.net/jeps/177] 
 * Statically Linked JNI Libraries JEP 178 [http://openjdk.java.net/jeps/178] 
 * Document JDK API Support and Stability JEP 179 [http://openjdk.java.net/jeps/179] 
 * Handle Frequent HashMap Collisions with Balanced Trees JEP 180 [http://openjdk.java.net/jeps/180] 
 * HTTP URL Permissions JEP 184 [http://openjdk.java.net/jeps/184] 
 * Restrict Fetching of External XML Resources JEP 185 [http://openjdk.java.net/jeps/185]

Go back to top