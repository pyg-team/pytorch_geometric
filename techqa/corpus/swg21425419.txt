Title: IBM The resource manager component of Content Manager for Enterprise Edition V8.4 (CM) crashes with an OutOfMemory error. - United States

Text:
javacore jvm out of memory jni -Xjni:arrayCacheMax=0 tsm TECHNOTE (TROUBLESHOOTING)

PROBLEM(ABSTRACT)
 During high volume stores or migrates into Tivoli Storage Manager (TSM) the resource manager java virtual machine will consume native memory until an OutOfMemory condition causes a crash. 

SYMPTOM
The native memory for the java virtual machine becomes exhausted. The most common messages in the javacore files produced will be a failure to initialize or start a thread: 

Dump Event "systhrow" (00040000) Detail "java/lang/OutOfMemoryError":"Failed to create a thread: retVal -1073741830, errno 11" received


No errors are reported in the resource manager log. A Tivoli Storage Manager client api trace will also show no error messages, however the observed object store transaction rate from the TSM api trace will be very high and likely in the sub-second range:

grep dsmEndSendObj tsmapitrc.log | more

tsmapitrc.log:02/09/10 20:16:12.008 [508014] : dsmsend.cpp (1938): dsmEndSendObjEx EXIT: rc = >0<.
tsmapitrc.log:02/09/10 20:16:12.129 [508014] : dsmsend.cpp (1938): dsmEndSendObjEx EXIT: rc = >0<.
tsmapitrc.log:02/09/10 20:16:12.269 [508014] : dsmsend.cpp (1938): dsmEndSendObjEx EXIT: rc = >0<.
tsmapitrc.log:02/09/10 20:16:12.404 [508014] : dsmsend.cpp (1938): dsmEndSendObjEx EXIT: rc = >0<.
tsmapitrc.log:02/09/10 20:16:12.588 [508014] : dsmsend.cpp (1938): dsmEndSendObjEx EXIT: rc = >0<.
tsmapitrc.log:02/09/10 20:16:12.784 [508014] : dsmsend.cpp (1938): dsmEndSendObjEx EXIT: rc = >0<.


CAUSE
The resource manager uses the java native interface (jni) to access the TSM client. For certain workloads the jni memory caching algorithm can cause a substantial increase in the native memory consumption of the jvm. This is not a memory leak but the inability of the jni caching algorithm to determine the correct amount of cache for this particular application and workload.



ENVIRONMENT
TSM import migrate



DIAGNOSING THE PROBLEM
1. Verify the OutofMemory messages in the javacore files and the high number of store or migrate operations to TSM. The following url provides assistance in locating and reading javacore files: 


Problem determination for javacore files from WebSphere Application Server [http://www.ibm.com/support/docview.wss?fdoc=aimwas&rs=180&uid=swg21181068]

2. Check that the java heap (non-native memory) still has free space available during the crash by reviewing the following section in the javacore file:

0SECTION MEMINFO subcomponent dump routine
NULL =================================
1STHEAPFREE Bytes of Heap Space Free: 15b5ea0 
1STHEAPALLOC Bytes of Heap Space Allocated: 10000000 

This example shows that the java heap still had 15b5ea0 bytes or about 22MB of free space available when the crash occurred. If the java heap was not exhausted during the out of memory crash, the likelihood is that the jvm ran out of native memory. 

3. Confirm that the jvm is not accumulating threads:

ps -moTHREAD -p "RM JVM PID"

Run this command once every hour via a script appending the output to a file. This script must continue to run for at least a few days. An increase in jvm native memory could be the result of an increase in the jvm's threads. Monitoring the jvm threads will determine whether they are the cause of the native memory increase or some other agent is causing the memory leak symptoms.

4. Monitor the native memory consumption of the resource manager jvm and confirm that the native memory is constantly growing.

svmon -m -P “RM JVM PID”


RESOLVING THE PROBLEM
For applications and workloads that generate a high transaction rate through the jvm jni interface and experience large native memory consumption leading to a jvm OutofMemory failure, the fix is to disable the jni cache array. The following jvm option may alleviate the leak symptoms: 

 
-Xjni:arrayCacheMax=0 

This jni option must be set for each resource manager using the websphere administrator’s console: 

Application servers > server1 > Process Definition > Java Virtual Machine 

The option must be placed in the "Generic JVM arguments" edit box and the resource managers recycled for the change to take effect. A possible side effect to disabling the jni array cache will be an increase in cpu utilization since the memory allocations that would have been avoided will now be performed by the application.

Please note that this jvm option is available for all service levels of java 1.6. It is also available for java 1.5 SR3 and later.