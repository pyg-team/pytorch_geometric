Title: IBM XMLAccess import fails with java.lang.ClassCastException - United States

Text:
oracle; XMLAccess; import; blob; classcastexception; ojdbc; incompatible; oracle.sql.BLOB; EJPPF0067E TECHNOTE (TROUBLESHOOTING)

PROBLEM(ABSTRACT)
 When transferring a complete configuration from a SOURCE system to a TARGET system, the XMLAccess import to the TARGET system may fail with Exception: java.lang.ClassCastException: oracle.sql.BLOB incompatible with oracle.sql.BLOB. This Technote will document how to diagnose and resolve this error message so the XMLAccess import completes successfully. 

SYMPTOM
The XMLAccess import will successfully run for a period of time. When the XMLAccess import begins processing an object which requires an oracle.sql.BLOB database object type, the XMLAccess export will quit and display the following error message: 

<message id="EJPPF0067E"> com.ibm.wps.pe.mgr.exceptions.DatastoreException:
EJPPF0067E: Installation of Web Module from WAR file ManageVirtualPortals.war failed.</message>
<message>java.sql.SQLException: Failed to load oracle.sql.BLOB class. Exception: java.lang.ClassCastException: oracle.sql.BLOB incompatible with oracle.sql.BLOB</message> 


Note: This examples show the Manage Virtual Portal portlet failing; other portlets which utilize the oracle.sql.BLOB object type could fail as well.


CAUSE
Duplicate copies of the database drivers exist on classpath and multiple copies are loaded by the classloader.


ENVIRONMENT
Observed with Oracle databases, though possible could occur with any supported database.



DIAGNOSING THE PROBLEM
Three sets of data should be collected to diagnose this issue: 

 

1) The wpconfig_dbtype.properties (Portal 6.0) OR wkplc_dbtype.properties file (Portal 6.1/7.0). 

2) A WebSphere Application Server Classloader Mustgather [http://www-01.ibm.com/support/docview.wss?uid=swg21196187]. 

3) A full file listing of the system where the Portal server resides: 

 * 
 * 
 * - *Nix: ls -laR / >> /tmp/filelisting.txt



RESOLVING THE PROBLEM
1) Review the properties file. Locate the line which notes the location of database drivers, such as: 

 * 
 * 
 *  
 * *Technical note: The true location of this property is in the variables.xml at the node scope, read during Portal startup. However, for purposes of this document, we will assume the properties file and variables.xml file at the node scope contain the same values. 
 * 


2) Review the traces collected. Locate lines which indicate oracle.sql.BLOB, such as: 

[datetime] 00000011 CompoundClass > loadClass oracle.sql.BLOB 
this=com.ibm.ws.classloader.ExtJarClassLoader@607a607a[PL][server:0] Entry 
[datetime] 00000011 SinglePathCla 3 adding cached zip file c:\IBM\dbdrivers\ojdbc6.jar 
[datetime] 00000011 CompoundClass 3 classoracle.sql.BLOB found incom.ibm.ws.classloader.SinglePathClassProvider@74e074e0 
[c:\IBM\dbdrivers\ojdbc6.jar] 

Observe there may be additional lines which indicate other locations the oracle jar files exist: 
[datetime] 00000011 CompoundClass 3 classoracle.sql.BLOB found incom.ibm.ws.classloader.SinglePathClassProvider@74e074e0 
[c:\IBM\AppServer\lib\ojdbc6.jar] 


Also helpful to review in the trace files is the classpath noted at the very top of the file, for example: 

************ Start Display Current Environment ************ 
Classpath = C:/IBM/WebSphere70Cluster/wp_profile/properties;C:\IBM\WebSphere70Cluster\AppServer/properties;C:\IBM\WebSphere70Cluster\AppServer/lib/startup.jar;C:\IBM\WebSphere70Cluster\AppServer/lib/bootstrap.jar;C:\IBM\WebSphere70Cluster\AppServer/lib/jsf-nls.jar;C:\IBM\WebSphere70Cluster\AppServer/lib/lmproxy.jar;C:\IBM\WebSphere70Cluster\AppServer/lib/urlprotocols.jar;C:\IBM\WebSphere70Cluster\AppServer/deploytool/itp/batchboot.jar;C:\IBM\WebSphere70Cluster\AppServer/deploytool/itp/batch2.jar;C:\IBM\WebSphere70Cluster\AppServer/java/lib/tools.jar;C:\IBM\WebSphere70Cluster\PortalServer/base/wp.script/lib/wp.wire.jar 
************* End Display Current Environment ************* 

3) Review the filelistings collected. 
- Verify the database driver file exists in the location specified in #1. 
- Locate any duplicate jar files may exist on the filesystem. Determine if these jar files are being loaded by the Portal classloader traces specified in #2. 
- Note: The ONLY jar file which should exist on the classpath is that which is noted by the dbtype.DbLibrary in #1 above. 

4) Remove duplicate jar files 
- Remove duplicate database jar files on the Portal classpath. Keep only a single copy of the jar file in the location as specified by the dbtype.DbLibrary property. 
- Note: It is recommended to only maintain a single copy of the database jar file on the Portal system. If multiple copies exist, even if only a single copy is on the Portal classpath, it is entirely possible to have a second or third copy of the jar file independently loaded and could cause conflicts. Symbolic links should not be used as substitutes, a single copy of the file should exist and resources updated accordingly to point to that single copy of the jar file. This is not always possible , but, recommended if the system can be reconfigured to use a single jar file. 

5) Retry the import 
- With the duplicate jar files removed, the import should now complete successfully. RELATED INFORMATION
 Classloader Mustgather [http://www.ibm.com/support/docview.wss?uid=swg21196187]
Transferring a complete configuration [http://www-10.lotus.com/ldd/portalwiki.nsf/dx/Working_with_the_XML_configuration_interface_wp7]


 



Cross reference information Segment Product Component Platform Version Edition Organizational Productivity- Portals & Collaboration WebSphere Portal End of Support Products XML Access/Release Builder AIX, HP-UX, IBM i, Linux, Solaris, Windows, z/OS 7.0, 6.1, 6.0