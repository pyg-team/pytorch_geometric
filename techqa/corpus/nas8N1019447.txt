Title: IBM Determining the Name of the ODBC Application - United States

Text:
 TECHNOTE (TROUBLESHOOTING)

PROBLEM(ABSTRACT)
 Prior to V6R1 there is no reliable method to determine the application that is using the database server job. 

RESOLVING THE PROBLEM
A common request is the ability to determine the name of the PC application that is using an operating system database server job. A related request is to prevent certain applications from connecting to the IBM® System i™ system. 

Prior to V6R1, there is no reliable method to determine the application that is using the database server job; for details on V6R1 the new functions added in V6R1 see the section below titled V6R1 - New Function. Furthermore, there is no reliable method to determine if the client is Client Access ODBC, Client Access OLEDB provider, Toolbox JDBC, Client Access data transfer, or some other API or program. System administrators that wish to use this information for security or management purposes must consider other methods. For additional information, refer to Rochester Support Center knowledgebase document N1018280, iSeries Access ODBC, JDBC, OLE DB, and .NET Security Issues. 

https://www-304.ibm.com/support/entdocview.wss?uid=nas8N1018280 [https://www-304.ibm.com/support/entdocview.wss?uid=nas8N1018280]

Note: The above page requires signing into the IBM Support Portal 

The database server exit programs do not currently provide information on the type of client (ODBC, JDBC, and so on) or on the application name. Some limited client information is sent to the server but is not exposed in an exit point. The name of the process making the connection is not transmitted to the server. This information can sometimes be inferred by the way a client uses the database server, but administrators should not rely on it. Implementation details are not documented and can be changed at any time without notice.

Some of the unreliable methods of determining the client include inferring an application name from the package name. The current version of Client Access ODBC happens to default to using extended dynamic and bases the default package name off of the first 6 letters of the application name. Note that users can override the package name that is used or even if packages are used in the ODBC datasource options. OLEDB and JDBC default to not using extended dynamic support.

The current versions of Client Access Data transfer happen to run SQL statements via the stream fetch code point and often use the NDB exit. This is an implementation choice and should not be relied on to identify a client as Data transfer. 

The following is an example of an exit program which can be registered on the exit points QIBM_QZDA_SQL1 or QIBM_QZDA_SQL2 and will take an action when an application attempts to create an extended dynamic package. Note that ODBC applications will attempt to do this when they first prepare a statement.

/********************************************************************/
/* */
/* OS/400 SERVERS - USER EXIT PROGRAM */
/* EXIT POINT QIBM_QZDA_SQL1 */
/* */
/* This program will check for the package create function. */
/* If the package being created matches one of the names we */
/* are looking for, then the job priority is changed. */
/* This program will compare the first 7 characters of the */
/* extended dynamic package name with values that set in */
/* the variables &MYPKGn below (where n is a number). Only */
/* the first seven characters are used because the last three */
/* are variable based on ODBC DSN settings. */
/* */
/********************************************************************/
PGM PARM(&STATUS &REQUEST)

/********************************************************************/
/* PROGRAM CALL PARAMETER DECLARES */
/********************************************************************/
DCL VAR(&STATUS) TYPE(*CHAR) LEN(1) /* ACCEPT OR REJECT */
DCL VAR(&REQUEST) TYPE(*CHAR) LEN(2000) /* PARAMETER STRUCTURE */

/********************************************************************/
/* PARAMETER DECLARATIONS */
/********************************************************************/

DCL VAR(&USER) TYPE(*CHAR) LEN(10) /* USER ID */
DCL VAR(&FNCID) TYPE(*CHAR) LEN(4) /* FUNCTION BEING PERFORMED */
DCL VAR(&EDPKG) TYPE(*CHAR) LEN(7) /* Name of E.D. package */
/* NOTE: We are only checking the first 7 letters of the package */
/* because the last three are variable by DSN properties. */
DCL VAR(&CRTPKG) TYPE(*CHAR) LEN(4) VALUE(X'0000180F')
DCL VAR(&MYPKG1) TYPE(*CHAR) LEN(7) VALUE('ODBCTE3')
DCL VAR(&MYPKG2) TYPE(*CHAR) LEN(7) VALUE('MSQRY32')
DCL VAR(&MYPKG3) TYPE(*CHAR) LEN(7) VALUE('MSACCES')

/********************************************************************/
/* EXTRACT THE VARIOUS PARAMETERS FROM THE STRUCTURE */
/********************************************************************/

/* HEADER */
CHGVAR VAR(&USER) VALUE(%SST(&REQUEST 1 10))
CHGVAR VAR(&FNCID) VALUE(%SST(&REQUEST 29 4))
CHGVAR VAR(&EDPKG) VALUE(%SST(&REQUEST 73 10))

/********************************************************************/
/* INITIALIZE VARIABLES */
/********************************************************************/

CHGVAR VAR(&STATUS) VALUE('1')

IF (&FNCID *EQ &CRTPKG) THEN(DO)
IF (&EDPKG *EQ &MYPKG1 *OR &EDPKG *EQ &MYPKG2) THEN(DO)
CHGJOB RUNPTY(10) /* Increase run priority for these apps */
SNDPGMMSG MSGID(CPF9898) MSGF(QSYS/QCPFMSG) +
MSGDTA('Run priority increased to 10 by +
exit program.')
ENDDO
IF (&EDPKG *EQ &MYPKG3) THEN(DO)
CHGJOB RUNPTY(30) /* Decrease run priority for these apps */
ENDDO
ENDDO

ENDPGM

V6R1 - New Function

Starting with V6R1, the IBM database clients and database host server have been updated to provide the name of the client interface to exit programs. They also set registers to allow the application name to be retrieved through SQL interfaces just as you might retrieve the SQL Path or current user registers. The QIBM_QZDA_INIT exit point added the following new fields to the information passed to exit programs: Interface type, Interface name, and Interface level. For ODBC connections, the V6R1 System i Access for Windows ODBC driver will report values of "ODBC", System i Access for Windows", and "06010000" for these fields, respectively. For details on the updated exit program parameters, see the IBM Systems Information Center for V6R1. The exit program parameters can be found by searching on QIBM_QZDA_INIT or by expanding the following sections in the navigation guide: "Connecting to System i", "System i Access", "System i Access for Windows", "Administration", "Host server administration", "Use server exit programs", "Exit program parameters", "Database server".

The V6R1 ODBC driver will also set the new register CURRENT CLIENT_APPLNAME to the registered application name of the application that loaded the ODBC driver. See the "System i DB2 for i5/OS SQL Reference Version 6 Release 1" manual for more details on this and other registers. The manual can be found in the IBM Systems Information Center for V6R1. This information can be retrieved from within the database server job itself by running an SQL query such as, "SELECT CURRENT CLIENT_APPLNAME FROM SYSIBM.SYSDUMMY1". This query must be run from within the same job to return correct results though because every job will have the register set to its own value. This query could be run from the client application itself or from an exit program for the database server other than the QIBM_QZDA_INIT exit point. The registers have not yet been set when the QIBM_QZDA_INIT exit program is called so the query would return an empty string if it were run at that time.




Cross reference information Segment Product Component Platform Version Edition Operating System IBM i 6.1 
HISTORICAL NUMBER
 24215047