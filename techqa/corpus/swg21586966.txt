Title: IBM How to connect to RES/RTS via https - United States

Text:
 TECHNOTE (TROUBLESHOOTING)

PROBLEM(ABSTRACT)
 When connecting from Rule Studio to Rule Team Server on WebSphere Application Server V7.0 over HTTPS, the connection fails. 

SYMPTOM
The connection to Rule Team Server fails from Rule Studio, but when accessing from a web browser, it is works with the same URL, user and password login.


CAUSE
The connection URL to Rule Team Server is over HTTPS. The server certificate is not added to the Eclipse JVM truststore

ENVIRONMENT
Rule Studio / Eclipse

RESOLVING THE PROBLEM
Solution 1: Add the server certificate to the Eclipse JVM truststore


 1. Get the server certificate:
    If you do not have direct access to the certificate stored on the server, you can obtain the server certificate from the client web browser. For details on how to export SSL certificate, see the vendor's documentation for each browser.
    For example, when browsing the Rule Team Server console over HTTPS from Internet Explorer, a Security Alert dialog box is displayed. Click View Certificate > Details tab > Copy to file, and then follow the steps in the Export wizard. This exports the certificate to a .cer file (DER encoded binary). 
 2. Import the server certificate into the Eclipse JVM truststore using the keytool -import command. For example,
    
    <JAVA_HOME>/jdk/bin/keytool.exe -import -file [PATH TO THE SERVER CERTIFICATE OBTAINED IN STEP 1] -alias [CERTIFICATE ALIAS] -keystore <JAVA_HOME>/jdk/jre/lib/security/cacerts 
    
    where <JAVA_HOME> points to the Eclipse JVM that you use to launch Eclipse (Rule Studio). 
 3. Verify that the key is added correctly using the keytool -list command. See the Java keytool documentation [http://docs.oracle.com/javase/1.5.0/docs/tooldocs/windows/keytool.html] for details. 
 4. Pass the trusted key to the Eclipse JVM using the javax.net.ssl.keyStore property. This property must point to the file location of the updated cacerts. For example, add this line to the script that starts Rule Studio:
    
    -Djavax.net.ssl.trustStore=<JAVA_HOME>\jdk\jre\lib\security\cacerts 


Solution 2: Configure a self signed certificate for the WebSphere Application Server server and use the ilog.rules.teamserver.allowSelfSignedCertificate property in Eclipse: 
 1.  Log into the WebSphere Application Server management console. 
 2.  Expand Security, and click SSL certificate and key management. 
 3.  Under Related Items, click Key stores and certificates. 
 4.  Click NodeDefaultKeyStore from your list of key stores and trust stores. 
 5.  Click Personal certificates under Additional Properties. 
 6.  Click Create > Self-signed certificate. 
 7.  Type the following values for the certificate:
     Alias
     Default self-signed
     Common name
     Server_IP_address 
 8.  Click OK and then click Save.
     
     Now that you have a self-signed personal certificate, the following steps configure the server to use it for inbound SSL connections: 
     
 9.  Click Security > SSL certificate and key management > Manage endpoint security configurations. 
 10. Click your node under the Inbound tree node in Local topology. 
 11. Under Related Items, click SSL configurations. 
 12. Click NodeDefaultSSLSettings. 
 13. Select your newly created self-signed certificate (default self-signed) as the default server certificate alias. 
 14. Click OK and then click Save. 
 15. Add in the following line to the vmarg of Eclipse:
     
     -Dilog.rules.teamserver.allowSelfSignedCertificate=true
     
     Refer to this document [http://publib.boulder.ibm.com/infocenter/brjrules/v7r1/index.jsp?topic=%2Fcom.ibm.websphere.ilog.jrules.doc%2FContent%2FBusiness_Rules%2FDocumentation%2F_pubskel%2FJRules%2Fps_JRules_Global645.html] for details
     

 

Cross reference information Segment Product Component Platform Version Edition Business Integration IBM Operational Decision Manager Modules:Rule Team Server Platform Independent 7.5, 7.5.0.1