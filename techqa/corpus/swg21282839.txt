Title: IBM Session management configuration may help HATS in memory-constrained environments - United States

Text:
hats memory http session object timeout override limit sessions out of leak V6 V7; 1282839 TECHNOTE (FAQ)

QUESTION
 If no HTTP session timeout is configured in WebSphere Application Server (WAS), and no limit on the number of in-memory sessions is configured, empty session objects might be left in WAS memory. To avoid this problem, configure session management changes in WebSphere Administrative Console. 

CAUSE
If no WAS HTTP Session timeout is set and no limit to the number of in-memory sessions is configured, HTTP Session objects remain in memory when users terminate their HATS session.

ANSWER
HATS uses WebSphere to create an HTTP Session object to match a user's requests to the HATS application instance created for that user. One very small object is placed within the HTTP Session object to detect any HTTP Session timeout that might occur. When the user's HATS application instance is disconnected (either by pressing the Disconnect button, by having disconnectOnClose=true and the browser is closed, or by HTTP Session inactivity timeout), the HATS application instance and resources associated with the user are cleaned up. The very small object placed within the HTTP Session object by HATS is also removed and freed from memory. However, due to the fact that other applications or processes might still be using the HTTP Session object, HATS does not attempt to destroy the HTTP Session object itself. 

If your server is extremely memory-constrained, however, you might encounter an out of memory error due to the number of empty HTTP Session objects left in memory. To avoid this problem, there are options you can modify in the WebSphere Administrative Console within the "Session management" window for the application server, ear file, or war file. To modify the options, follow the steps for the version of WebSphere Application Server you are using:

Version 6.0
In the WebSphere Administrative Console: 

 1. Expand Servers 
 2. Select Application servers 
 3. Click the name of the application server. The default application server name is server1. 
 4. In the next screen, expand Web Container Settings in the Container Settings section on the upper right. 
 5. Click Session management under the expanded Web Container Settings


Version 6.1 
In the WebSphere Administrative Console:  1. Expand Servers 
 2. Select Application servers 
 3. Click the name of the application server. The default application server name is server1. 
 4. In the next screen, click Session management in the Container Settings section on the upper right.


Version 7.0 
In the WebSphere Administrative Console:  1. Expand Servers 
 2. Expand Server Types 
 3. Select WebSphere application servers 
 4. Click the name of the application server. The default application server name is server1. 
 5. In the next screen, click Session management in the Container Settings section on the upper right.


These options, among others, are found on the next panel: 

Maximum in-memory session count: Limits the number of HTTP Session objects that can be in memory at the same time. 

Allow overflow: When disabled, unused sessions are discarded from memory when the maximum number of sessions is reached. 

Session timeout: Set this timeout to a reasonable value considering the usage patterns of your server's applications, including HATS applications. 

[/support/docview.wss?uid=swg21282839&amp;aid=1] 



In building a HATS application (or any other J2EE application), it is important to follow these two rules when writing your own code to use the HTTP Session objects for storing your own data objects: 
 1. Keep the size and number of objects stored in an HTTP Session object to an absolute minimum 
 2. Remove each object from the HTTP Session as soon as possible.


Note: The behavior and recommendations described above for HATS applications also 
applies to HATS Integration Objects, which use and clean up the HTTP Session object in the same manner. 

For more information on configuring WebSphere session management, see the WebSphere Application Server documentation at http://publib.boulder.ibm.com/infocenter/wasinfo/v6r1/index.jsp?topic=/com.ibm.websphere.nd.multiplatform.doc/info/ae/ae/uprs_rsession_manager.html [http://publib.boulder.ibm.com/infocenter/wasinfo/v6r1/index.jsp?topic=/com.ibm.websphere.nd.multiplatform.doc/info/ae/ae/uprs_rsession_manager.html] 
 



Cross reference information Segment Product Component Platform Version Edition Software Development Rational Host Access Transformation Services