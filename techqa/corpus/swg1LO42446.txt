Title: IBM LO42446: CLIENT CRASH API PROGRAM WHICH ADDS LNRICHTEXT ITEM AS THE BODY OF THE DOCUMENT, USING LNDOCUMENT::CREA - United States

Text:
 SUBSCRIBE
You can track all active APARs for this component.



APAR STATUS
 * CLOSED AS PERMANENT RESTRICTION.
    
   
   

ERROR DESCRIPTION
 *  Trying to export data to an NSF.  The code that does that using
   the C++ API (as
   part of a larger software package), and it seems to work
   correctly.
   
   One of our customers had a very large dataset (~20,000 emails).
   That s where
   the issue occurs . The sample CPP program is in the SPR.
   
   The test program is attached to the spr as the CPP fie.
   
   Compile and run the code .  I have  also included the complete
   project . The
   Exe is also included in the attachment database , which can be
   run as is .
   
   1) Unzip in c:. You should get a directory called
   C:\RichTextHandleLeak, which
   has 1) a debug directory, 2) a RichTextHandleLeak directory, 3)
   a .sln file, 4)
   a .suo file. In the directory
   (C:\RichTextHandleLeak\RichTextHandleLeak, you ll
   see the .cpp file that I sent you, along with the .ini and the
   template.nsf and
   a bunch of other stuff.
   2) Open a command prompt, and cd to
   c:\RichTextHandleLeak\debug
   3) Add the lotus path to your path.
   a. You can do this globally through Start->Control
   Panel->System->Advanced->Environment Variables (before #2),
   b. Or type
   set path=%path%;abcdefg
   But instead of abcdefg, put your path (e.g. c:\program
   files\IBM\Lotus\Notes)
   <- this should be the directory where nnotes.dll and other dlls
   are.
   4) Run the program by typing RichTextHandleLeak.exe. It doesn t
   need any
   command-line arguments. (If you are going to run through Visual
   Studio, you
   need to either set your path globally as in Step 3, or add it to
   the properties
   of the project   come to think of it, I did that, so you ll only
   need to modify
   it if your path is different from mine.)
   
   The program uses the notes.ini file in
   C:\RichTextHandleLeak\RichTextHandleLeak. It runs correctly on
   my machine with
   the given notes.ini file. If you have a different .ini file, you
   can just
   change mine to notes.ini.bak and copy yours to that directory.
   If you just want
   to copy your .ini file over, that should be fine, then you don t
   have to worry
   about any kind of configuration on my side. (Of course, if you
   have a fresh
   install of Notes, you should open the Notes client first, to
   have the .ini file
   add all kinds of good configuration options.)
   
   The program uses the template file in the same directory too.
   If you have a
   different template file, you can put it there (I don t know if
   this problem is
   template-specific or not, but I suspect not).
   
   When the program runs, it ll create a file called output.nsf in
   that same
   directory.  If you want to run the program more than once,
   you ll need to
   delete the output from the first time before you run it the
   second time.
   
   If you get everything to compile and want to put things in a
   different
   directory, there s a variable called PATH at the top of the cpp
   file that
   controls that, so you can just change that (be sure it ends with
   \\) and you
   should be set.
   
   Crash analysis
   The crash occurs fairly quickly   about a minute or so.
    Monitoring process in the Windows Task Manager, and it never
   got above 20 MB.
   
   This doesn t appear to be a Windows memory leak   the program
   seems to be
   leaking some kind of Notes internal handles.  If you look at the
   .log file
   attached to the spr , and search for BLK_CATALOG_NAME, you ll
   see that 10491 of
   them are allocated.  If you scroll up in that same file about 40
   lines, there s
   a section  Notes Memory -> Handle Table Info ::
   [RichTextHandleLeak: 025c]  In
   that section, it says  Num Handles = 10495, Max Handles = 10495,
   Avail = 0.  (I
   assume this second .zip got to you as well.   If not, please let
   me know and I
   ll try to upload it again.)
   
    A couple of other things on my side:
               Adding code to close the document and reopen it
   (close right before
   adding the Body, reopen, add the Body, save, then close).  This
   didn t change
   things at all.
              Adding  code to close the thread session, then dump.
   It still had
   the same amount of memory allocated.
   
   Reproducing it yourself
   In everything we do, we create a database from a template, never
   just a blank
   database.
   
   If you look at my sample program, the only thing creating an
   email with a rich
   text body.  The rich text body is important for the problem   if
   we switch to
   plain text, the problem goes away.  But there are no
   attachments, no embedded
   images or OLE objects, no hotspots or anything like that.  And
   the text of the
   rich text body is fairly short in the example I gave you ( This
   is a test  or
   something like that), so we re not hitting the 40K or 64K
   limit.
   
   If you create a program that does the following, I d expect the
   same problem:
               Init the session.
   Create a database from the template.
   Do 20,000 times:
               Create a new document in the database
               Create an LNRichText item, and set its value to some
   string
               Add the LNRichText item as the body of the document,
   using
   LNDocument::CreateItem
               Save the document and close it
   
   Note: In the  sample program, we are creating  documents and
   LNRichText items
   from scratch, not copying them from an existing database.  I
   believe that
   copying them works correctly without this problem .
   
   I purposely didn t handle exceptions in the demo program, so
   when the problem
   occurs, it ll crash and NSD will generate a crash dump.  If you
   catch
   exceptions, you ll get:
               0x000001a2   Maximum number of memory segments that
   Notes can
   support has been exceeded
   If you catch the exception and keep going, you ll get that same
   exception every
   single time through the loop after about 10,500.
   
   
    
   
   

LOCAL FIX
 *  Refer to the problem code area in the cpp file attached :
   ==============================================================
   
   void AddDocument(LNDatabase &db) {
     LNDocument doc;
     CHECK(db.CreateDocument(&doc));
   
     LNRichText itemTxt;
   
     CHECK(itemTxt.SetValue("This is a test"));
   
     // This is the line that leaks the memory handle
     // It appears to be of type BLK_CATALOG_NAME
     // If you change itemTxt to LNText instead of LNRichText,
   there is no leak
   
     CHECK(doc.CreateItem("Body", itemTxt,
   LNITEMFLAGS_AUTO_SUMMARY));
   
     CHECK(doc.Save(LNNOTESAVEFLAGS_NO_REVISION_HISTORY));
   
     CHECK(doc.Close());
   
   ===================================================
   
   
   Change this to CHECK(doc.CreateItem("Body", &itemTxt,
   LNITEMFLAGS_AUTO_SUMMARY));
   
   and then set Value  , instead of setting value first and then
   adding to
   document.
   
   That is :
   CHECK(doc.CreateItem("Body", &itemTxt,
   LNITEMFLAGS_AUTO_SUMMARY));
   CHECK(itemTxt.SetValue("This is a test"));
   
   It seems that by modifying the reference (which is already
   attached to the doc
   handle), allows the core to associate memory handles to the note
   - making it
   easy to close them when the note is closed. Otherwise, in the
   original code,
   we'll create several free standing handles which may not be
   getting garbage
   collected properly
   
   
    
   
   

PROBLEM SUMMARY
 *  A programming error was found but will not be corrected. It
    will be a permanent restriction.
   
   
    
   
   

PROBLEM CONCLUSION
 *  A programming error was found but will not be corrected. It
    will be a permanent restriction.
   
   
    
   
   

TEMPORARY FIX

COMMENTS
 *  This APAR is associated with SPR# AKUR7TZK28.
   
   
    
   
   

APAR INFORMATION
 * APAR NUMBER
   LO42446
   
   
 * REPORTED COMPONENT NAME
   NOTES CLIENT
   
   
 * REPORTED COMPONENT ID
   5724E6255
   
   
 * REPORTED RELEASE
   850
   
   
 * STATUS
   CLOSED PRS
   
   
 * PE
   NoPE
   
   
 * HIPER
   NoHIPER
   
   
 * SPECIAL ATTENTION
   NoSpecatt
   
   
 * SUBMITTED DATE
   2009-07-16
   
   
 * CLOSED DATE
   2010-03-17
   
   
 * LAST MODIFIED DATE
   2010-03-17
   
   

 * APAR IS SYSROUTED FROM ONE OR MORE OF THE FOLLOWING:
   
   
   
 * APAR IS SYSROUTED TO ONE OR MORE OF THE FOLLOWING:
   
   
   

MODULES/MACROS
 *  NA
   
   
    
   
   

FIX INFORMATION

APPLICABLE COMPONENT LEVELS