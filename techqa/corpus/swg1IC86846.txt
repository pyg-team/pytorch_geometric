Title: IBM IC86846: WEBSPHERE MQ V6 OPENVMS EXPERIENCED LOSS OF PERSISTENT MESSAGES AFTER SYSTEM CRASH. - United States

Text:
  A FIX IS AVAILABLE
WebSphere MQ 6.0 for HP OpenVMS Alpha and Itanium - Fix Pack 6.0.2.12 [http://www-01.ibm.com/support/docview.wss?uid=swg24035627]


SUBSCRIBE
You can track all active APARs for this component.



APAR STATUS
 * CLOSED AS PROGRAM ERROR.
    
   
   

ERROR DESCRIPTION
 *  WebSphere MQ V6.0 on OpenVMS users experience some missing
   persistent messages from the queue after the system is recovered
   from a crash.
   
   A WMQ application puts messages to MQ server through client
   connection channel with persistent option then system crashes.
   After restart, WMQ messages were lost without any error
   messages.
   
   
    
   
   

LOCAL FIX

PROBLEM SUMMARY
 *  Problem Summary:
   WMQ-V6.0 on OpenVMS: Users are likely to experience some missing
   persistent messages from the queue after the system is recovered
   from the crash.
   .
   Error Description:
   When persistent messages are put by several application threads,
   each message body is first written to the Queue file. The next
   task by each corresponding  thread is to maintain consistent
   message chain as and when a new message is added to the queue
   file. For maintaining this, there is a field called "next record
   link". This field as part of the message header contains the
   value for file offset where the next message starts. In this
   context when a new message is added, its file offset value
   embedded in the immediate previous message header is changed fro
   END OF CHAIN (EOC) to the file position of the current message.
   In this way consistency of the message chain is maintained in th
   queue files as and when a new message is added to the queue by
   various applications.
   .
   In this context as reported, this second part of the operation
   changing the "next record link" is not immediately written to
   the queue file on the disk. The diagnostic information confirm
   that write request has been issued from MQ. However there is a
   delay in writing to the disk due to I/O buffering mechanism.This
   situation is likely  to occur for some of the messages in the
   chain, even though their message body exists in the queue file.
   .
   After certain persistent operations to the queue manager objects
   checkpoints are going to be triggered. The checkpointing will
   ensure both Queue files updates and log files updates are insync
   with each other. However in this context, flushing out for  I/O
   buffers from one process (check point process ) will ensure its
   own updates are physically written to the disk. However updates
   containing changes to the "Next Record Link" made by the agents
   are not written actually to the disk. So, after the crash while
   starting the Qmgr, when messages are loaded in to the memory, MQ
   falls back to  the first message with EOC  value in the "Next
   Record Link" and stops retrieving remaining messages from the
   queue file.  So the message chain is incomplete as per the
   records available in the queue file after the crash and restart.
   
   
    
   
   

PROBLEM CONCLUSION
 *  Problem Conclusion:
   Although MQ completes its write operation properly, the OS IO
   buffer is still not flushed to the queue file. This is happening
   because in the open() function the queue file is opened with
   WRITE BEHIND flags(WBH) to enhance performance. In addition to
   that, when each record is written, the record is not flushed to
   the queue file till I/O buffers are filled. This causes a delay
   in actual writing to the queue file even though writing
   operation is completed from the MQ execution part.
   .
   Although there is a delay in actual writing, the critical
   manager process needs to flush the I/O buffers to the disk
   during checkpointing a queue. But this is not happening because
   when a queue is created, global buffering is not enabled to the
   corresponding queue file. So, a process accessing the file uses
   local buffers to perform read/write operations.  Local buffers
   reside within process private address space and are NOT shared
   across the processes. Global buffers on the other hand support
   sharing of I/O buffers by more than one process. The messages
   read or write to the application queue files is done by the
   agent process(AMQZLAA0) whereas the checkpoint is done by
   critical manager process(AMQZMUC0).
   .
   Required code changes have been made to enable GBC
   (Global Buffering) for the queue files at  the time of their
   creation. This will enable multiple processes to process to
   shared I/O buffers concurrently.
   .
   This modification is applicable only for any new queue managers
   created or any new queues are created. The existing queues
   already in use need to be deleted and re-defined.  To perform
   this task users are recommended to recreate the existing queue
   managers using MS-03 supportpac. Recreating  Qmgr will ensure
   that all queue files of the Qmgr will have Global Buffering.
   .
   Local Fix:
   Define the following logical in the system logical table.
   $ define /sys "MQS_Q_GBC" "64"
   .
   This logical will ensure that GBC (Global Buffering) is assigned
   to queue files at the time of their creation. The existing
   queues already in use need to be deleted and re-defined to make
   the change effective.
   
   
    
   
   

TEMPORARY FIX

COMMENTS

APAR INFORMATION
 * APAR NUMBER
   IC86846
   
   
 * REPORTED COMPONENT NAME
   MQSERIES OVMS I
   
   
 * REPORTED COMPONENT ID
   5724A3802
   
   
 * REPORTED RELEASE
   600
   
   
 * STATUS
   CLOSED PER
   
   
 * PE
   NoPE
   
   
 * HIPER
   NoHIPER
   
   
 * SPECIAL ATTENTION
   NoSpecatt
   
   
 * SUBMITTED DATE
   2012-09-28
   
   
 * CLOSED DATE
   2012-10-05
   
   
 * LAST MODIFIED DATE
   2012-10-05
   
   

 * APAR IS SYSROUTED FROM ONE OR MORE OF THE FOLLOWING:
   
   
   
 * APAR IS SYSROUTED TO ONE OR MORE OF THE FOLLOWING:
   
   
   

FIX INFORMATION
 * FIXED COMPONENT NAME
   MQSERIES OVMS I
   
   
 * FIXED COMPONENT ID
   5724A3802
   
   

APPLICABLE COMPONENT LEVELS
 * R600 PSY
   UP