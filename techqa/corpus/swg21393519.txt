Title: IBM MustGather: WebSphere Application Server Community Edition OutOfMemory errors on AIX - United States

Text:
mustgather; MustGather; AIX; OOM; OutOfMemory; Out of memory; ce; wasce; community edition; MustGatherDocument; WAS CE; WAS CE; WAS CE; WASCE; WASCE; WASCE; JBoss; JBoss; JBoss; Glassfish; Glassfish; Glassfish; App Server; App Server; WebSphere CE; WebSphere CE; WebSphere CE; WebSphere Community Edition; WebSphere Community Edition; WebSphere Community Edition; IBM CE; IBM CE; IBM CE; Open Source; Open Source; Open Source TECHNOTE (TROUBLESHOOTING)

PROBLEM(ABSTRACT)
 Collecting data for OutOfMemory errors with WebSphere Application Server Community Edition on the AIX platform. Gathering this information before calling IBM support will help familiarize you with the troubleshooting process and save you time. 

RESOLVING THE PROBLEM
This document details the MustGather setup and data to be collected for WebSphere Application Server Community Edition when IBM Java 1.5 or IBM Java 1.6 Runtime faces OutOfMemory errors on the AIX operating system. 

Setup for OutOfMemory data collection on AIX
The information below will allow you to ensure that the required settings are in place to generate data files.

Ensure the generation of heapdumps 

 * Java Virtual Machine settings
   When an OutOfMemoryError occurs due to exhaustion of the Java heap, the most important diagnostic data to obtain is the Heapdump file.
   
   In order to ensure this is generated, the relevant settings must be in place. Although they are set by default, it is possible that the default setting has been changed, so it is important to check that the correct settings are in place.
   
   Check that the JVM is set to produce heapdumps by running the following:
   
   java -Xdump:what 
   The preceding command should produce the following: 
   dumpFn=doHeapDump
   events=uncaught
   filter=java/lang/OutOfMemory
   label=/tmp/heapdump.%Y%m%d.%H%M%S.%pid.dmp
   range=1..4
   priority=40
   request=exclusive+prepwalk 
   The preceding values are the default settings. At least events=uncaught and filter=java/lang/OutOfMemoryError must be in place in order to generate a heapdump file for uncaught OutOfMemoryErrors. 
   
   Options can be changed and set using the command line option: 
   -Xdump:heap[:=, ...] 
   More information about using the -Xdump option is available here [http://www.ibm.com/support/docview.wss?uid=swg21242497]. 
   
 * Available disk space 
   It is also important to ensure that there is enough disk space to write the heapdump file. The JVM allows the heapdump file to be written to any directory that is specified in the label option. In order for the heapdump file to be written to this location, there must be sufficient disk space (up to 500 MB might be required), and the correct permission for the Java process to write to that location.
   
   
 * Null references
   When a heap contains a large number of null references, the heap analysis can give misleading results, as the size of the null references is not taken into account. This could happen, for example, when some very large arrays are created and only a few of their values are filled in. 
   
   In these circumstances, the environment variable IBM_JAVA_HEAPDUMP_TEXT should be set before calling java as indicated below. This causes the heapdump to be generated in a different format, which does record the null references.
   
   export IBM_JAVA_HEAPDUMP_TEXT



Enable verbose GC logging 
Verbose GC logging gives an insight into the actions that the Garbage Collector is taking. This allows an application to be monitored and better tuned for performance, in addition to being vital for diagnosing memory problems. 

However, Verbose GC logging is not enabled by default, and can be done by 1 of the following ways:  * Enabling the generation of Verbose GC logging is done to direct the Verbose GC logging output to a single file using the following command line option:
   
   -Xverbosegclog:[DIR_PATH][FILE_NAME] 
   Where: [DIR_PATH] is the directory where the file should be written [FILE_NAME] is the name of the file to write the logging to 
   For example: 
   java -Xverbosegclog:/u/myuser/verbose_output.xml 
   
 * The logging can also be done in a circular fashion to a series of files, this is carried out using the following command line option:
   
   -Xverbosegclog:[DIR_PATH][FILE_NAME],X,Y 
   Where: [DIR_PATH] is the directory where the file should be written [FILE_NAME] is the name of the file to write the logging to X is the number of files to write to Y is the number of GC cycles a file should contain 
   

The parameter needs to be set in the setenv.sh file, located under the following directory: 

<WAS CE Installation Directory>/bin 
Edit the setenv.sh file, then locate the " JAVA_OPTS=" line and append the parameter to the existing list 

For example: 

JAVA_OPTS=-Xms128m -Xmx512m -Xverbosegclog:/tmp/verbose-ouput.xml 

Process size monitoring 
Follow the Process Size Monitoring for IBM Java technote [http://www.ibm.com/support/docview.wss?uid=swg21222446] [http://www.ibm.com/support/docview.wss?&uid=swg21222451] [http://www-1.ibm.com/support/docview.wss?&uid=swg21222451]and collect the process size monitoring logs 


MustGather collection 
Having ensured that AIX is properly setup for MustGather collection, follow these steps to collect the data files:  * Total physical memory, Java heap settings on the machine
   Provide the total physical memory of the machine where the problem is encountered. Also provide the minimum and maximum (Xms and Xmx) heap sizes set in the Java Virtual Machine.
   
   
 * Collect any heapdump.phd file
   This should be in the location detailed against the label field in the -Xdump:what output as shown the in setup, or in the current working directory of the Java Runtime.
   
   
 * Collect the verbose gc output
   This should be in the location specified during the setup.
   
   
 * Collect the process size monitoring
   
   
 * Collect the OutOfMemory javacore files
   OutOfMemory would trigger javacore text files automatically. These files will be located on the same location as heapdumps or in the current working directory of the Java Runtime.


Additional information  * Recent changes to the server before the problem occurrence 
 * Brief description of the applications running problem occurrence 
 * Load on the applications running 
 * Collect general information of the server as discussed here [http://www.ibm.com/support/docview.wss?uid=swg21231419#generalMustGather]


These data files should then be submitted to IBM Support.