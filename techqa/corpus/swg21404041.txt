Title: IBM Fatal error in ADM VP and Unexpected virtual processor termination - United States

Text:
 TECHNOTE (TROUBLESHOOTING)

PROBLEM(ABSTRACT)
 On Linux *32-bit" specific platform the OS OOM-KILLER (Out Of Memory) can terminate the oninit process resulting in database server panic. 

SYMPTOM
The database server message log (online.log) will contain the following messages: 

08:51:59 Fatal error in ADM VP at mt.c:13418 
08:51:59 Unexpected virtual processor termination, pid = 29493, exit = 0x9 
08:52:04 PANIC: Attempting to bring system down 

15:43:45 Assert Failed: Unexpected virtual processor termination, pid = 32452, exit = 0xf 

The OS message log (/var/log/messages) will contain reference to the killed process :
Sep 17 18:40:39 aflnx05 kernel: Out of memory: Killed process 9126 (oninit). 


CAUSE
The reason the OOM killer is killing the Informix oninit process is because the Linux code triggers the OOM-Killer when it runs out of memory. The OS tries to kill a process that meets certain criteria -- low activity, forks other processes, using low memory area. The Informix process that is being killed is called the Informix ADM VP -- as it forks most of the other oninit processes at Informix startup -- it also tends to be one of the least busy oninit processes -- add to the fact that the process has the IDS shared memory attached, it becomes a target for the Linux OOM killer when the system is running low on memory. 


In general, the Linux OOM killer is an OS tuning/OS memory management issue.

The Linux OOM killer issue is more prevalent in 32-bit OS where Linux memory management has a concept of low vs high memory



RESOLVING THE PROBLEM
As memory configurations and setting varies among various systems, I can only list possible areas and configuration settings that have proved as solutions on different systems, Yet the most common solution seems to be an upgrade to a 64-bit version of LINUX. 

1- Make sure you have swap space configured and tune the following parameters appropriately :
vm.swappiness 
vm.min_free_kbytes

The above 2 parameters and swap space all work together in this concept.

2- Run the hugemem kernel. This kernel splits low/high memory differently, and in most cases should provide enough low memory to map high memory.
<<<< hugemem was replaced with PAE kernel version on 2.6 and higher >>>> 

 

3- Configure a lower zone memory area by setting /proc/sys/vm/lower_zone_protection to a value xxx. Test with increasing that value. 

 

4- Configure or tune (huge pages) and (huge page size) for Linux. Check with your Linux System Administrator and support on appropriate settings.