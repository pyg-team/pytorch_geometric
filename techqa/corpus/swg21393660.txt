Title: IBM MustGather: WebSphere Application Server Community Edition hang or performance degradation problems on AIX - United States

Text:
mustgather; MustGather; AIX; hang; performance degradation; bad performance; HANG; ce; wasce; community edition; MustGatherDocument; WAS CE; WAS CE; WAS CE; WASCE; WASCE; WASCE; JBoss; JBoss; JBoss; Glassfish; Glassfish; Glassfish; App Server; App Server; WebSphere CE; WebSphere CE; WebSphere CE; WebSphere Community Edition; WebSphere Community Edition; WebSphere Community Edition; IBM CE; IBM CE; IBM CE; Open Source; Open Source; Open Source TECHNOTE (TROUBLESHOOTING)

PROBLEM(ABSTRACT)
 Collecting data for hang or performance degradation problems with WebSphere Application Server Community Edition on the AIX platform. Gathering this information before calling IBM support will help familiarize you with the troubleshooting process and save you time. 

RESOLVING THE PROBLEM
Should WebSphere Application Server Community Edition experience a perceived hang or performance degradation on the AIX operating system, there are a number of diagnostics data files that are useful for diagnosing the problem. 

Setup for hang or performance degradation data collection
The information below will allow you to ensure that the required settings are in place to generate those data files.

Ensure javacore.txt generation is enabled
The Javadump (javacore) is a useful file to provide information about the general state of the Java runtime and the applications running on it. In order to ensure this is generated, the relevant settings must be in place. Although they are set by default, it is possible that the default setting has been changed so it is important to check that the correct settings are in place.

Check that the JVM is set to produce a javadump file when a user signal (SIGQUIT) occurs by adding the following command line option: 



java -Xdump:what 
Which shows the options which are set, such as: 

dumpFn=doJavaDump 
events=gpf+user+abort 
filter=
label=/usr/local/jdk/jre/bin/javacore.%Y%m%d.%H%M%S.%pid.txt 
range=1..0
priority=10
request=exclusive 
The preceding values are the default settings. At least events=user must be in place to generate javadumps on a user signal. 

Options can be changed and set using the command line option: 

-Xdump:java[:=,...] 
For example, to set the ability to generate javadump files on user signals, you would use: 

-Xdump:java:events=user 

Enable verbose GC logging 
Verbose GC logging gives an insight into the actions that the Garbage Collector is taking. This allows an application to be monitored and better tuned for performance, in addition to being vital for diagnosing problems. 

Verbose GC logging is not enabled by default, and can be done by 1 of the following ways:  * Enabling the generation of Verbose GC logging is done to direct the Verbose GC logging output to a single file using the following command line option:
   
   -Xverbosegclog:[DIR_PATH][FILE_NAME] 
   Where: [DIR_PATH] is the directory where the file should be written [FILE_NAME] is the name of the file to write the logging to 
   For example: 
   java -Xverbosegclog:/tmp/verbose_output.xml 
   Note: Ensure that the directory provided in [DIR_PATH] exists in the file system. 
   
 * The logging can also be done in a circular fashion to a series of files, this is carried out using the following command line option:
   
   -Xverbosegclog:[DIR_PATH][FILE_NAME],X,Y 
   Where: [DIR_PATH] is the directory where the file should be written [FILE_NAME] is the name of the file to write the logging to X is the number of files to write to Y is the number of GC cycles a file should contain 
   The parameter needs to be set in the setenv.sh file, located in the following directory: 
   <WAS CE Installation Directory>/bin 
   Edit the setenv.sh file, then locate the "JAVA_OPTS=" line and append the parameter to the existing list. For example: 
   JAVA_OPTS=-Xms128m -Xmx512m -Xverbosegclog:/tmp/verbose-ouput.xml 
   
   

Installation of dbx 
The dbx debugger on AIX allows the interrogation of core files and hung processes. This is important in order to be able to determine the point of failure, or to easily obtain the stack trace for any native code that was running. 

The instructions technote [http://www.ibm.com/support/docview.wss?uid=swg21222456] describe how to tell if dbx is installed, and how to install the package if it is not present. 

Enable process size monitoring, paging usage and CPU profiling  * Monitoring the process size
   Follow the Process Size Monitoring for IBM Java technote [http://www.ibm.com/support/docview.wss?uid=swg21222446] and collect the process size monitoring logs
   
   
 * Monitoring the paging usage
   Monitoring the paging usage on AIX can be achieved using the vmstat utility, as carried out with the following command:
   
   ./vmstat.sh vmstat.log 
   Which uses the following script: 
   #!/bin/ksh
   #log file name
   VMSTAT_LOG=$1
   # Adjust LIMIT & SLEEP_TIME to suite your purpose/need.
   # There Lre 288- 5 minute intervals in a day
   LIMIT=288
   #sleep for 5 minutes
   SLEEP_TIME=300
   while true
   do
   i=0
   echo >$VMSTAT_LOG
   while [ $i -le "$LIMIT" ];
   do
   date >> $VMSTAT_LOG;
   vmstat 5 12 >> $VMSTAT_LOG;
   i=`expr $i + 1`;
   sleep $SLEEP_TIME;
   done
   done 
   Where: LIMIT is the number of log cycles before the log file rolls over SLEEP_TIME is the amount of time between each log cycle 
   
 * Monitor the CPU Profiling
   Profiling the CPU usage on AIX can be achieved using the tprof utility, as carried out with the following command: 
   
   ./tprof_ps.sh tprof_ps 
   Which uses the following script: 
   #! /bin/ksh
   TPROF_LOG=$1
   
   mkdir $TPROF_LOG
   cd $TPROF_LOG
   tprof -skex sleep 60
   ps avwwwg > ps-w-tprof.log
   
   cd ..
   
   
   

MustGather collection 
Having ensured that AIX is properly setup for MustGather collection, follow these steps to collect the data files:  1.  Take a snapshot of the network activity using the following command:
     
     netstat -an netstat_first.out 
     
 2.  Collect the paging usage monitoring output.
     
     
 3.  Collect process size information for your process.
     
     
 4.  Check to see if the application is showing any activity. This will be specific to your application.
     
     
 5.  Run the CPU profiling for the current CPU activity.
     
     
 6.  Generate 3 javacore.txt files, taken 2 minutes apart at the time of hang or bad performance:
     
     kill -3 [PID of problem JVM] 
     If you are unable to generate the javadump files, generate a core file. The "kill -11" command will activate the JVM dump agents which will generate a core file, however, a known limitation of the JVM core file generators is that only the current thread is preserved in the process image. Therefore, the best way to generate the core file is to attach to the process using gdb, from the directory of the java launcher, then to generate the core file using the gdb "generate " command as follows: 
     gdb [java launcher] [PID_of_problem_JVM] 
     Type the below command to the gdb prompt: 
     gdb) generate [requested core file name] 
     If you do not have gdb installed, use the kill command: 
     kill -11 [PID of problem JVM] 
     and then run jextract against the core file 
     jextract [core file]
     
     and collect the core.{date}.{time}.{pid}.dmp.jar output. 
     
 7.  Take a snapshot of the native stack traces using stackit.sh [http://www.ibm.com/support/docview.wss?uid=swg21222460].
     
     
 8.  Take a second snapshot of network activity:
     
     netstat -an netstat_second.out 
     
 9.  Collect the verbose GC output.
     
     
 10. Does the application require connection to a database server? If yes, what is the state of database server and network connectivity to the database server while the problem was experienced? Application server hang could be caused by database lock contention or network failure to the database server.
     
     

Additional information:  * Recent changes to the server before the problem occurred 
 * Brief description of the applications running while problem occurred 
 * Collect general information of the server as discussed here [http://www.ibm.com/support/docview.wss?uid=swg21231419#generalMustGather]


These data files should then be submitted to IBM Support 

If you want to analyze the javacore files yourself, download the IBM Thread and Monitor Dump Analyzer for Java Technology [http://www.alphaworks.ibm.com/tech/jca]. It is useful for identifying deadlocks, contention, bottlenecks, and to summarize the state of threads within WebSphere Application Server Community Edition.