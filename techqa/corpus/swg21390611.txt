Title: IBM J2C COBOL Importer generated Java Data Binding class: BigDecimal fields are not initialized - United States

Text:
RAD; J2C; Connector; cobol; java binder; setter; initialize; string; numeric; performance; BigDecimal; data binding ; VALUE TECHNOTE (TROUBLESHOOTING)

PROBLEM(ABSTRACT)
 In IBM Rational Application Developer for WebSphere Software, the generated "Java" J2C data binding classes created from COBOL copybooks, do not initialize fields which originate from a COBOL external decimal data type (mapped to Java "BigDecimal"). 

CAUSE
This is working as designed for performance reasons. 

Any COBOL data types which are mapped to Java String types, or any field in the COBOL source which has a VALUE clause associated with it will get initialized; nothing else does.

For example, a feature option to initialize everything would result in a large performance hit on the generated java J2C data binding class(s). It is important to understand this impact. If you have questions, contact IBM Rational Support. 

To date there is no plan to change this. 



RESOLVING THE PROBLEM
 

If the field is intended to be used by the CICS program it must be initialized, or set to some value. In order to have the generated data binding classes initialize the field correctly, add a VALUE clause to the item of interest in the COBOL source, and import the COBOL source again to generate the data binding class.
For example, add a value clause to item TAX-RATE to initialize the value to zero:

01 DFHCOMMAREA.
..
05 TAX-RATE PIC 9(1)V9(6) VALUE ZERO.
.. 



Note - UNSUPPORTED user solution: 

In some reported user scenarios, the instinctive workaround was to manually initialize the setters
in the generated class. 

For example: 
..
{some generated binder class}.setTax__Rate(new BigDecimal("0.0"));
..

The workaround of manually changing the generated binder has the drawback : when you regenerate the binder that change will be lost. User editing of generated code is NOT SUPPORTED! 

 

Note - unofficial term - "Java binder(s)": 

Some users have referred to the generated J2C data binding classes as "Java binder(s)".
no where is this term in the Rational Application Developer documentation and should not be used as it will lead to confusion.