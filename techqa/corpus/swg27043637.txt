Title: IBM Using JavaFX 2.2 with IBM Rational Rhapsody 8.1 – An introduction to third-party libraries and Reverse Engineering - United States

Text:
Java; JavaFX; Profile; reverse; engineering WHITE PAPER

ABSTRACT
 The purpose of this whitepaper is to demonstrate how an existing JavaFX project can be imported into and Built with IBM Rational Rhapsody in Java. We will be using the BrickBreaker example from the Oracle website. To demonstrate how IBM Rational Rhapsody can adopt to different situations, we will avoid modifying of the example source code in this guide. Instead we will show how to remedy issues by modifying the project settings to fit with the example code. Of course, it may be better coding practice to “correct” some of the issues within the code directly.

n.b. Password for zip project is rhapsody. 

CONTENT
Procedure: 

 1. Download and install Java JDK 1.7 u60 or higher. 
 2. Download the BrickBreaker example found in the JavaFX Demos and Samples Downloads from Oracle Java SE Development Kit 7 Downloads [http://www.oracle.com/technetwork/java/javase/downloads/jdk7-downloads-1880260.html] - 
 3. Reverse engineer the src\BrickBreaker folder JavaFX example. 


[/support/docview.wss?uid=swg27043637&aid=1] [/support/docview.wss?uid=swg27043637&aid=1] 

You should now have the package for the BrickBreaker project and also the Java/JavaFX external classes referenced by the BrickBreaker code 

[/support/docview.wss?uid=swg27043637&amp;aid=2] 

4) Generate the code. The classes under Java/JavaFX are marked as external as we don’t want to generate these source files. We want to reference the pre-compiled libraries in the JRE (See step 1) 

5) If we try to build the code now we will get a lot of errors because the JavaFX library: jfxrt.jar cannot be found. For example, 

[/support/docview.wss?uid=swg27043637&aid=3] [/support/docview.wss?uid=swg27043637&aid=3] 

Open the DefaultComponent and add the path to this file in the CLASSPATH field. 
For example, I installed the JDK1.7.0_67 to C:\Program Files\Java\jdk1.7.0_67 so I want to add the following line to the DefaultComponent: 

[/support/docview.wss?uid=swg27043637&aid=4] [/support/docview.wss?uid=swg27043637&aid=4] 

6) Any compile errors may be due to a bad import from the RE engine. For example, with the error below: 

[/support/docview.wss?uid=swg27043637&aid=5] [/support/docview.wss?uid=swg27043637&aid=5] 

The code should be 

private static java.util.Random RANDOM = new java.util.Random(); 

We can remedy this by 
a) opening Utils::Random in the browser and setting the Attribute type to a non-existing type “java.util.Random”. 

[/support/docview.wss?uid=swg27043637&aid=6] [/support/docview.wss?uid=swg27043637&aid=6] 

b) Leave the code as it was imported and add the missing external class called Random to Java.util package and a usage dependency from Utils to Random: 

[/support/docview.wss?uid=swg27043637&aid=7] [/support/docview.wss?uid=swg27043637&aid=7] 

7) Next we need to configure the entrypoint for the project. We currently have the default entry point in the configuration that does nothing, and the imported entry point in the Main class: 

[/support/docview.wss?uid=swg27043637&aid=8] [/support/docview.wss?uid=swg27043637&aid=8] 

Clearly we need to reconcile the two. There are several ways to do this: 
a) Merge the imported Main class into the MainDefaultComponent class that was created by IBM Rational Rhapsody. 
b) Call the Main.main function from the MainDefaultComponent.main method. 

The latter is a much quicker approach but is messier. 
For this guide I will use the latter approach. 

[/support/docview.wss?uid=swg27043637&aid=9] [/support/docview.wss?uid=swg27043637&aid=9] 

8) We also need to make sure that we build and run the project with the same and correct versions of the javac and java respectively. Open jdkmake.bat and jdkrun.bat from the Rhapsody\Share\etc directory and check the PATH variable assignments match your download JDK from step 1. 

[/support/docview.wss?uid=swg27043637&aid=10] [/support/docview.wss?uid=swg27043637&aid=10] 

If this is not set properly you will likely get a runtime error. Something similar to 


RenderJob.run: internal exception
java.lang.UnsatisfiedLinkError: com.sun.prism.d3d.D3DContext.nSetBlendEnabled


9) In the BlockBreaker example, you will need to move a resources folder, images, to your project location. N.b. it would be better coding practice to modify the source code so that the hard-coded folder path is outside of the code directory. 

The code should now run from the IBM Rational Rhapsody toolbar. 
BrickBreaker.zip [/support/docview.wss?uid=swg27043637&aid=12]BrickBreaker.zip [/support/docview.wss?uid=swg27043637&aid=11]