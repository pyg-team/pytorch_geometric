Title: IBM Is it possible to model so a Template class inherits from another template class in Rational Rose ANSI C++? - United States

Text:
template; inherit; class; generalization; ANSI C++; parameterized; anonymous; 1117599 TECHNOTE (TROUBLESHOOTING)

PROBLEM(ABSTRACT)
 Is it possible to model so a Template class inherits from another template class in Rational Rose ANSI C++? 

RESOLVING THE PROBLEM
QUESTION:

Is it possible to model so a Template class inherits from another template 
class in Rational Rose ANSI C++?

ANSWER:

Yes it's possible, but a template class cannot directly inherit from another 
template class in Rational Rose. The inheritance relationship is established 
from a template class to an anonymous Instantiated class, not directly to the 
other template class. 

A) This is the same behaviour as would be if a normal class would inherit from 
a template class, so before looking deeper into this solution read related 
solution: 131639756 and then get back to this solution again.

B) Download and open up the model attached:

Description of the elements in this model + the code that will be generated:

template <Class E>
class my_string : public basic_string<E>

The mapping of the above construct to UML requires the following: 

***Classifiers*** 
1. Parametrized class my_string with 1 formal parameter called E of type class 
2. Anonymous Instantiated class basic_string<E>, with 1 actual parameter 
called E
3. Parametrized class basic_string with 1 formal parameter called E of type 
class

***Relationships*** 
4. Instantiates relationship from the anonymous Instantiated class to the 
Parametrized class basic_string 
5. Generalization relationship from Parametrized class my_string to the 
anonymous Instantiated class. 

(The above UML elements will be found in the example model).

C) What needs to be done:

1. The anonymous class shouldn't have a name, so to create such a class follow 
these steps:

- Add a class
- Open the Specification for the class > General tab> Take away the name 
of the class so the "Name" field is empty
- Change the Type: From "Class" to "Instantiated Class"
- Change the Stereotype to "anonymous_type" > Apply (important to apply 
right now)

- Go to the Detail tab 
- Right click in the "Actual Arguments" area > Insert > Add "E" to the 
Name field and let the type be empty

2. Where should the anonymous class be placed? 

It should be placed in the "RootPackage" package and it is where reversed 
engineered elements appear.

The background is that when reverse engineering C++ code is Rational Rose 
trying to "merge" classes with already existing classes. The problem here is 
that Rational Rose will not find the anonymous class because it's not named.

To change package that reversed engineered classes should go into, change the 
RootPackage property:

On component level: 

Right click on the component > Open Specification > ANSI C++ tab > 
Change the "RootPackage" property from "C++ Reversed Engineered" to the name of 
your folder.

On model level:

Tools menu > Model Properties > Edit > ANSI C++ tab > Type: Module 
Specification > > Change the "RootPackage" property from "C++ Reversed 
Engineered" to the name of your folder.

(changing it on model level means that all new components will have this 
setting).

In the example model is the "RootPackage" property = anonymous (Package located 
directly under the Logical View)

3. The "anonymous class" will not generate any code, so it makes no sense to 
assign it to an ANSI C++ component in the component view.

RELATED INFORMATION
 Model showing Template class inherits from other template class [ftp://public.dhe.ibm.com/software/rational/technote/UsingTemplatesupdated_1-13ZEE1_1-TBMT.zip]


 

HISTORICAL NUMBER
 165658831