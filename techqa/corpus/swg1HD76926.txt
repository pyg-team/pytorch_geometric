Title: IBM HD76926: THE RESPONSE OF CALLING GETCOMPUTEDEFFECTIVITY() IS TOO SLOW - United States

Text:
 SUBSCRIBE
You can track all active APARs for this component.



APAR STATUS
 * CLOSED AS PROGRAM ERROR.
    
   
   

ERROR DESCRIPTION
 *  PROBLEM: The response of calling
   GetComputedEffectivity() is too slow.
   .
   PRE-REQUISITE:
   CREATING DATA:
   01. Create 2 Product in LCA -> Product-A &
   Product-B
   02. Create 5000 Part Instances under Product-B
   03. Configure Product-B and set range effectivity to
   all instances
   NOTE: To replay the 3 steps mentioned above
   please refer to the presentation file
   named "How_To_Create_Problem_Data.ppt" from
   the file "2008jul17.76043086.600D.zip". The same
   zip file has the contents of the framework which will
   help you to create this data upto the step above.
   .
   04. Create COPS under Product-B
   05. Configure Product-A
   06. Add COPS under Product-A and set range
   effectivity (5-99) to the COPS instance
   07. Create Product Specification under Product-A
   and set some filter criteria.
   NOTE: To understand the concept of COPS, how to
   create COPS and the pre-requisite settings
   required for COPS please refer the presentation
   files named "What_is_COPS_E.ppt"
   and "How_To_Create_Cops_Object.ppt" from the
   file "2008jul17.76043086.600D.zip".
   .
   SCENARIO:
   <Short Description>
   Under the above configured BOM with COPS,
   calling GetComputedEffectivity() takes very long
   time compared with other api call.
   .
   <Scenario to re-produce>
   I have attached the sample program to re-produce
   for this slow performance.
   Please use the Framework provided in the
   file "2008jul08.76043086.600A.zip".
   To use this program, please compile "???
   TestModule1" & "???TestModule2".
   .
   Then run each program as follows.
   .
   A) ???TestModule1 <Product Specification ID for
   the data created above>
   .
   B) ???TestModule2 <Product Specification ID for
   the data created above>
   .
   What ???TestModule1 do
   1) Expand tree by using Product Spec (get_Tree
   api)
   2) Get instance effectivity value for each instances
   of 1) result
   (GetComputedEffectivity api)
   3) Close session (CloseSession api)
   .
   What ???TestModule2 do
   1) Expand tree by using Product Spec (get_Tree
   api)
   2) Close session (CloseSession api)
   This module is only for comparing with ???
   TestModule1.
   .
   RESULT:
   As long as customer has tested,
   GetComputedEffectivity takes 27 min
   31sec for 5000 instances.
   .
   EXPECTED RESULT:
   Customer is expecting much faster response for
   this api call.
   .
   Best Regards,
   CAA Maintenance.
   .
   
   
    
   
   

LOCAL FIX

PROBLEM SUMMARY
 *  The response of calling GetComputedEffectivity() is too slow
   PROBLEM: The response of calling
   GetComputedEffectivity() is too slow.
   .
   PRE-REQUISITE:
   CREATING DATA:
   01. Create 2 Product in LCA -> Product-A &
   Product-B
   02. Create 5000 Part Instances under Product-B
   03. Configure Product-B and set range effectivity to
   all instances
   NOTE: To replay the 3 steps mentioned above
   please refer to the presentation file
   named "How_To_Create_Problem_Data.ppt" from
   the file "2008jul17.76043086.600D.zip". The same
   zip file has the contents of the framework which will
   help you to create this data upto the step above.
   .
   04. Create COPS under Product-B
   05. Configure Product-A
   06. Add COPS under Product-A and set range
   effectivity (5-99) to the COPS instance
   07. Create Product Specification under Product-A
   and set some filter criteria.
   NOTE: To understand the concept of COPS, how to
   create COPS and the pre-requisite settings
   required for COPS please refer the presentation
   files named "What_is_COPS_E.ppt"
   and "How_To_Create_Cops_Object.ppt" from the
   file "2008jul17.76043086.600D.zip".
   .
   SCENARIO:
   <Short Description>
   Under the above configured BOM with COPS,
   calling GetComputedEffectivity() takes very long
   time compared with other api call.
   .
   <Scenario to re-produce>
   I have attached the sample program to re-produce
   for this slow performance.
   Please use the Framework provided in the
   file "2008jul08.76043086.600A.zip".
   To use this program, please compile "???
   TestModule1" & "???TestModule2".
   .
   Then run each program as follows.
   .
   A) ???TestModule1 <Product Specification ID for
   the data created above>
   .
   B) ???TestModule2 <Product Specification ID for
   the data created above>
   .
   What ???TestModule1 do
   1) Expand tree by using Product Spec (get_Tree
   api)
   2) Get instance effectivity value for each instances
   of 1) result
   (GetComputedEffectivity api)
   3) Close session (CloseSession api)
   .
   What ???TestModule2 do
   1) Expand tree by using Product Spec (get_Tree
   api)
   2) Close session (CloseSession api)
   This module is only for comparing with ???
   TestModule1.
   .
   RESULT:
   As long as customer has tested,
   GetComputedEffectivity takes 27 min
   31sec for 5000 instances.
   .
   EXPECTED RESULT:
   Customer is expecting much faster response for
   this api call.
   .
   Best Regards,
   CAA Maintenance.
   .
   
   
    
   
   

PROBLEM CONCLUSION
 *  THIS PROBLEM WILL BE FIXED ON CATIA VERSION 5 RELEASE
   20 GA LEVEL.
   NOTE THAT THIS PROBLEM WILL ALSO BE FIXED ON V5R19SP02
   AND V5R18SP07
   Incident Diagnosis
   The developed utility is trying to find out computed
   effectivity for around 5000 instances.
   The API used earlier was GetComputedEffectivity()
   which is a heavy call as for each instance it will
   calculate effectivities of its parents each time
   and so it was taking considerable time in
   executing for 5000 instances.
   .
   Correction Explanation
   A top down approach has been suggested where
   customer has to first find out solved Eff val for
   parent store it in some variable and then find Eff
   of children. then And() Eff of parent with Eff of
   child.
   For this purpose Five APIs are suggested out of
   which two were not exposed. They have been
   exposed with this correction.
   .
   
   
    
   
   

TEMPORARY FIX

COMMENTS

APAR INFORMATION
 * APAR NUMBER
   HD76926
   
   
 * REPORTED COMPONENT NAME
   CAA V5 AIX
   
   
 * REPORTED COMPONENT ID
   569101100
   
   
 * REPORTED RELEASE
   518
   
   
 * STATUS
   CLOSED PER
   
   
 * PE
   NoPE
   
   
 * HIPER
   NoHIPER
   
   
 * SPECIAL ATTENTION
   NoSpecatt
   
   
 * SUBMITTED DATE
   2008-08-07
   
   
 * CLOSED DATE
   2009-05-05
   
   
 * LAST MODIFIED DATE
   2009-05-05
   
   

 * APAR IS SYSROUTED FROM ONE OR MORE OF THE FOLLOWING:
   
   
   
 * APAR IS SYSROUTED TO ONE OR MORE OF THE FOLLOWING:
   
   
   

FIX INFORMATION
 * FIXED COMPONENT NAME
   CAA V5 AIX
   
   
 * FIXED COMPONENT ID
   569101100
   
   

APPLICABLE COMPONENT LEVELS
 * R518 PSN
   UP