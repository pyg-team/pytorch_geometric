Title: IBM Why am I facing performance issues with IBM TRIRIGA while using WebSphere IHS SSO-enabled environment but not when directly accessing the server (not SSO-enabled)? - United States

Text:
TRICONFIG; TRISECURITY; TRIWEBSPHERE; IHS; WebServer; SSO; plugin; PLG; balancing; performance TECHNOTE (FAQ)

QUESTION
 Why am I facing performance issues with IBM TRIRIGA while using WebSphere IHS SSO-enabled environment but not when directly accessing the server (not SSO-enabled)? 

CAUSE
Users have been reporting poor performances when connecting to IBM TRIRIGA via SSO-enabled environment. If users connect to the same environment, but using a non-SSO-enabled server/JVM, the performance is acceptable. Why is this happening?


ANSWER
For the purpose of this document SSO refers to Single Sign On meaning a single set of credentials stored in a directory server. References to SSO in this document DO NOT refer to Seamless Sign On where a user is not challenged for their credentials once they have authenticated to the network. All aspects of TRIRIGA may not be compatible with use seamless sign on even if it is configured. Functionality using applets (example CAD Integrator) may continue to challenge for credentials. Seamless sign on and Secure Socket Layer (SSL) are technologies unrelated to the TRIRIGA product and are configured at a layer prior to accessing TRIRIGA. 

This turns out to be a WebSphere IHS SSO configuration issue. 

As per IBM WebSphere IHS team, experience tells that what we are likely to see from the capture of the required logs is one or both of the following:

(a) Latency in response from the Application Server side; 

(b) Latency in SSO processing at the Web Server of which the SSO part would be third party product to IHS.

Comparing Direct to Application Server versus via IHS/PLG proxy is like trying to compare apples and oranges. When via IHS/PLG there are additional headers involved and load balancing. Direct only goes to one cluster member.

This case is out of IBM TRIRIGA support scope, since we cannot troubleshoot Application Server & Web Server SSO configuration. See more information on SSO configuration and support scope here:


SSO [https://www.ibm.com/developerworks/community/wikis/home?lang=en#!/wiki/IBM%20TRIRIGA1/page/SSO] 

What is necessary to implement Single Sign-On (SSO) over IBM TRIRIGA product? [http://www.ibm.com/support/docview.wss?uid=swg21980597] 

Does IBM TRIRIGA support Seamless Sign On without challenging Internet Browser for credential information [http://www.ibm.com/support/docview.wss?uid=swg21980588]


You will need to engage IBM WebSphere IHS (IBM HTTP Server) support team on this case, by creating a PMR for them to work with this issue. Kindly make sure you classify the PMR as being WebSphere product one and make sure on the description of the PMR this is assistance request from WebSphere IHS team. 

It follows some instructions from WebSphere IHS support team for collecting relevant information for the PMR troubleshooting process. See that there are some discussions and as well suggestions from IHS team for better performance below. You will need to work with our Application Server & Web Server administrator for reviewing and collecting this required information. If there are questions on the information below, this should be part of the PMR created for WebSphere IHS team. 


(A) For the IHS/PLG proxy load balancer Web Server customer should do the following to help with investigation:

- Log Response Time in Seconds in IHS access log. This will help point out long running requests to find and follow in plugin and other traces:

- Log response time in seconds in the IHS access log by adding the %T option to the logformat directive for the access log as defined in the IHS httpd.conf file.

For instance:

Access log uses logformat labled "common":

CustomLog logs/access.log common
LogFormat "%h %l %u %t TIME:%T \"%r\" %>s %b" common

This will log request time in seconds just after the time-stamp making it easy to find and read when viewing the access log. This will help identify URI and time-frame of long running requests.

Useful references: 

Tips for using the IHS Access Log feature for WebSphere Commerce sites [http://www.ibm.com/developerworks/library/co-websphere-access-feature/] 

IBM HTTP Server: Logging Essentials for Advanced Debugging [http://www-01.ibm.com/support/docview.wss?uid=swg27039505&aid=1]



(B) Enable IHS diagnostic MPM_Stats module in IHS Web Server. This will log some thread usage statistics in IHS error log that may help reveal if threads are piling up in other IHS modules besides plug-in module.

Useful reference:

mod_mpmstats [http://publib.boulder.ibm.com/httpserv/ihsdiag/2.0/mod_mpmstats.html]

***NOTE: Be sure to enable TrackModules directive when enabling mpm_stats as noted in the document above.


(C) Have plugin module logging in "Debug" mode by editing the plugin-cfg.xml and setting LogLevel="Debug"

Plug-in Debug level logging will produce enough detail to see if delay is just plugin waiting on response from Applicaiton Server or in finding a cluster member to proxy too. Debug level does not log as much as "Trace" level but plugin log does not rotate. The capture should not be taken over a long period of time. Plugin Log over a Gig is not practical for analysis. Normally we recommended to clear the plugin log and restart the Web Server prior to capture if at all possible. You can however also elect to change the plugin-cfg.xml loglevel and wait 60 seconds without restarting of IHS and plugin will start to log at the new level.

Useful reference: 

IBM HTTP Server: Logging Essentials for Advanced Debugging [http://www-01.ibm.com/support/docview.wss?uid=swg27039505&aid=1]

(D) If evidence points to modules in IHS then customer can enable IHS disgnostic module timing logging (Extended MPM_stats). Customer can elect to do this logging in addition to the above or await analysis of above logging.

Useful reference:

Using IBM HTTP Server 7.0.0.23/8.0.0.4 and later extended module timing diagnostics [http://publib.boulder.ibm.com/httpserv/ihsdiag/mpmstats_module_timing.html]


(E) For HTTPS there are two handshakes involved with IHS/PLG proxy:

1. client to IHS
2. Plugin to Application Server

For Direct to Application Server there is only the one handshake so there is some inherit latency that will always be present.

Comparing Direct to Application Server VERSUS via IHS/PLG proxy is like trying to compare apples and oranges. When via IHS/PLG there are additional headers involved and load balancing. Direct only goes to one cluster member.

SSO may or may not involve a security module on the IHS Web Server itself. If there is security processing at the IHS tier then that too must add inherit latency.


(F) The files to upload to PMR for WebSphere IHS support team to review, along with the WebSphere version, IHS version and problem description, would be:

i. IHS - Error_log, Access_log, HTTPD.conf
ii. Plugin - http_plugin.log and plugin-cfg.xml

Useful reference: 

IBM HTTP Server: Logging Essentials for Advanced Debugging [http://www-01.ibm.com/support/docview.wss?uid=swg27039505&aid=1]



ADDITIONAL INFORMATION

See the following links related to performance tuning of WebSphere environments with IHS/PLG proxy load balancers:

Tuning IBM HTTP Server to maximize the number of client connections to WebSphere Application Server [http://www-01.ibm.com/support/docview.wss?rs=177&uid=swg21167658] 

Recommended values for Web server plug-in config [http://www-01.ibm.com/support/docview.wss?uid=swg21318463] 

***NOTE: The sub-links in the technotes above are equally important to review.

IBM HTTP Server Performance Tuning [http://publib.boulder.ibm.com/httpserv/ihsdiag/ihs_performance.html] 

Case study: Tuning WebSphere Application Server V7 and V8 for performance [http://www.ibm.com/developerworks/websphere/techjournal/0909_blythe/0909_blythe.html#sec4e]