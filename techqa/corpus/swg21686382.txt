Title: IBM Using the Load capabilities through ODWEK (V9.5) - United States

Text:
ODWEK TECHNOTE (FAQ)

QUESTION
 How do I use the Load capabilities through ODWEK (V9.5) 

ANSWER
Prior to Content Manager OnDemand Web Enablement Kit (ODWEK) Java API V9.5, the only API that allowed documents to be added to the Content Manager OnDemand (CMOD) archive was the ODFolder.storeDocument API, which resulted in an archive request to the CMOD server for each document.
In ODWEK V9.5, new APIs have been introduced to allow documents to be loaded in bulk, similar to the ARSLOAD command. To accomplish this using the ODWEK Java API, perform the following:


 1. Call the ODServer.loadInit API to initiate the load process. 
 2. For each document to load, call the ODServer.loadAddDoc API, passing the number of pages, a Hashtable containing database field names (keys) with their corresponding indexes (values), and the document data. 
 3. Call the ODServer.loadCommit API, specifying the application group and application to send the load data and load request to the CMOD server. 


Be aware of the following:  *   * 
   
   
 * The CMOD archive (Server) version must be V9.5.0.0 or higher. 
 * The steps must be called in this order. Attempting to call them out of order will result in an exception. If you need to reset the process for any reason, call the ODServer.loadReset API and begin the entire process again. All documents loaded during the process must meet all of the requirements of specified application group and application combination i.e. they must be the correct data type and format. 
 * As of OnDemand V9.5.0.1, all dates must be standardized on the ISO date and/or datetime format.  * 
    * 
    * 
   
   
 * The number of pages that the ODServer.loadAddDoc API accepts is valid only if the application group has a field defined with the 'Page Count' attribute. If the application group does not have such a field defined, the number of pages parameter passed to ODServer.loadAddDoc will be ignored. 
 * If the application being loaded to is Large Object enabled, that attribute is not honored.


Server setup  * 
   Steps must be taken to prepare the CMOD archive where the documents will be loaded prior to calling any of the ODWEK load APIs. The directories specified must exist. For example,
    * On Unix servers and z/OS servers, add two values to the instance's ars.cfg  * 
       * 
       * 
      
      
    * On Windows servers (9.5.0.2 or later), via the OnDemand Configurator V9.5, Configuration Parameters panel (select the Parameters button on the Instance tab to launch the Configuration Parameters panel), enter ARS_DOWNLOAD_DIR in the Name field and a valid directory for the Value field and select the Add button. Take similar steps to add an entry for the ARS_DOWNLOAD_TMP_DIR. 
    * On Windows servers (pre-9.5.0.2), add two new String Values and corresponding Value Data to the registry (Before you proceed, you should make a backup copy of the registry and you should be familiar with how to restore the registry to the same version you were using when you last successfully started the computer.)  * 
       * 
       * 
      
      
    * On IBM i servers, add two values to the /QIBM/UserData/OnDemand/<instance name>/ARS.CFG  * 
       * 
       * 
      
      
   
   


The following example demonstrates loading via the ODWEK Java API by loading three documents in a single ODWEK load request: 

import java.io.File; 
import java.util.*; 

import com.ibm.edms.od.*; 

public class TcLoadDocs 
{ 
public static void main ( String argv[] ) 
{ 
ODServer odServer; 
ODConfig odConfig; 
Hashtable<String,String> idxs; 
File loadFile; 

if ( argv.length < 3 ) 
{ 
System.out.println( "usage: java TcLoadDocs <server> <userid> <password> " ); 
return; 
} 
try 
{ 
//---------- 
// Set the stage 
//---------- 
System.out.println( "This testcase should" ); 
System.out.println( " Demonstrate the ODWEK Load Process" ); 
System.out.println( "" ); 
System.out.println( "---------------------------------------------------" ); 
System.out.println( "" ); 

odConfig = new ODConfig 
(ODConstant.PLUGIN, 
ODConstant.APPLET, 
null, 
200, 
"/applets", 
"ENU", 
"c:/temp", 
"c:/trace", 
0); 

odServer = new ODServer(odConfig ); 
odServer.initialize( "TcLoadDocs.java" ); 
System.out.println( "Logging on to " + argv[0] + "..." ); 
odServer.logon( argv[0], argv[1], argv[2] ); 

//---------- 
// Step 1 in the ODWEK Load process 
//---------- 
odServer.loadInit(); 

//---------- 
// Step 2 in the ODWEK Load process 
// Repeated for each document to be loaded 
//---------- 
idxs = new Hashtable<String, String>(); 

idxs.put("acct_name", "Acme Art Company"); 
idxs.put("acct_num", "00112233445"); 
idxs.put("purchase_date","2012-05-23"); 
idxs.put("purchase_amt", "1172.18"); 
loadFile = new File("c:\\invoices\\acme\\bluePaintingInvoice.afp"); 
odServer.loadAddDoc(4, idxs, loadFile); 

idxs.clear(); 
loadFile = null; 

idxs.put("acct_name", "Acme Art Company"); 
idxs.put("acct_num", "00112233445"); 
idxs.put("purchase_date","2012-05-30"); 
idxs.put("purchase_amt", "879.39"); 
loadFile = new File("c:\\invoices\\acme\\redPaintingInvoice.afp"); 
odServer.loadAddDoc(3, idxs, loadFile); 

idxs.clear(); 
loadFile = null; 

idxs.put("acct_name", "Light and Dark Inc."); 
idxs.put("acct_num", "99887766554"); 
idxs.put("purchase_date","2012-05-15"); 
idxs.put("purchase_amt", "8711.10"); 
loadFile = new File("c:\\invoices\\light_dark\\blackWhiteCharcoalInvoice.afp"); 
odServer.loadAddDoc(7, idxs, loadFile); 

//---------- 
// Step 3 in the ODWEK Load process 
// Done adding documents, now call the server to load 
//---------- 
odServer.loadCommit("Invoices", "InvoicesWestCoast"); 

//---------- 
// Cleanup 
//---------- 
odServer.logoff( ); 
odServer.terminate( ); 
System.out.println( "" ); 
System.out.println( "---------------------------------------------------" ); 
System.out.println( "" ); 
System.out.println( "Testcase completed" ); 
System.out.println( "" ); 
} 
catch ( ODException e ) 
{ 
System.out.println( "ODException: " + e ); 
System.out.println( " id = " + e.getErrorId( ) ); 
System.out.println( " msg = " + e.getErrorMsg( ) ); 
e.printStackTrace( ); 
} 
catch ( Exception e2 ) 
{ 
System.out.println( "exception: " + e2 ); 
e2.printStackTrace( ); 
} 
} 
}