Title: IBM Additional Oracle tuning for high load, large scale, clustered deployments - United States

Text:
quickr j2ee; oracle tuning; oracle performance; clustered; clustering TECHNOTE (FAQ)

QUESTION
Is there additional Oracle tuning for a high load, large scale, clustered deployment of Lotus Quickr services for WebSphere Portal?

ANSWER
Yes. When planning to transfer data to Oracle, you should review and follow the IBM WebSphere Portal documentation for planning and transferring databases to Oracle. Primarily you should follow the tuning recommended in the IBM WebSphere Portal 6.0.1.1 Tuning Guide [http://www.ibm.com/support/docview.wss?uid=swg27008511&aid=1]. These recommendations for Lotus Quickr may differ slightly from the base tuning of IBM WebSphere Portal: 

 * Apply the latest updates and patch sets from Oracle for your release and platform. 
 * Perform the following recommended database maintenance for Quickr Oracle databases Optimizer statistics are a collection of data about the database and the objects in the database, these statistics are used by the query optimizer to choose the best execution plan for each SQL statement. Because the objects in a database can be constantly changing, statistics must be regularly updated so that they accurately describe these database objects, particularly after periods of heavy data modifications (inserts, updates, and deletes) such as a population phase. We have used the following commands in our reliabilty and longevity environment to recompute these statistics: 
   
    *  execute dbms_stats.gather_database_stats(dbms_stats.auto_sample_size, method_opt=>'FOR ALL INDEXED COLUMNS SIZE AUTO',cascade=>TRUE); execute dbms_stats.gather_schema_stats(ownname=> 'jcr',cascade=> TRUE); execute dbms_stats.gather_table_stats(ownname=> 'JCR',tabname=> 'PROT_RES' ,estimate_percent=> null,cascade=> TRUE,degree=> null,no_invalidate=> FALSE,granularity=> 'ALL',method_opt=> 'FOR ALL COLUMNS SIZE AUTO'); execute dbms_stats.gather_dictionary_stats(options=> 'GATHER AUTO'); 
   
   
 * The following are tuning fixes and tips to apply after the database transfer. These fixes and tips are most important for Lotus Quickr servers that will be running under high load, running at large scale and in cluster deployments.  * For slow queries on the JCR,PROT_RES table, download PK89946 [http://www.ibm.com/eserver/support/fixes/fixcentral/swgquickorder?fixes=6.0.1.1-WP-Multi-IFPK89946&productid=WebSphere%20Portal&brandid=5] 
    * For slower queries and disk contention caused by high disk I/O on the database server, consider optimizing the redo log groups for achieving good performance:  * Consider moving the Redo Log Groups to their own dedicated fast disk storage, this will eliminate the disk I/O contention between the Quickr database table transactions and the redo logs. 
       * Size the redo logs to optimize redo log switches. Optimizing the redo log size involves balancing thetradeoff between frequent redo log switches and overhead of maintaining large redo logs on your system. A good starting point is to set the redo log size to average redo log switches every 30 minutes. Then based on system performance tune larger or smaller as needed.
      
      
    * At large scale, Disk I/O and contention can be caused by high write transaction rate and large scale, particularly the JCR schema objects: JCR.PROT_RES, JCR.ICMSTJCRLINKS and JCR.ICMSTJCRWSNODES indexes. To resolve this, optimize the tablespace:  * For those using the default database block size of 8KB (hence tablespaces 32GB), here are the key tablespace choices that our reliability and longevity tests implemented in our Oracle database.
         We recommend monitoring your tablespace sizing and growth on a regular basis. The following initial tablespace sizes (at least this size) supported the initial reliability and longevity data population with approximately 300,000 pieces of content (100,000 documents, 200,000 wikis, blogs, etc...) and the load generally consisting of a high rate of database write operations.
         ICMLFQ32: 8192MB
         ICMLNF32: 25MB
         ICMLSNDX: 8192MB
         ICMSFQ04: 1024GB
         ICMVFQ04: 1024MB
         SYSAUX: 1024MB
         SYSTEM: 1024MB
         TEMP: 1024GB
         UNDOTBS1: 1024MB
         USERS: 32767MB
         
       * We also used automatic sizing (up to the maximum allowed) of tablespaces and generally set the increment size to be 1024MB as follows:  * alter database datafile '<datafile_name>' autoextend on next 1024M maxsize unlimited;
            
            This allowed us to minimize contention for database resources caused by tablespace resize activity.
         
         
      
      
    * For slow queries (greater than 1 sec) caused by inefficient optimizer plans for access plans using HASH JOINS. To determine if there is a problem, perform the following:  1. Determine if the following query returns greater than 500,000 rows SELECT COUNT(*) FROM JCR.ICMSTJCRLINKS 
       2. Analyze the access plan for the inefficient queries, determine if the plan contains an UNION ALL and HASH JOIN tree that includes INDEX FAST FULL SCAN of the ICMSTJCRLINKS table indexes. The following is an example from Enterprise Manager:
          [/support/docview.wss?uid=swg21398760&aid=1] [/support/docview.wss?uid=swg21398760&aid=1] 
       3. Solution: if you determine Steps 1 and 2 are true, then as a workaround to mitigate the problem, during development and testing in our particular environment utilizing the high data load and operational profile that IBM employs during system reliability testing, we followed the steps in Problem with Oracle 10g Optimization on large databases [http://www.ibm.com/support/docview.wss?uid=swg21399374].