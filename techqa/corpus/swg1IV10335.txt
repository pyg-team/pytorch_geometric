Title: IBM IV10335: OUT OF MEMORY USING JAVA FOR WINDOWS 32BIT ON WINDOWS 64BIT WITH ALL JAVA RELEASES - United States

Text:
 SUBSCRIBE
You can track all active APARs for this component.



APAR STATUS
 * CLOSED AS DOCUMENTATION ERROR.
    
   
   

ERROR DESCRIPTION
 *  An Out Of Memory can occur using Java for Windows 32bit on 64bit
   windows with 4+GB of physical memory.
   
   
    
   
   

LOCAL FIX
 *  The work around is for the customer to set -Xmx. The value that
   -Xmx should be set to is application specific and more details
   will follow. Currently, the recommendation is that users should
   set -Xmx (1) as recommended by the product and/or (2) from
   analysis of their -verbosegc output as described in the Java
   Diagnostics Guide. Alternative advice is for the user to set
   -Xms100m and -Xmx1024m and tune as described earlier. If the
   user is still having OOM problems and their environment is as
   described in the APAR problem description please contact Java
   Service.
   
   
    
   
   

PROBLEM SUMMARY
 *  When running a 32-bit JVM on systems with large amounts of
   physical memory, a low native memory condition may occur. This
   may be reported as OutOfMemoryErrors with an appropriate
   message, or as failures in JNI code.
   
   If the maximum heap size is not specified on startup, the JVM
   attempts to reserve a large heap to ensure there is enough
   memory for the workload. By default the JVM queries the
   operating system to determine the amount of physical memory
   installed. It then attempts to reserve half of this memory as
   the Java heap. Under Win32 in particular, the result of this
   calculation is capped at 2G, since that is the largest
   theoretical amount of available memory on the majority of Win32
   systems. If the JVM is unable to acquire the entire amount
   calculated, it will reduce the size of the request and retry
   until it succeeds in reserving the heap.
   
   The problem arises when running on modern hardware with large
   amounts of physical memory. Most modern systems are capable of
   running under 64-bit mode, even if they are being used to run
   32-bit operating systems or 32-bit programs under a 64-bit
   operating system. Under these circumstances, the limit
   calculated (i.e. 50% of physical memory) may be extremely large.
   As a result, the JVM may succeed in reserving a significant
   portion of the address space, leaving very little memory for
   other allocations such as thread stacks or native memory blocks.
   
   To take an example, consider a 32-bit JVM is being run on a
   Win64 system with 4G of physical memory. The JVM queries the
   system for the amount of physical memory, divides it by 2, and
   caps the result at 2G. It then tries to reserve a Java heap 2G
   large. This will fail, since there will not be a 2G contiguous
   block available in the 32-bit address space (a consequence of
   the Windows memory architecture). The JVM will then try
   successively smaller heap sizes until it succeeds; say it
   manages to reserve a 1.7G heap. This leaves only about 300M for
   all other allocations the JVM requires, as well as any native
   memory used by the workload itself.
   
   If the workload loads a large number of classes, requires many
   threads, interacts with large blocks of native memory, or any
   combination thereof then it may experience low native memory
   conditions.
   
   
    
   
   

PROBLEM CONCLUSION
 *  The workaround is to tune the size of the heap to ensure that
   sufficient native memory remains after the Java heap is
   reserved. Returning to the example above, if the 1.7G heap
   proves to be an issue, consider specifying a maximum Java heap
   size of around 1.5G or even 1G depending on the native memory
   requirements of the workload. This is done by using the -Xmx
   command line option, e.g. -Xmx1600M or -Xmx1G.
   
   Please see the diagnostics guide for detailed information on the
   command line parameters used to tune the heap size.
   
   Alternatively, move to a 64bit sdk.
   
   Given that systems with significant amounts of physical memory
   are becoming common, future versions of the 32-bit JVM will be
   adapted to take this into consideration when calculating the
   default size of the Java heap.
   
   
    
   
   

TEMPORARY FIX

COMMENTS

APAR INFORMATION
 * APAR NUMBER
   IV10335
   
   
 * REPORTED COMPONENT NAME
   J9 COMMON CODE
   
   
 * REPORTED COMPONENT ID
   620700127
   
   
 * REPORTED RELEASE
   600
   
   
 * STATUS
   CLOSED DOC
   
   
 * PE
   NoPE
   
   
 * HIPER
   NoHIPER
   
   
 * SPECIAL ATTENTION
   NoSpecatt
   
   
 * SUBMITTED DATE
   2011-11-11
   
   
 * CLOSED DATE
   2011-11-20
   
   
 * LAST MODIFIED DATE
   2011-11-20
   
   

 * APAR IS SYSROUTED FROM ONE OR MORE OF THE FOLLOWING:
   
   
   
 * APAR IS SYSROUTED TO ONE OR MORE OF THE FOLLOWING:
   
   
   

FIX INFORMATION

APPLICABLE COMPONENT LEVELS