Title: IBM Adapter displays MQQueueManager.commit() failed when processing BO using MQ or JMS transports - United States

Text:
 TECHNOTE (TROUBLESHOOTING)

PROBLEM(ABSTRACT)
 While processing large numbers of messages or messages large in size while using MQ or JMS transports on any WebSphere Business Integration Adapter, a series of errors are thrown from WebSphere MQ Series V5.3, and specified events must be re-submitted to the broker from the adapter.

[Type: Error] [MsgID: 9061] [Mesg: Caught JMS error. Reason: javax.jms.JMSException: MQJMS2009: MQQueueManager.commit() failed.] ]
[System: Server] [Thread:TAS_TCPOUT_CDR/REQUESTJmsThreadPool.thread7 (#1936108157)] [Mesg:[Type: Error] [MsgID: 9062] [Mesg: JMS Exception Error code: MQJMS2009.
Exception message: com.ibm.mq.MQException: MQJE001: Completion Code 1, Reason 2003.] ] 
[System: Server] [Thread:TAS_TCPOUT_CDR/REQUESTJmsThreadPool.thread7 (#1936108157)] [Mesg: [Type: Fatal Error] [MsgID: 17056] [Mesg: Failed to establish connection to messaging system.] ] 

CAUSE
This issue can be caused by the MQ Series 5.3 hitting the end of its log space, and needing to remove the message from persistence. 

This can be caused by too small a log file page value for the amount of data being processed, or by long running transactions which are not intended to be long running. This can only be determined by investigating whether the same types of messages are regularly causing the error, and whether these messages are sitting in the queue longer than is expected in the system design.


RESOLVING THE PROBLEM
There are two possible fixes for this issue. You can either increase the log space, or determining if there are long lived events which ought not to be long lived. You can then fix this message flow to address the issue. 


Increasing Log File Size:
If the log files are not already at the maximum configurable size, they can be reconfigured to hold more space. If the files are already max out, the only option is to upgrade to MQ Series V6.0, which may not be supported for all brokers (at the time of this writing, version 6 was only supported for the adapter as stand-alone, and therefore was not usable with the ICS broker).

Log file sizes can be specified in the qm.ini file by setting the LogFilePages value. The maximum size to which it can be set is 16384, which when multiplied by 4096 bytes results in a file size of 64 MB. This will be the size of the log files created for new queue managers. This setting will not effect existing queue managers, which may require that the queue manager be deleted and recreated with all necessary queues. Take care to back up all messages before undertaking such a step. The value supplied (or its default) at the time of queue manager creation is used for the whole life of the queue manager.

The WebSphere Application Server Information Center suggests this parameter be set to its maximum. [http://publib.boulder.ibm.com/infocenter/wsphelp/topic/com.ibm.websphere.nd.doc/info/ae/ae/rprf_tuneindex.html]Also, as indicated in the WebSphere MQ Information Center, [http://publib.boulder.ibm.com/infocenter/wmqv6/v6r0/index.jsp?topic=/com.ibm.mq.amqzag.doc/fa12640_.htm] the maximum has been increased in MQ Version 6 to 65,535. [http://publib.boulder.ibm.com/infocenter/wmqv6/v6r0/topic/com.ibm.mq.amqzag.doc/fa12640_.htm]

This queue manager is, in the normal course of things, running more data through its logs, while long running transactions are in progress, than it has capacity to handle.


Desirable Log File Size:
Supposing the long-running transactions are unavoidable and correct per system design, the throughputs should be estimated again, and the queue manager should ideally be re-created using appropriately high numbers. Note that MQ will attempt to roll back transactions that span approximately 80 percent of the available log space that has been configured. If long-running transactions are normal for this system then the customer must calculate the expected system throughput of persistent data through MQ in that period of time. Then the log capacity should be chosen to be comfortably more than 1.25 (For Example: 1 / 0.8) times this amount of data.

A note on disk capacities: review the Application Server link above for their recommendations. If disk space allows, use maximum numbers for everything. There is no performance disadvantage to doing so. However this max - everything approach does not solve the problem if there is a coding error somewhere in the application layer whereby transactions fail ever to commit their calls