Title: IBM A ILMT API /api/sam/computer_systems query returns a SQL exception "\"END-OF-STATEMENT|where cs.is_curr8|<interval_qualifier>\"" error. - United States

Text:
 TECHNOTE (FAQ)

QUESTION
 An API /api/sam/computer_systems query returns a SQL exception "\"END-OF-STATEMENT|where cs.is_curr8|<interval_qualifier>\"" error. 

CAUSE
When using the ILMT API call /api/sam/computer_systems query returns a SQL exception error as follow:
{"error":"Java::ComIbmDb2JccAm::SqlException: An error occurred during implicit system action type \"3\". Information returned for the error includes SQLCODE \"-104\", SQLSTATE \"42601\" and message tokens \"END-OF-STATEMENT|where cs.is_curr8|<interval_qualifier>\".. SQLCODE=-727, SQLSTATE=56098, DRIVER=3.64.104"}

=========

The above API call actually executes the following SQL statement. Executing this SQL statement manually will return the same error.

db2 "SELECT COMPUTER_SYSTEMS.ID, COMPUTER_SYSTEMS.PARENT_ID, COMPUTER_SYSTEMS.TYPE, COMPUTER_SYSTEMS.OS, 
COMPUTER_SYSTEMS.HOST_NAME, COMPUTER_SYSTEMS.DNS_NAME, 
COMPUTER_SYSTEMS.IP_ADDRESS, COMPUTER_SYSTEMS.LAST_SEEN, 
COMPUTER_SYSTEMS.HARDWARE_MANUFACTURER, COMPUTER_SYSTEMS.HARDWARE_MODEL, 
COMPUTER_SYSTEMS.HARDWARE_SERIAL_NUMBER, 
COMPUTER_SYSTEMS.PROCESSOR_TYPE, COMPUTER_SYSTEMS.PROCESSOR_BRAND, 
COMPUTER_SYSTEMS.PROCESSOR_VENDOR, COMPUTER_SYSTEMS.PROCESSOR_MODEL, 
COMPUTER_SYSTEMS.PARTITION_CORES, COMPUTER_SYSTEMS.SERVER_PROCESSORS, 
COMPUTER_SYSTEMS.SERVER_CORES FROM SAM.COMPUTER_SYSTEMS AS 
COMPUTER_SYSTEMS ORDER BY COMPUTER_SYSTEMS.ID ASC" 


SQL0727N An error occurred during implicit system action type "3". 
Information returned for the error includes SQLCODE "-104", SQLSTATE "42601" and message tokens "END-OF-STATEMENT|where cs.is_curr8|<interval_qualifier>". 
SQLSTATE=56098 

===========

Even "db2 "select * from sam.computer_systems", it also returns the same error as well. 


ANSWER
An APAR IV72287 has been created. A local fix is to perform steps below: 


1) Login to the DB2 server with db2inst1 user ID (owner of the TEMADB or SUADB database). 
2) Create a computer_systems.sql script in your DB2 server where TEMADB or SUADB database is resided and add the following lines into this sql script: 


drop view sam.computer_systems; 
create view sam.computer_systems 
( 
id, 
computer_id, 
computer_remote_id, 
server_id, 
parent_id, 
type, 
last_seen, 
dns_name, 
host_name, 
ip_address, 
os, 
datasource_id, 
datasource_name, 
partition_cores, 
uuid, 
hardware_name, 
hardware_serial_number, 
hardware_manufacturer, 
hardware_type, 
hardware_model, 
processor_type, 
processor_brand, 
processor_vendor, 
processor_model, 
server_cores, 
server_processors, 
pvu_per_core 
) 
as 
-- current fake and real servers with cores 
with servers 
( 
server_id, 
server_processors, 
server_cores 
) 
as 
( 
select 
p.server_id, 
max(p.node_total_processors), 
max(p.no_processors_srv) 
from sam.computer_system sm 
join adm.current_hardware_inventory p on p.server_id = 
sm.server_id 
and sm.computer_id = 0 
group by p.server_id 
union 
all 
select 
server_id, 
server_processors, 
server_cores 
from 
sam.servers 
) 
select 
cs.id as computer_system_id, 
(case when cs.computer_id = 0 then null else cs.computer_id 
end) as computer_id, 
cd.remote_id, 
(case when cs.server_id=0 then null else cs.server_id end ) as 
server_id, 
cs.parent_id, 
(case when cs.type in (0,1) then 'host' else 'virtual' end ) 
as type, 
case when cd.last_seen is null then hw.last_seen else 
cd.last_seen end, 
cd.dns_name, 
case when cd.name is null then hw.hostname else cd.name end, 
case when cd.ip_address is null then hw.ip || chr(10) || 
chr(10) else cd.ip_address end, 
case when cd.os is null then hw.os_name else cd.os end, 
cd.datasource_id, 
cd.datasource_name, 
cast (p.no_processors_agt as decimal(7,2)) / 100 as 
partition_cores, 
(case when nc.platform in ('IA32ONWIN64', 'AMD64', 'amd64', 
'x86', 'i386', 'i586', 'i686', 'x86_64') then vvm.uuid else 
null end) as uuid, 
nc.tag, 
nc.name, 
nc.hardware_manufacturer, 
nc.hardware_type, 
nc.hardware_model, 
(case when p.processor_type is null then pt.type_disp_value 
else p.processor_type end), 
(case when p.processor_brand is null then pt.brand_disp_value 
else p.processor_brand end), 
(case when p.processor_vendor is null then 
pt.vendor_disp_value else p.processor_vendor end), 
(case when p.processor_model is null then pt.model_disp_value 
else p.processor_model end), 
(case when p.no_processors_srv is null then s.server_cores 
else p.no_processors_srv end), 
(case when p.node_total_processors is null then 
s.server_processors else p.node_total_processors end), 
(case when p.pvu is null then sct.pvu else p.pvu end) 
from sam.computer_system cs 
left join adm.computer_hw hw on cs.computer_id = 
hw.computer_id 
left join sam.computer_system_properties cd on cs.computer_id 
= cd.id 
left join adm.current_hardware_inventory p on p.agent_id = 
cs.computer_id 
left join adm.node nc on nc.id = cs.server_id 
left join servers s on cs.server_id = s.server_id 
left join adm.server_coretype_rel_current sct on sct.node_id = 
nc.id 
left join adm.processor_type pt on sct.processor_type_id = 
pt.id 
left join adm.agt_vm_rel avm on avm.agent_id = cs.computer_id 
and avm.end_time = '9999-12-31 23:59:59.997' 
left join adm.vm vm on vm.id = avm.vm_id 
and vm.type in (0,3) 
left join adm.virtual_vm_uuid vvm on vvm.vm_id = vm.id 
where cs.is_current = 1; 

3) Ensure to change the permission on this sql script to have executable permission for db2inst1 user to run. 

4) Then run the following db2 commands: 

- db2 connect to TEMADB or SUADB 
- db2 "select * from sam.computer_systems" to ensure you do see error. 
- db2 -f computer_systems.sql -o -t -z computer_systems.log 
- db2 "select * from sam.computer_systems" to ensure you see data from this view. 
5) Then verify if an API call to this view is now working.