Title: IBM Pass quotes and spaces in strings to functions in Rational Integration Tester - United States

Text:
 TECHNOTE (FAQ)

QUESTION
 How can strings containing quotes or spaces may be passed to functions, including custom functions, in IBM Rational Integration Tester (RIT)? 

CAUSE
The most common use case for passing a string to a function in RIT is sufficiently simple to ordinarily be coded by the software tester without reference to documentation. When a quote is required in any string or a space is required in an unquoted string then special handling rules must be applied. This document explains those rules.

ANSWER
Understanding the difference between quoted and unquoted strings 

When passing a string to a function or custom function in IBM Rational Integration Tester (RIT) the value supplied may be a simple value which does not required quotes, e.g. 

Indigo


This value will be passed to the function as a string of six characters. Alternatively the value may be placed in quotes: 

"Indigo"


This value will be passed to the function as a string of eight characters in which the first and last characters are the quotation marks themselves. All the built in functions which ship with RIT will remove these quotation characters prior to processing the string. The authors of custom functions are encouraged to do likewise. It is known that some existing custom functions do not remove such quotes. 

 

Passing a space within a quoted string 

To pass a space within a quoted string simply included the space: 

"Indigo Lights"


 

Passing a space within an unquoted string 

A space included in an unquoted string will be seen as a symbol delimiter. The characters before and after the symbol delimiter will be joined together and passed to the function. In effect no space will be passed to the function. For example if we supply this as a single function argument: 

Indigo Lights


Then the function will receive the value: 

IndigoLights


In order to pass the space to the function we can define a tag in the data store. If we name this tag space and type a single space into the default value field for the tag, then we can use this as the function argument: 

Indigo%%space%%Lights


And the function will receive the 13 character string: 

Indigo Lights


Where the value is completely pre-determined as above users may prefer to define the whole value as a default value for a tag. Spaces in default values for tags are not processed as symbol delimiters. 

 

Passing a quote within a quoted string 

Let us say we wish to supply a parameter value which itself contains quotes such as: 

"<img src="picture.jpg" \>"


If the above is provided as the function argument then the function will receive only the last part of the value, which is the five character string: 

" \>"


To included quotes within a quoted string we must escape the quotes with the "\" character: 

"<img src=\"picture.jpg\" \>"


and now the value received by the function will be: 

"<img src="picture.jpg" \>"


N.B. There is no special processing or escape sequence required for the literal "\" at the end of the string which is not considered to be an escape character since it does not precede a quote. 

 

Passing a quoted within an unquoted string 

Attempting to pass the same string without quotes, and using a space tag as explained above, the same string cannot be encoded as this: 

<img%%space%%src="picture.jpg"%%space%%\>


That will result in the function receiving the three character string (starting with a space): 

\>


Nor is it sufficient to escape the quotes in an unquoted string like this: 

<img%%space%%src=\"picture.jpg\"%%space%%\>)


That would result in the function receiving the string: 

"picture.jpg" \>)


The attentive reader may note that final bracket. Effectively the string opened with the first quote has not been terminated. The escape character for the first quote was not processed as an escape character since it was not within a quoted string. The second escape character is within a quoted string and so it escapes the quote and so the quoted string is not terminated. Consequently the rest of the function call has been included in the string. In the simplest case this is a closing bracket as presented above, but other values may appear. 

The solution is to define a tag in the tag data store named quote and to make the default value a single quote. Then this value may be used: 

<img%%space%%src=%%quote%%picture.jpg%%quote%%%%space%%\>


And the function will receive the string: 

<img src="picture.jpg" \>


 

Using ECMAScript to avoid the above issues 

Functions and custom functions can also be called from ECMAScript in all editions of IBM Rational Integration Tester (and in the forerunner GH Tester from version 5.4 upwards). The strings are then processed using ECMAScript and hence the above issues will not occur. Quotes within strings still need to be escaped in ECMAScript. 

For example scripting this value: 

"<img src=\"picture.jpg\" \\>"


Will result in the function receiving this value: 

<img src="picture.jpg" \>


Note that ECMAScript required us to escape the final \ in our string.