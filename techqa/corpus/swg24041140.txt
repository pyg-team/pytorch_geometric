Title: IBM How to create SQL workload and performance statistics from db.log files - United States

Text:
 DOWNLOADABLE FILES

ABSTRACT
 The Sumall utility is used to generate SQL workload and performance statistics from db.log files and is essential while investigating performance bottlenecks 

DOWNLOAD DESCRIPTION
A detailed description of the tool and its use can be found at following links: 

InfoSphere MDM Collaboration Server-side checks [http://www-01.ibm.com/support/knowledgecenter/SSWSR9_11.4.0/com.ibm.pim.trb.doc/pim_ref_mdmcsissue.html?cp=SSWSR9_11.4.0%2F6-9-0-1-7-2-1&lang=en]
Sumall utility to collect SQL workload and performance statistics [http://www-01.ibm.com/support/knowledgecenter/SSWSR9_11.4.0/com.ibm.pim.trb.doc/pim_con_trbmdmcsissues.html?cp=SSWSR9_11.4.0%2F6-9-0-0-1-5&lang=en]

The Sumall utility is bundled with IBM Infosphere MDM Collaboration Server, but depending on the release and fixpak, latest options and enhancements might not be available yet. This download provides latest version of the tool, which can be used to parse db.log files from all IBM Infosphere MDM Collaboration Server releases.

The Sumall utility attached to this document is of version 3.5 and provides following options:

Usage:
java -jar Sumall.jar
[leng=n characters] [delayed] [printsql] [cvon] [cleanoff]
[fromtime="yyyy-MM-dd HH:mm:ss[,SSS]"] [totime="yyyy-MM-dd HH:mm:ss[,SSS]"]
[threadname="<threadname>"] [threadlist] [version] [h|help] <db.log files>
Options
h|help: print usage info

leng: Default Value = 70. It defines how many characters from the beginning of the
SQL are used for statistical aggregation

printsql: Extract SQLs and its runtime in sequential order, print one line per SQL

delayed: Only SQLs marked as delayed will be analyzed

cvon: Use to turn on calculation of coefficient of variation (cv)
It provides a normalized metric how much single runtimes vary compared to average runtime

cleanoff: When set, parameter values will not be replaced in Dynamic SQL strings. Depending on leng
parameter setting, this might cause Dynamic queries of the same type to be reported on
separate lines, in case individual parameter values are contained in the first n (leng)
Characters. This might be desired if you want to investigate Dynamic queries with their
actual parameter values

fromtime: Analyze only SQLs with a timestamp > fromtime, required input format: yyyy-MM-dd HH:mm:ss

totime: Analyze only SQLs with a timestamp < totime, required input format: yyyy-MM-dd HH:mm:ss

threadname: SQLs will be analyzed only for the provided thread. Use a threadname as listed by 
threadlist option

threadlist: Print SQL statistics per thread ordered by total SQL runtime

version: Print current version


Some sample output and explanations:
[/support/docview.wss?uid=swg24041140&aid=1] [/support/docview.wss?uid=swg24041140&aid=1]

PREREQUISITES
This program requires JRE/JDK 1.6 or later version. In addition, you must have read permission to Sumall.jar file and the db.log files you want to process. 

INSTALLATION INSTRUCTIONS
Copy the Sumall.jar file to the server / workstation where you intend to process db.log files. 

It is invoked by running:


 * java -jar <path>/Sumall.jar <path>/db.log* [options]
 * 
 * e.g.
 * 
 * java -jar $TOP/tools/Sumall.jar $TOP/logs/appsvr_hostname/db.log threadlist


To see the options, simply run: 
 * java -jar <path>/Sumall.jar

Sumall.jar [/support/docview.wss?uid=swg24041140&aid=3]Sumall.jar [/support/docview.wss?uid=swg24041140&aid=2]



TECHNICAL SUPPORT
 This program is provided AS IS without warranty or support of any kind, whether express or implied.