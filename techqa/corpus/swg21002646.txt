Title: IBM Printing images with an overlay to AFP printers - United States

Text:
AFP TECHNOTE (FAQ)

QUESTION
 Printing images with an overlay to AFP printers 

ANSWER
Hello, 

Need a little help with retrieval of MO:DCA™ objects containing MPO and
IPO overlay tags.

(1) When we do an IPFAF Version 2.2.1 API "GETOBJ" of an object that needs an
overlay, does ODM Version 2.2 send us the overlay along with the primary object? We
have a print application that reformats MO:DCA objects to an AFP print stream
and uses CICS® spoolwrites to send to a network printer. Our objective is to
get objects having a form overlay to print in the same manner.

Answer: When ODM is sending an object (object class x'8080'), it sends the object
to the workstation first and then sends the overlay to the workstation. 
The workstation program is responsible to send them to the display.
As for the GETOBJ API in IPFAF, the API does not have parameter for getting 
the overlay. The GETOBJ API is using IODM SRETOBJ API to send the request to 
the IODM. IODM will sends the object back to the IPFAF and the overlay is not 
sent IPFAF. Therefore, you need to make a second request for the form overlay.
Note: the IODM SRETOBJ does give you an option to retrieve the overlay at the
same time. You can use IODM SRETOBJ instead of GETOBJ API in your 
application. 

(2) If we must obtain the overlay object via a separate request, or if it is
received separately from the primary MO:DCA structure, how could we merge it
into the data to print, as IWP does for display?

Answer: IWPM does not merge the images. I understand that it sends the image and 
then sends the overlay to the display monitor. As for the printing, I am not know about the APF data stream. You might have to convert the image MODCA and the overlay MODCA into a single APF data stream. I know that you can merge the image MODCA and the overlay MODCA into a single MODCA file. 


There are the publications:
SC31-6802 MODCA reference
SC31-6803 PTOCA reference
SC31-6805 IOCA reference 

(3) One minor detail concerning this is that we want to know how ODM handles
an object whose Object Class in FAF is set to x'8080' but does not actually
contain a reference to an overlay? We thought this would do no harm, and we
could avoid having to distinguish in FAF Update between x'8000' and x'8080'
objects, based on Formnum or something. Would ODM send only the primary
object if there is no request for overlay within the MO:DCA, even if the
GETOBJ Object Class is x'8080'?

Answer: The bit 8 in the object class is the only indication that an object 
contains an reference to an external object. If an object class is x'8080' and object is 
sent down to the workstation, in IODM Version 3.1, an error message will be generated 
by IODM because IODM will attempt to locate the overlay (in IODM Version 2.2, no error 
message). In the case of GETOBJ API, it does not matter because IODM is not looking for
an overlay. The problem you have is that how you handle the images that you 
want display and print! 

Note: FWA V221 batch storage process does not support the object class 
"8080". The valid object class for V1R2 input files are X'4000' , X'4080', X'8000' and X'8020'. The valid object class for V2R1.1 input files are X'4000', X'4080', and X'8000'. For the detail please refer to the section of VALIN file Validation, page 123, IPFAF FWA APG 221.


You are correct, the overlay name is O1HCFA. TMSTEOB was a name we used
for our testing. Any of the recent files will have O1HCFA in its contents.

The only contents of the MPO and IPO tags are the 8 characters used as the
overlay name and the length found at the beginning of the tag.

Actually ODM recognizes that an overlay needs to be sent to IWP. ODM sends
the overlay to IWP. IWP buffers all overlays. IWP looks at the object and if an overlay tag is
found, looks within its overlays that have been received to see if an object of that name has been buffered.

That's really all that I know. Dakota actually did the work that puts the
overlay tags into the MO:DCA. If you need help, ...can get a contact from Dakota.

As I mentioned in my voice mail, I need some guidance on the format
of the MO:DCA tags for the request of the overlay object in the VALIN blob.

I have looked at the x'D3ABD8' and x'D3AFD8' tags in one of the early test
VALIN files that used overlay. They are followed within a few bytes by
the 8-position literal 'TMSTEOB', which I suppose is the Object Name of the
overlay (I thought it was O1HCFA?). We need to understand the structure
of these tags and their parameters in order to handle the MO:DCA-to-AFP
conversion we do in our Image Print program CS98P400.

We were going to use a FORMDEF to apply a hand-drawn form to the objects
sent to our coded-data printers, but hand-drawn forms will be hard to
maintain, and we would have to switch to No Form after the first page of each object
in the AFP stream. Coupled with the desire to continue using percentage
reduction of our objects so that we can put a small banner area at the top
of the page, I think it would be a better implementation to parse the MO:DCA
as we do now, and when we hit an overlay triplet, branch to a subroutine that
fetches the overlay object and parses it into AFP, too, if necessary. IWP
must do something like this in the background, right? It doesn't know at
first that there is going to be an overlay request, so it must have to
request the overlay from ODM and then "apply" it. The question is, what does
"apply" involve?

If you can give me a quick course on this, great. I know there is a red
book that discusses MO:DCA, but I think I last saw it when I worked in Buffalo,
N.Y.

I appreciate any help you are able to give on this. Thanks.