Title: IBM Rulesets are parsed at each execution on Java SE Rule Execution Server - United States

Text:
J2SE POJO RES JRules TECHNOTE (TROUBLESHOOTING)

PROBLEM(ABSTRACT)
 My rulesets are parsed at each execution on Rule Execution Server in Java SE mode, with a significant loss of performance. 

SYMPTOM
Rulesets are parsed at each execution of the rules. 

The logs may show the following traces, indicating that the XU is initialized at every execution: 

 * 
 * ilog.rules.res.xu.log.internal.IlrLogHandler write 
 * 
 * INFO: Logging started - 2012-11-20 12:05:32
 * 
 * 
 * ilog.rules.res.xu.log.internal.IlrLogHandler write 
 * 
 * INFO: JDK Logging level is set to: INFO.
 * 
 * 
 * ilog.rules.res.persistence.impl.jdbc.IlrGenericRepositoryDAO setConfigParameters
 * 
 * INFO: XOM repository set in database persistence mode: ...
 * 
 * 

Also, in the case of sequential or Fastpath algorithm, the logs may show numerous messages such as the following one: 
 * 
 * [Unloading class ilog.rules.engine.sequential.generated.
   C626f72756c65666c6f772e757361676574726561746d656e742e636f6c6c65637454726
   561746d656e74735f46696e645f54726561746d656e745f52756c655f49645f30]
   


CAUSE
The issue might be that you are creating a new instance of IlrJ2SESessionFactory for each client execution. 

Section "Decision Server Rules V7.5 > Managing business rule execution in Rule Execution Server > Configuring Rule Execution Server > Using connection pooling [http://pic.dhe.ibm.com/infocenter/dmanager/v7r5/topic/com.ibm.dserver.res/Content/Business_Rules/_pubskel/Infocenter_Primary/ps_DS_Rule_Execution_Server1574.html]" reads that "Each Java SE factory that you create generates one XU and, therefore, one engine pool."

Pooling engines allows you to share resources and rulesets across clients. Therefore, recreating the session factory at each execution increases the CPU and memory consumption because the session factory creates and destroys a XU pool each time and does not allow to share engine and ruleset resources across clients.

An additional cause might be that the default or current engine pool settings and other Rule Execution Server configurations are not optimal for your use of Rule Execution Server.


ENVIRONMENT
Rule Execution Server in Java SE mode



RESOLVING THE PROBLEM
Make sure to create an instance of IlrJ2SESessionFactory such that it is shared across clients and rule executions. For example, keep a static reference to the session factory or implement a singleton design pattern to hold a shared reference to the session factory. 

To learn more about how to set up Rule Execution Server and how to size engine pools appropriately with respect to your rulesets and the load of client requests, see the Information Center pages listed below.

RELATED INFORMATION
#Tuning size of RES engine pool [http://www.ibm.com/support/docview.wss?uid=swg21400803]
Improve performance of Rule Execution Server [http://www.ibm.com/support/docview.wss?uid=swg21589513]
XU configuration properties for Java SE [http://pic.dhe.ibm.com/infocenter/dmanager/v8r5m1/topic/com.ibm.odm.dserver.rules.res.managing/topics/tsk_res_xu_configprop_jse.html]
Using Java SE factories [http://pic.dhe.ibm.com/infocenter/dmanager/v8r5m1/topic/com.ibm.odm.dserver.rules.res.developing/topics/tpc_res_dev_j2se_fact_intro.html]





Cross reference information Segment Product Component Platform Version Edition Business Integration WebSphere ILOG JRules Modules:Execution Server (BRES / RES) Platform Independent 7.1, 7.0