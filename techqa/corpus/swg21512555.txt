Title: IBM WebSphere Adapter for FlatFile throws NullPointerException during multi-threaded outbound append operations - United States

Text:
NPE Flat File parallel file lock append appendToFile appendToFile TECHNOTE (TROUBLESHOOTING)

PROBLEM(ABSTRACT)
 WebSphere Adapter for Flat File outbound adapter intermittently throws Null pointer exception while performing append operation. There is no problem in single event mode, but when performing multi-threaded outbound requests that append to the same file, an intermittent exception is thrown. 

SYMPTOM
Error message: 

0000006e SystemErr R java.lang.NullPointerException 

0000006e SystemErr R at com.ibm.j2ca.flatfile.util.FlatFileUtil.appendToFile(FlatFileUtil.java:525)


CAUSE
Support for multi-threading when using WebSphere Flat File adapter is available when request are coming from different parallel threads to perform operation on different records but not the same record(s). Modifying the same record using multiple threads is not recommended.

WebSphere Adapter for Flat Files in outbound mode does not maintain internal state of file access attempts across threads. This means that the adapter cannot protect against the possibility of multiple file locks on the same file at the same time. 

The Adapter is entirely dependent on the underlying file system for this. If the file system does not enforce file locking properly then adapter's updates can get corrupted.


RESOLVING THE PROBLEM
There are several possible solutions to this problem: 

1) If each event was being placed in a separate file, the adapter has no problem handling as many parallel outbound requests as might be desired so long as each outbound process uses a distinct file name. A user can configure the wrapper object to specify different file names for different request for parallel threads or use "generate unique file name" to create separate files in each thread. 

2) If many threads in a customer logic flow need to write to the same file, the user can use WPS 

sequencing so that the request can come in sequence to perform the operation on the same record. This will remove any parallel access to the same file name, but also would have significant performance impact on the logic flow since it causes the threads to run in a single threaded manner. 

3) Re-factor the application using queues such that a JMS import binding is used to place message to a queue from each of the parallel threads (instead of appending to a file using the WebSphere Adapter for Flat Files). In another module create a JMS export module to get the message and make the call to the adapter. This second module would operate in a single threaded manner, but do nothing but place files from a JMS queue on the file system. This should increase performance, since the logic processing threads will no longer need to wait for access to the local file.