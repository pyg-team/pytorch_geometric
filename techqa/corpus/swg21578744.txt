Title: IBM WebSphere Application Server Is Leap Year Compliant - United States

Text:
 TECHNOTE (TROUBLESHOOTING)

PROBLEM(ABSTRACT)
 We have had questions from clients planning for leap year years (containing February 29th) asking if WebSphere Application Server Leap Year Compliant, and if any problems are expected stemming from WebSphere Application Server or associated IBM products due to Leap Year. 

There are no known or expected problems.
(Details below) 

RESOLVING THE PROBLEM
WebSphere Application Server and the SDK are leap year compliant. IBM Java (SDK / JDK) has been doing leap year testing/verification since 1996, including the non-leap year 2000 without a problem. Basically leap years in Java are explicitly supported by the GregorianCalendar class - that is it's function - and this class is tested with every release of Java as it is part of Java's core functionality. So any Java code which uses the GregorianCalendar class will behave correctly. 

WebSphere Application Server performs no specific leap year testing since it runs on top of the SDK which is compliant, and uses function from it. We are not aware of any issues in the past with WebSphere Application Server associated with leap year. 

From a JDK perspective, Java applications which use the GregorianCalendar class will be leap-year compliant - see the spec at: 

(Same info in the links for the various JDK's) 

http://docs.oracle.com/javase/6/docs/api/java/util/GregorianCalendar.html [http://docs.oracle.com/javase/6/docs/api/java/util/GregorianCalendar.html] 

http://docs.oracle.com/javase/7/docs/api/java/util/GregorianCalendar.html [http://docs.oracle.com/javase/7/docs/api/java/util/GregorianCalendar.html]

http://docs.oracle.com/javase/8/docs/api/java/util/GregorianCalendar.html [http://docs.oracle.com/javase/8/docs/api/java/util/GregorianCalendar.html] 


Specifically: 

"The only difference between the Gregorian and the Julian calendar is the leap year rule. The Julian calendar specifies leap years every four years, whereas the Gregorian calendar omits century years which are not divisible by 400." In other words the Gregorian Calendar follows modern leap years. The correct operation of the class is tested by the Java Compliance Kit (JCK) which is run against every release of the JVM. So Java applications would need to assert that they are using GregorianCalendars to claim leap-year compliance.