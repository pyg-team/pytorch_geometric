Title: IBM Enabling a Client Trace for a Web Services Client - United States

Text:
SOA; WDSC; WDSCi TECHNOTE (TROUBLESHOOTING)

PROBLEM(ABSTRACT)
 This document details the ways a client trace can be enabled for Web Services. 

RESOLVING THE PROBLEM
This document details the ways a client trace can be enabled for Web Services. 

There are two ways to enable a Web Services Client Trace:

1. Add directives to config file

The client engine looks for the configuration file etc/axiscpp.conf. By default, if the AXISCPP_DEPLOY environment variable is not set to the directory containing the etc directory, the default AXISCPP_DEPLOY path is /qibm/proddata/os/webservices/v1/client. It is recommended that if you are going to set properties in the property file, copy the /qibm/proddata/os/webservices/v1/client/etc directory to your own directory because any changes to the /qibm/proddata/os/webservices/v1/client/etc/axiscpp.conf will be lost when PTFs are loaded.

To enable tracing, one needs to set the ClientLogPath property to the path to log file (if it does not exist, one will be created). In addition, LogFilter property can be set to filter the trace records so you can isolate a component. The filter is a semicolon delimited string of possible filters. Possible filters include the following:

o stub - show trace records generated by stubs
o engine - show trace records generated by engine
o parser - show trace records generated by parser
o transport - show trace records generated by transport
o noEntryExit - do not show entry/exit trace records

The default filter is stub;engine;parser;transport. For example, if one wanted to enable client trace and show only transport trace records and no entry/exit trace records, the following would need to be specified:

ClientLogPath:/tmp/axis.log
LogFilter:transport;noEntryExit;

2. Programmatically

One can also programmatically enable trace and write to the trace. From C++, you can do so using the following static methods on the Axis class (defined in Axis.hpp header file):

static int startTrace(const char* logFilePath, const char *logFilter=NULL);
static void stopTrace();
static void writeTrace(AXIS_TRACE_TYPE type, const char* functionName, const char * fmt, ...);

To start trace in C++, you would do something like: 

Axis::startTrace("/tmp/axis.log", "transport;noEntryExit");

From within C, you would use the following functions (prototypes in Axis.h header file):

int axiscAxisStartTrace(const char* logFilePath, const char *logFilter);
void axiscAxisStopTrace();
void axiscAxisWriteTrace(AXISC_TRACE_TYPE type, const char* functionName, const char * fmt, ...);

To start trace in C, you would do something like: 

axiscAxisStartTrace("/tmp/axis.log", "transport;noEntryExit");

See the header files for more information (header files are in /qibm/proddata/os/webservices/v1/client/include/axis).

A typical trace record will look like the following (below are entry/exit trace records):

[13/11/2008 15:55:55:509] 00007860 transport > HTTPTransport::processHTTPHeader():
[13/11/2008 15:55:55:510] 00007860 transport < HTTPTransport::processHTTPHeader():

It includes a timestamp, a thread ID, the component that is doing the trace, and a one-character field indicating Trace type:

o > (entry
o < (exit)
o X (exception)
o D (debug)

and the method/function name. After which there will be additional trace data.

With tracing enabled, you will know exactly where an exception is being thrown from. A typical trace record for when an exception is thrown is as follows (on one line):

[13/11/2008 15:55:55:510] 00007860 transport X HTTPTransport::readHTTPHeader(): 
Line=1851: File=/home/amra/axis/L1.1.0/src/ws-axis/c/src/transport/axis3/HTTPTransport.cpp: 
HTTPTransportException - SERVER_TRANSPORT_HTTP_EXCEPTION: Server sent HTTP error: 'Not Found'

And finally, you can dump out the request/response messages by enabling transport trace (which is enabled by default). Here is a sample:

[13/11/2008 15:55:55:280] 00007860 transport D HTTPChannel::writeBytes():
POST /axis HTTP/1.1
Host: 127.0.0.1:13260
Content-Type: text/xml; charset=UTF-8
SOAPAction: ""
Content-Length: 393


[13/11/2008 15:55:55:280] 00007860 transport < HTTPChannel::writeBytes(): Exit with integer value
of 122
[13/11/2008 15:55:55:281] 00007860 transport > HTTPChannel::writeBytes():
[13/11/2008 15:55:55:282] 00007860 transport D HTTPChannel::writeBytes():
<?xml version='1.0' encoding='utf-8' ?>
<SOAP-ENV:Envelope
xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/ [http://schemas.xmlsoap.org/soap/envelope/]"
xmlns:xsd="http://www.w3.org/2001/XMLSchema [http://www.w3.org/2001/XMLSchema]"
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance [http://www.w3.org/2001/XMLSchema-instance]">
<SOAP-ENV:Body>
<ns1:div xmlns:ns1="http://soapinterop.org/wsdl">
<ns1:arg_0_0>10</ns1:arg_0_0>
<ns1:arg_1_0>5</ns1:arg_1_0>
</ns1:div>
</SOAP-ENV:Body>
</SOAP-ENV:Envelope>

.
.
.
[13/11/2008 15:55:55:508] 00007860 transport D HTTPChannel::readBytes():
HTTP/1.1 404 Not Found
Server: WebSphere Application Server/5.1
Content-Type: text/html;charset=UTF-8
Content-Language: en-GB
Transfer-Encoding: chunked

21
Error 404: File not found: null 0


[13/11/2008 15:55:55:509] 00007860 transport < HTTPChannel::readBytes(): Exit with integer value
of 203

 


Cross reference information Segment Product Component Platform Version Edition Operating System IBM i 6.1 Operating System IBM i 7.1 Operating System IBM i 7.2 Operating System IBM i 7.3 
HISTORICAL NUMBER
 531849836