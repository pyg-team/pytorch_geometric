Title: IBM MustGather: Out of Memory & Suspected Memory Leak for MDM version 10.1 or earlier - United States

Text:
MustGatherDocument; mustgather; mustgather; mustgather; Read first; readfirst; must gather; component; troubleshooting; trouble shooting; TopTenDocument; MustGatherReadFirstDocument; Performance; Slow; Debug TECHNOTE (TROUBLESHOOTING)

PROBLEM(ABSTRACT)
 Collect troubleshooting data for memory related issues for InfoSphere Master Data Management (MDM) Standard Edition (SE) or Advanced Edition (AE). Gathering this information before calling IBM support will help familiarize you with the troubleshooting process, save you time and improve time to resolution. 

RESOLVING THE PROBLEM


Purpose of this document: To provide instructions for data collection during a performance test for InfoSphere MDM. Collecting data for Out of Memory errors with IBM InfoSphere Master Data Management (MDM) Server Advanced Edition (AE) or Standard Edition (SE). Gathering this MustGather information before calling IBM Support will help familiarize you with the troubleshooting process and save you time. 






The information in this technote is in addition to MustGather: Read first Performance data collection for InfoSphere MDM [http://www.ibm.com/support/docview.wss?uid=swg21700894] Gathering general information section. 




 Section 1: JVM Memory Usage/GC logs 

The GC logs are helpful to understand heap memory usage over a period of time, overhead of GC etc. 

For an application running under WebSphere Application Server, Enable verbose GC using the WebSphere Application Server Administrator console. 
ApplicationServer->YourServer ->Process definition->Java Virtual Machine->Java verbose GC (enabled)

In this case, the native_stderr.log contains the GC logs. This can be found in the same directory as other JVM logs (e.g. SystemOut.log)

For a standalone java application (e.g. BatchProcessor client for MDM) the GC logs can be generated by adding “–verbose:gc” option for JVM command line. The GC logs by default are written to stderr stream. These can be diverted to a specific log file by supplying JVM options. For example “-Xverbosegclog:/SOME_PATH/batch_gc.log” would save the logs to the specified path.


 captured at a point during execution. For example, the information can be about the operating system, the application environment, threads, stacks, locks, and memory. By default, a Javadump occurs when the JVM terminates unexpectedly. A Javadump can also be triggered by sending specific signals to the JVM. Javadumps are human readable.


Section 2. JVM Thread dumps (Javacore) 

Javadump produces files that contain diagnostic information related to the JVM and a Java application

To generate the javacore (but no heapdump) at user signal, add the JVM option -Xdump:java to java command line (generic JVM arguments on WAS admin console)

To signal the JVM, you can use the following on AIX and Linux 

kill -3 <PID of JVM Process>

By default, the javacore files are generated under the <PROFILE_HOME> directory. For example. /usr/IBM/WebSphere/AppServer/profiles/AppSrv01/




 Section 3: JVM Heapdumps 

Heapdumps contains a dump of live objects in the java heap at that moment. This dump is stored in a Portable Heap Dump (PHD) file, a compressed binary format. By default, a Heapdump is produced when the Java heap is exhausted. A hepdump can also be triggered by sending specific signals to the JVM. 

To generate the heapdump (and javacore) at user signal, add the JVM option -Xdump:heap to java command line (generic JVM arguments on WAS admin console)

To signal the JVM, you can use the following on AIX and Linux 

kill -3 <PID of JVM Process>

By default, the heapdumps are generated under the <PROFILE_HOME> directory. For example. /usr/IBM/WebSphere/AppServer/profiles/AppSrv01/



Section 4: MDM Service Activity Monitor (SAM) 

SAM is a very lightweight feature, to get high level picture of every transaction in MDM Server. By default, the output goes to transactiondata*.log. The default location is the same directory as the WebSphere Application Server SystemOut.log file. SAM logs have one line per transaction, with comma separated entries. To enable SAM do the following

1. Change configelement table
update configelement set value='true',LAST_UPDATE_DT=current_timestamp where name in ('/IBM/DWLCommonServices/Report/Listener/enabled','/IBM/DWLCommonServices/Report/Broadcaster/enabled')

2. Change the properties files in properties.jar. You would need to extract the files in a temp folder, edit the files as specified below, and then recreate the jar file.

Locate the properties.jar 

USER_INSTALL_ROOT/installedApps/<MyCell>/<My_Server.ear>/properties.jar

There are two properties inside the jar file that need to be changed for the following purpose:

a. Modify the file called sam.properties for fields to be logged. For example, the "sam.reports" entry in sam.properties should be set as follows for performance troubleshooting (Note: the following is ONE line, no carriage returns): 

sam.reports=transactionName,requestName,requesterName,clientTransactionName,sessionId,transactionId,requestID,responseSize,transactionStatus,startDateTime,endDateTime,executionTime,sam_NumberOfInsert,sam_TotalTimeOfInsert,sam_MostExpensiveInsertTime,sam_NumberOfUpdate,sam_TotalTimeOfUpdate,sam_MostExpensiveUpdateTime,sam_NumberOfDelete,sam_TotalTimeOfDelete,sam_MostExpensiveDeleteTime,sam_NumberOfSelect,sam_TotalTimeOfSelect,sam_MostExpensiveSelectTime,sam_SuspectProcessingFlag,sam_SuspectPoolSize,sam_NumberOfA1,sam_NumberOfA2,sam_NumberOfB,sam_NumberOfC

b. Make changes for location and size of the log files. The out of box settings are generally sufficient for normal use. If you expect too may transactions during your tests, then increase the logging space. The log settings for this file are in Log4J.properties under properties.jar file.

log4j.appender.transactionData_file=org.apache.log4j.RollingFileAppender
log4j.appender.transactionData_file.Encoding=UTF-8
log4j.appender.transactionData_file.Threshold=ALL
log4j.appender.transactionData_file.layout.ConversionPattern=%m%n
log4j.appender.transactionData_file.layout=org.apache.log4j.PatternLayout
log4j.appender.transactionData_file.File=../../../logs/MY_SERVER/transactiondata.log
log4j.appender.transactionData_file.MaxBackupIndex=10
log4j.appender.transactionData_file.MaxFileSize=100MB
# The next line controls the level of output for the TransactionDataListener logger
# [ALL, DEBUG, INFO, WARN, ERROR, FATAL, OFF]
log4j.logger.com.dwl.base.report.mbean.TransactionDataListener=INFO, transactionData_file

3. InfoSphere MDM restart is required for step 1 and 2 above to be effective. 



SECTIONS BELOW ARE OPTIONAL 


Section 1: DB Layer Monitoring 

A. Applicable to DB2 on LUW
Collect a snapshot for the test duration, by running the commands as below on a db2 prompt
1. Start the monitoring 
db2 connect to MYDB
db2 -v reset monitor all
db2 -v update monitor switches using bufferpool on sort on lock on statement on table on uow on timestamp on
db2 -v get monitor switches

2. Run you tests

3. After the tests are over, run the following 
db2 -v get snapshot for all on MYDB > MySnapShot.out
db2 -v update monitor switches using bufferpool off sort off lock off statement off table off uow off timestamp off
db2 -v terminate

B. Applicable to DB2/Z
1. Collect SMF reports basic accounting class 1,2,3,7,8 and statistics class 1,3,4,5,6
Note: The accounting and statistics traces do not have real overhead and recommended to be turn on even in production environment.

db2 accounting classes 1,2,3,7,8 long format report
-START TRACE(A) CLASS(1,2,3,7,8) DEST(SMF)
db2 statistics classes 1,3,4,5,6 report
-START TRACE(S) CLASS(1,3,4,5,6) DEST(SMF)

2. RMF reports – I/O details and CPU utilization (RMF summary report)

3. To see the text of the SQL statements and associated statistics for those dynamic SQL statements, please enable dynamic statement caching first on your DB2 for z/OS subsystem by setting zparm CACHEDYN=YES, then start IFCID 316, 317, and 318. 

DNC collection instructions:
a. START TRACE(P) CLASS(30) IFCID(316,317,318) DEST(SMF)
b. run test
c. check and clean Dynamic cache tables 
DELETE FROM DSN_STATEMENT_CACHE_TABLE
d. extract all statements from the global cache and to dump the statistics information to DSN_STATEMENT_CACHE_TABLE
EXPLAIN STMTCACHE ALL 
e. select to the file inserted rows from the DSN_STATEMENT_CACHE_TABLE table
f. Important: Stopping the trace will reset all statistics. It is important to complete the steps 3-5 before turning off the monitor trace.
g. STOP TRACE(P) CLASS(30) IFCID(316, 317, 318)

C. Applicable to Oracle
1. Collect AWR report covering the entire duration for main test (only).



RELATED INFORMATION
 MustGather: Read first Performance data collection for [http://www-01.ibm.com/support/docview.wss?uid=swg21700894]




PRODUCT ALIAS/SYNONYM
 Master Data Management
MDM
InfoSphere IBM Master Data Management
InfoSphere IBM Master Data Management Server
MDM Server