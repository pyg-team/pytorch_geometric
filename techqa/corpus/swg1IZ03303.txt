Title: IBM IZ03303: OUT OR INOUT PARAMETERS OF SQL PROCEDURE NOT UPDATED            IN CALLER IF PROCEDURE EXITS WITH SQLCODE 100 - United States

Text:
AIX  A FIX IS AVAILABLE
DB2 UDB Version 8.1 FixPak 16 (also known as Version 8.2 FixPak 9 ) [http://www-01.ibm.com/support/docview.wss?uid=swg24018266]


SUBSCRIBE
You can track all active APARs for this component.



APAR STATUS
 * CLOSED AS PROGRAM ERROR.
    
   
   

ERROR DESCRIPTION
 *  ABSTRACT: OUT or INOUT parameters of SQL procedure not updated
   in caller if procedure exits with SQLCODE 100
   
   ERROR DESCRIPTION
   If the last statement executed in an SQL procedure results in a
   'no data' condition (SQLCODE 100, SQLSTATE '02000'), any
   parameters of the stored procedure marked with intent OUT or
   INOUT will not be updated in the calling procedure.  For
   example:
   
   create table T(C1 integer) %
   
   create table Report(Line char(80)) %
   delete from Report %
   
   create procedure INNER(OUT S char(80))
   language SQL
   begin
     declare N1 integer;
     set S = 'IT WORKED';
   
     select C1 into N1 from T where 1=0;
   end %
   
   create procedure OUTER
   language SQL
   begin
     declare OuterS char(80) default 'BROKEN';
     call INNER(OuterS);
     insert into Report(Line) values OuterS;
   end %
   
   call OUTER %
   select * from Report %
   
   In this scenario, the value of OuterS should be set to 'IT
   WORKED' after the call to INNER.  However, the value 'BROKEN'
   will be inserted into table REPORT instead.
   
   SYMPTOM KEYWORD
   SQL procedure parameter not found no data out inout updated
   
   
    
   
   

LOCAL FIX
 *  Insert an additional SQL statement at the end of your stored
   procedure so that the SQLSTATE '02000' condition is cleared
   before the procedure exits.  If the calling procedure does not
   explicitly test for the presence of a 'no data' condition, a
   simple
   
    RETURN 0;
   
   statement at the end of the stored procedure will avoid the
   problem.
   
   If the calling procedure needs to test for a 'no data'
   condition, you will need to communicate that to the caller by a
   different means than SQLCODE or SQLSTATE.  For example, you
   could use a separate OUT parameter to indicate whether a 'no
   data' condition has occurred.  This example uses a condition
   handler to set the parameter appropriately:
   
   create procedure INNER(OUT S char(80), OUT NoData integer)
   language SQL
   begin
     declare N1 integer;
   
     declare continue handler for NOT FOUND
     begin
       set NoData = 1;
     end;
   
     set NoData = 0;
     set S = 'IT WORKED';
   
     select C1 into N1 from T where 1=0;
   end %
   
   The calling procedure can then test the value return through the
   'NoData' parameter to determine whether a 'no data' condition
   occurred.  The RETURN 0 statement is not required in this
   example, because SQLCODE and SQLSTATE are cleared by the SET
   statement in the condition handler.
   
   
    
   
   

PROBLEM SUMMARY
 *  User's affected: All
   Problem summary: OUT OR INOUT PARAMETERS OF SQL PROCEDURE NOT
   UPDATED IN CALLER IF PROCEDURE EXITS WITH SQLCODE 100
   Problem details: If the last statement executed in an SQL
   procedure results in a
   'no data' condition (SQLCODE 100, SQLSTATE '02000'), any
   parameters of the stored procedure marked with intent OUT or
   INOUT will not be updated in the calling procedure.
   
   
    
   
   

PROBLEM CONCLUSION
 *  First fixed in v8fp16, s080111
   
   
    
   
   

TEMPORARY FIX
 *  Insert an additional SQL statement at the end of your stored
   procedure so that the SQLSTATE '02000' condition is cleared
   before the procedure exits.  If the calling procedure does not
   explicitly test for the presence of a 'no data' condition, a
   simple
   
    RETURN 0;
   
   statement at the end of the stored procedure will avoid the
   problem.
   
   If the calling procedure needs to test for a 'no data'
   condition, you will need to communicate that to the caller by a
   different means than SQLCODE or SQLSTATE.  For example, you
   could use a separate OUT parameter to indicate whether a 'no
   data' condition has occurred.  This example uses a condition
   handler to set the parameter appropriately:
   
   create procedure INNER(OUT S char(80), OUT NoData integer)
   language SQL
   begin
     declare N1 integer;
   
     declare continue handler for NOT FOUND
     begin
       set NoData = 1;
     end;
   
     set NoData = 0;
     set S = 'IT WORKED';
   
     select C1 into N1 from T where 1=0;
   end %
   
   The calling procedure can then test the value return through the
   'NoData' parameter to determine whether a 'no data' condition
   occurred.  The RETURN 0 statement is not required in this
   example, because SQLCODE and SQLSTATE are cleared by the SET
   statement in the condition handler.
   
   
    
   
   

COMMENTS

APAR INFORMATION
 * APAR NUMBER
   IZ03303
   
   
 * REPORTED COMPONENT NAME
   DB2 UDB WSUE AI
   
   
 * REPORTED COMPONENT ID
   5765F4300
   
   
 * REPORTED RELEASE
   820
   
   
 * STATUS
   CLOSED PER
   
   
 * PE
   NoPE
   
   
 * HIPER
   NoHIPER
   
   
 * SPECIAL ATTENTION
   NoSpecatt
   
   
 * SUBMITTED DATE
   2007-08-20
   
   
 * CLOSED DATE
   2008-02-14
   
   
 * LAST MODIFIED DATE
   2008-02-14
   
   

 * APAR IS SYSROUTED FROM ONE OR MORE OF THE FOLLOWING:
   
   
   
 * APAR IS SYSROUTED TO ONE OR MORE OF THE FOLLOWING:
    IZ03328
   
   

FIX INFORMATION
 * FIXED COMPONENT NAME
   DB2 UDB WSUE AI
   
   
 * FIXED COMPONENT ID
   5765F4300
   
   

APPLICABLE COMPONENT LEVELS
 * R820 PSY
   UP