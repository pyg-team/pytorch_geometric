Title: IBM WebSphere plugin and the TX_IN_METHOD exception (BeanNotReentrantException). - United States

Text:
 TECHNOTE (TROUBLESHOOTING)

PROBLEM(ABSTRACT)
 A transaction error is thrown in WebSphere Application Server (WAS) that a transaction is already running and it or the bean is not permitted to be accessed. WAS is configured with the plugin. The Web server plug-in enables the Web server to communicate requests to the application server. Since the transaction is taking a long time to complete, the plugin connection times out, and then retries the same request. Thus, the request is retried and causes the concurrent access exception - TXN_IN_METHOD. This can be resovled by increasing the server IO time-out in the plugin. 

SYMPTOM
If you bypass the plugin in the clustered environment, your application works as expected. But if your request goes through the web server/plugin, it fails, and the following error may be observed in the WAS SystemOut.log: 

Caused by: javax.servlet.ServletException: javax.ejb.ConcurrentAccessException: TX_IN_METHOD: wrong transaction 
at com.thortech.xl.webclient.actions.tcActionBase.execute(tcActionBase.java:913)
at com.thortech.xl.webclient.actions.tcAction.execute(tcAction.java:213)
... 40 more
Caused by: javax.ejb.ConcurrentAccessException: TX_IN_METHOD: wrong transaction
at com.ibm.ejs.container.CMStatefulBeanO.enlist(CMStatefulBeanO.java:208) 

In the FFDC logs, this error may appear:
FFDCException:com.ibm.ejs.container.BeanNotReentrantExceptionSourceId:com.ibm.ejs.container.activator.StatefulSessionActivationStrategy.atActivateProbeId:169Reporter:com.ibm.ejs.container.activator.StatefulActivateOnceActivationStrategy@30103010
com.ibm.ejs.container.BeanNotReentrantException:TX_IN_METHOD: wrong transaction 
at com.ibm.ejs.container.CMStatefulBeanO.enlist(CMStatefulBeanO.java:208)


CAUSE
The error - ConcurrentAccessException:TX_IN_METHOD: wrong transaction coming from the ejb container is a valid exception. The ejb container attempts to enlist a Container Managed Stateful Bean and throws the exception. The actual culprit of this exception, is the plugin. Since it does not receive a reply within a set period of time from its initial request (the transaction is not complete yet), a plugin time-out fires, and the plugin sends the request again. Thus, trying to enlist a bean that is currently involved in a transaction.
The plugin resends the request as part of the failover process. When the time limit specified on the ServerIOTimeout property is reached the first time, the plugin resends the request to the same app server using a new stream, and waits for another time-out before marking the server down.

For WAS v8 and v8.5, this issue is less likely to occur due to the default time-out value being increased from 60 to 900 seconds.


DIAGNOSING THE PROBLEM
At this link - 

http://pic.dhe.ibm.com/infocenter/wasinfo/v7r0/index.jsp?topic=%2Fcom.ibm.websphere.nd.doc%2Finfo%2Fae%2Fae%2Frtrb_ejbaccessprobs.html [http://pic.dhe.ibm.com/infocenter/wasinfo/v7r0/index.jsp?topic=%2Fcom.ibm.websphere.nd.doc%2Finfo%2Fae%2Fae%2Frtrb_ejbaccessprobs.html]

it states the BeanNotReentrantException could be thrown for the following reasons:
when client code, typically a servlet or JSP file, is attempting to call the same stateful SessionBean from two different client threads. This situation often results when an application stores the reference to the stateful session bean in a static variable, uses a global (static) JSP variable to refer to the stateful Session Bean reference, or stores the stateful Session Bean reference in the HTTP session object. The application then has the client browser issue a new request to the servlet or JSP file before the previous request has completed.

Though your application works if you bypass the plugin, connecting directly to the WAS web container HTTP transport. but the exception is thrown when the request is made via the plugin. The plugin is replicating the call internally. The error BeanNotReentrantException: TX_IN_METHOD: wrong transaction in the context of HTTP is affected by the plugin I/O time-out.


RESOLVING THE PROBLEM
In the WAS plugin, there is a ServerIOTimeout parameter. The ServerIOTimeout parameter is kept in the WAS plugin file (plugin-cfg.xml). Increase the value for the ServerIOTimeout to wait until the transaction completes. The default value is 60 seconds. Test with increasing it to 300 seconds (5 minutes). You can adjust to a lower or higher time-out value after testing and observe if you receive the TX_IN_METHOD exception. 

The following is a typical entry in the plugin-cfg.xml for a server and its clones in a cluster. Your entries may differ slightly:

<ServerCluster .....
Name="server_cluster_name" .....
<Server ConnectTimeout="5" ExtendedHandshake="false" MaxConnections="-1" Name="server_name" ServerIOTimeout="300" WaitForContinue="false"> 
<Server CloneID="17blv36je" ConnectTimeout="5" ExtendedHandshake="false" LoadBalanceWeight="2" MaxConnections="-1" Name="server_name" ServerIOTimeout="300
"WaitForContinue="false"> 
<Server CloneID="17bm36g4o" ConnectTimeout="5" ExtendedHandshake="false" LoadBalanceWeight="2" MaxConnections="-1" Name="server_name" ServerIOTimeout="300
"WaitForContinue="false">
</Server>
</ServerCluster>

For your reference, here is a link that explains the setting and other parameters available in the web server plugin: 
http://www-01.ibm.com/support/docview.wss?uid=swg21318463 [http://www-01.ibm.com/support/docview.wss?uid=swg21318463]