Title: IBM Agent stops sending events - United States

Text:
troubleshoot; root cause; trace TECHNOTE (FAQ)

QUESTION
 I can no longer see any events from the SSM agent, what steps can I take to investigate why? 

CAUSE
There are a number of potential causes. This Technote attempts to describe that flow of data from the point where a threshold is crossed in the agent, to the resulting event in the ObjectServer Event List. The table takes each step in the data flow, and describes the actions you can take that will show whether the break in the flow of data has occurred at that point.
Two obvious causes for the SSM agent to stop sending events are that it has unexpectedly exited, or the process is still running but has become unresponsive. Please see the "Related Information" section at the bottom of this technote. If the agent process is present and responsive, please continue.


ANSWER
Preparation 

Before starting the following trouble shooting process, stop the Agent and modify the init.cfg file, changing the value for LogLevel to 5 (highest). 

If your trap destination is the MTTrapD probe, stop the probe, and change the MessageLevel property to debug. Also change the RawCapture property to 1. Move the existing probe and agent log files so that fresh data is captured. 

NOTE: once trouble-shooting is complete, please reset these properties to the default values.

The data flow from the agent through to the Event List is as follows:

1. A threshold defined in a subagent's control row is crossed.
2. An RMON event is triggered
3. A trap (or traps) is sent to the trap destinations).
4. Assuming the trap destination is the MTTrapD probe, the trap is tokenised by the probe.
5. The probe processes the tokens according to the probe's rules file and constructs an insert.
6. The probe inserts the event into the alerts.status table of the ObjectServer.

Steps 1-3 are internal to the agent, and under its control.

The following table describes each of the above steps, or "Data Points", in terms of debugging actions to be taken that will expose any break points in the data flow.




Data Point Trouble Shooting Action Subagent control row threshold crossed. Check history object. The assumption here is that the control row is active. If it is not, check for syntax errors in the relevant config file. Different subagents have different ways of recording threshold violations. For example, for genalarm check the genAlarmDataLastViolationTime object. For process check the psExceptionTable. These objects should show whether the threshold was crossed in the last poll period. RMON Event is fired. For debugging purposes, modify the control row for the thresholds event in the rmon.eventTable so that it is of type "log-and-trap". Once triggered, the event will now add an entry in the eventLogTable. For more information about RMON events check the IBM Tivoli/Netcool System Service Monitors Administration Guide, Chapter 6 "How Netcool/SSM processes RMON notifications" Event is sent to the trap destination(s) with the matching community string to the event. Note: If you have defined a community in the RMON event, and that community is not matched in any of the trap destinations, then the trap will not be sent. The only exceptions to this are cold and warm boot traps that are broadcast to all destinations. There is a good explanation of the way in which the RMON eventCommunity and the trap destination community string are tied in the Tivoli/Netcool Systems Service Monitor Administration Guide Chapter 6, figures 10 and 13. 

If you are using notifications, then the community in the RMON eventCommunity should match the or the snmpNotifyName (in the case of SNMP notifications). It is not necessary for it to also match the snmpTargetParamsSecurityName. Enable snmptrace logging in the agent. Using the text console (nco_m_ssmcons in SSM 3.1 or ssmcons in SSM 4.0), issue the following commands:
Agent > set verbose on
Agent > set snmptrace log
This will initiate the logging of snmp traffic from and to the agent to a file called trace.log in the SSM log directory. Use this to establish that the agent is sending the trap to the operating system. Perform a packet capture of the trap on both the SSM host server and the trap destination server. This demonstrates that the trap is being sent onto the network by the SSM host. It also demonstrates that the trap is being received at the destination. This checks there is no routing issues, nor that the trap is being dropped en route. Packet capture can be performed in a variety of ways including snoop on Solaris, tcpdump on Linux and netmon on Windows. Third party products such as Wireshark (nee Ethereal) are also available. Assuming the trap destination is the MTTrapD probe, the trap is received by the probe. The probe records the tokens that are created from the trap in the raw capture file (mttrapd.cap by default). “RawCaputre” mode is not enabled by default. The probe's debug log file may also contain messages if the trap was rejected for some reason. The probe processes the event and forwards it to the ObjectServer. The probe's debug log file shows the fields to be populated in the alerts.status table, and the event being sent to the ObjectServer. The event is displayed in the Event List. Use nco_sql to select the row for the event since the Event List may have a filter preventing the event from being displayed. 
Please use the above data flow to help isolate where it stops in your installation. If you require further support, please supply the following: 
1. The SSM Agent's debug ssmagent.log. 
2. The SSM Agent's trace.log. 
3. The packet capture files. 
4. The MTTrapD probe's debug log file and raw capture file if applicable. RELATED INFORMATION
 Read First for SSM [http://www.ibm.com/support/docview.wss?uid=swg21322518]


 

PRODUCT ALIAS/SYNONYM
 OMNIbus