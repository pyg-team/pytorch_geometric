Title: IBM Detail on advanced settings in AppScan Source scan configurations - United States

Text:
Scan configuration; ApScan Source; scan TECHNOTE (FAQ)

QUESTION
 What do all of the advanced settings used in IBM Security AppScan Source scan configurations do? 

ANSWER
 

Some of the parameters below reference the AppScan Source log files which can be found by default in these locations: 

 * Windows - C:\ProgramData\IBM\AppScanSource 
 * Linux - /var/opt/ibm/appscansource 
 * OS X - /Users/Shared/Applications/AppScanSource/logs


Setting Name Hover Help Description in AppScan Source Additional Information Automatic Callback Markup Mark all functions that are not called within the application as a tainted callback. This helps identify potential vulnerabilities in methods that are not called by the application code. This causes AppScan Source to treat all external entry points to your application as tainted sources. This may result in additional findings being reported in a scan. Automatic Propagator Markup Mark all lost sinks as taint propagators. This should only be done after proper lost sink resolution is performed on external calls. N/A Cross Project Analysis Allows taint analysis to flow across projects and results in more complete traces when project A has calls into project B, for example. This setting is only applicable to languages that support Cross Project Analysis (for example Java and .NET, etc.) and only works for projects of the same type. Display Skipping Messages Display all errors and warnings in the console when functions or classes are skipped due to errors. During scanning, the AppScan Source console will display any messages that indicate functions/classes are being skipped due to errors. With this option set to false, only messages for skipping an entire file will be displayed. Messages for skipping functions/classes are always written to the scanner_exceptions.log, independent of this setting. Filter Custom Rules When true, custom rules will be filtered by the scan rules defined on the scan configuration. In a scan configuration, there is a “Scan Rules” section that allows you to choose the sources to be considered during the scan. You can specify the individual properties that the sources must have - or you can select one of the pre-defined groupings of source properties (for example User Input). 

This setting determines whether or not your custom rules will be affected by the scan rules. By default, custom rules will be affected by the options chosen in the “Scan Rules”. 

If you set this option to false, custom rules will not be affected. Initial Pruning Heuristic Affects a heuristic that tries to minimize the number of traces that are almost identical. Higher values will reduce the number of traces. This number affects an internal algorithm for reducing the number of similar traces (for example traces with the same source and sink that go through a different intermediate node). IPVA Per-Root Time Limit Limits the amount of time spent analyzing one call graph root. The value can range from 0 to 1000. (value * 3 seconds) is the time allowed in the process-root phase, and (value * 3 seconds) is the time allowed in the assess-root phase. For instance, if IPVA per-root time limit is 50, then 150 seconds are allowed in the process-root phase, and 150 seconds are allowed in the assess-root phase. When the time limit is reached, analysis of that root is cut off yielding results up to that point, and we move on to the next phase or next root. Set “Suppress processing restricted messages” to false to see console messages when this happens. Note: 0 is a special value, meaning unlimited time. Higher values (or 0) may result in longer scan times. Lower values increase performance (both time and memory usage).

When this limit is reached, a "Processing restricted ..." message will be output to the AppScan Source logs or to the Console. 

The Console output occurs only when the "Suppress Processing Restricted Messages" setting is False. No in-line validation False means there could be in-line validation code in the application. True means the application has no in-line validation code. When set to true, some Type I findings may be promoted to vulnerabilities. When set to true, this setting tries to programmatically determine if any nodes in a trace that don't have markup could be affecting the tainted argument. 

If the nodes that are not marked up could not affect the value, the Type I finding will be promoted to a vulnerability. This is referred to as “Intelligent Type I Finding Promotion”. Prototypical Traces Only show n prototypical instances of similar traces. Zero is special, meaning show all instances. Setting this to a low non-zero value can help reduce memory and time consumption of a scan, but can potentially remove traces that have interesting intermediates. Similar traces are those that go from the same source to the same sink, but travel through different intermediate nodes. Replace Set/Get Attribute Calls This should be set to true only when wafl_globals_tracking is set to true. Related to framework analysis. Determines whether or not calls to getAttribute() and setAttribute() should be replaced in trace diagrams by the synthetic method. Show Informational Findings Affects whether informational findings are reported. N/A Single Virtual Call If true, the concrete implementation of virtual calls will be followed if the virtual call has one and only one concrete implementation. If false, follow N number of concrete implementations of a virtual function where N is specified by the Virtual Call Count setting. N/A Suppress Processing Restricted Messages Suppress processing restricted messages from the console. Messages will still be written to the log. For example: "Processing restricted for call graph with root "com.ibm.b2b.comms.ascore.dispatcher.ASInboundInvokableService.invokeService" after 151 seconds: compute limit of 50 exceeded during process pass"

This message indicates that the IPVA Per-Root Time Limit has been reached for this root (see IPVA Per-Root Time Limit setting). Virtual Call Auto Callback Threshold If the number of concrete implementations of a virtual call exceed this value, then the concrete implementations are all marked as auto-callbacks. This takes effect only when the “Single Virtual Call” is false and the “Virtual Call Count” is 0 and the value of this setting is greater than 0. This setting helps to resolve the problem of recursive virtual calls, causing the scanning engine to crash. If the number of concrete implementations of a virtual call is greater than or equal to x then mark the virtual call as a lost sink and mark all the overrides as auto-callbacks. Virtual Call Count Follow the specified number of concrete implementations of a virtual call. The value 0 means follow all targets (note this can be expensive). This setting has no effect unless “Single Virtual Call” is false. N/A WAFL Globals Tracking Track globals declared in the WAFL spec. This setting is related to Frameworks for Frameworks.

The Web Application Framework Language (WAFL) describes a framework's actions to the AppScan Source scanning engine. You'll find the .wafl file in your project's working directory. This setting enables AppScan Source to find data flows between different components of a framework-based application (for example a data flow from a controller to a view). Enabling this option can result in additional findings at the cost of performance. 

This was disabled by default in 8.7 and earlier, but will be enabled by default in 8.8 and higher versions of AppScan Source.