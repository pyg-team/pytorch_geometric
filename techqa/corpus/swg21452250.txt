Title: IBM Detecting Successful Logon page in Web Applications - United States

Text:
web logon page success TECHNOTE (FAQ)

QUESTION
 Is there a method for detecting a successful logon page within a web application where the successful logon page causes a reload of the TAM ESSO state engine, therefore losing connection to the captured logon credentials. 

ANSWER
A new state engine is loaded within web application when a new Dom Object (web page/frame) is loaded within the browser. A new state engine starts from the beginning and it does not know about other state engines loaded due to other pages/frames within the browser. 

For example, if a web application is designed with 3 frames, each of which loads a web page, then each of these will have its own state engine (depending on the profile top level signatures), ie you have 3 state engines. But each state engine does not know about the others or the data within them. This is similar to when a web application goes to a web page (single or frames) after successfully logging into the application. 

 

The only way to make data available across these state engines is to define the values (properties) as global in scope. This though can cause issues if the application is reloaded as the data is persistent and incorrect situations can occur. 

 

The following is an example profile which uses this technique for the user id and password captured by one state engine from a logon form, but then only saved by the state engine for the successful page if displayed correctly. It also shows a method of ensuring that the data is fresh and valid at the moment the credential data is saved.

[/support/docview.wss?uid=swg21452250&aid=1] [/support/docview.wss?uid=swg21452250&aid=1] 

 

There are 3 property store items at the global level used (this is done by setting 'use Local bag = No')

wa1_logondone - this is a state flag to ensure we only save credentials at the correct time.
wa1_uid - used to hold the user id entered from the logon form.
wa1_pwd - used to hold the password entered from the logon form.

1. To minimise the number of time the profile might be loaded (state engines) the top level signature is set as specifically as possible to only include the two key URLs - ie the logon page and the successful logon page (whether these are at the top level or within frames), eg 


 * /child::web[@url#"http://hostnamedns/(.*login.*|.*main.*)"] 


2. The profile contains two triggers off the start state, one for the logon sequence ' (1) Web page completes loading' and the other the successful logon page sequence ' (2) Web page completes loading {1c}'. Each of these will run within their own state engine as each url is different. 

Logon Sequence '(1) Web page completes loading': 
 * We have detected that the logon page has been loaded, therefore:  * Ensure our flag is initialised to indicate no credentials captured. We only want this set if the user has logged on. 
    * Do normal injection of credentials if this is not the first time, ie credentials already exist.
   
   
 * User has entered their credentials and is trying to logon '(1) HTML element is clicked' eg a button, or '(2) Browser starts navigating' eg press enter key.  * Set our state flag to 1 to indicate that we have captured values.
      [/support/docview.wss?uid=swg21452250&amp;aid=2]
      
    * Capture the user id and password from the logon form (web objects) to their global property items.
   
   
    * 
    * 
    * 
    * Now use a 'Fire Immediately' to complete the sequence as this state engine is finished with it work.
   
   

Successful Logon Page Sequence (2) Web page completes loading {1c}': 

 

 * We set the signature to our successful logon page and also add a condition so that this trigger is only fired if we have just been through the logon form and captured credentials into the global property store items.


 * 
 * 
 *  
   
 * We need to initialize the capture bag so that we can transfer values into it for saving. This is why we have the first action of this trigger set to 'Capture credentials' but only define the 'Auth Info' to our authentication service. This ensures we have a capture bag of the correct data format.  * 
    * 
    * 
    *  
      
   
   
 * Now we transfer our previously saved credential values into this capture bag we have just created.  * 
    * [/support/docview.wss?uid=swg21452250&amp;aid=6]
    * 
    * 
   
   
 * We now trigger, via a 'Fire Immediately' trigger, the saving of the credentials put into the capture bag via the 'Save Credentials' action. 
 * Last action, having saved our credentials, we want to ensure that the next time this sequence is triggered is only after a new login has been done. So we reset our state flag (wa1_logondone) back to 0.  *