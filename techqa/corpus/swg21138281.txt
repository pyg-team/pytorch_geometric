Title: IBM DB2 Records Manager 3.1 - WebSphere/DB2 Connectivity Guide - United States

Text:
 TECHNOTE (FAQ)

QUESTION
 Contents:
WebSphere Datasource
Datasource Configuration parameters
Connection Timeout 
Max Connections 
Min Connections 
Problem determination and resolution 
Appendix 1


CAUSE
WebSphere Datasource
In IRM 3.1 client request typically flows through WebSphere® Application Server to DB2® database.

[/support/docview.wss?uid=swg21138281&aid=1] [/support/docview.wss?uid=swg21138281&aid=1]

A data source is used to access data from the database.

EJB Container uses connection pooling mechanism to define a pool of connection for a single datasource, which can be reused by multiple users, without each one of them incurring the overhead of connecting and disconnecting from database. 

Datasource Configuration parameters 

There are a number of parameters, which affect datasource behavior. Proper configuration of the parameters can significantly improve IRM performance. We base our recommendations on the series of performance tests. See Appendix 1 for our testing environment configuration details. 

Connection Timeout 

Specifies the interval, in seconds, after which a connection request times out and a ConnectionWaitTimeoutException is thrown. 
The wait is necessary when the maximum value of connections (Max Connections) to a particular connection pool is reached. For example, if Connection Timeout is set to 300 and the maximum number of connections is reached, the Pool Manager waits for 300 seconds for an available physical connection. If a physical connection is not available within this time, the Pool Manager throws a ConnectionWaitTimeoutException. It usually does not make sense to retry the getConnection() method, because if a longer wait time is required, you should set the Connection Timeout setting to a higher value. Therefore, if this exception is caught by the application, the administrator should review the expected usage of the application and tune the connection pool and the database accordingly.

If Connection Timeout is set to 0, the Pool Manager waits as long as necessary until a connection is allocated (which happens when the number of connections falls below the value of Max Connections). 

Data type Integer 
Units Seconds 
Default 180 
Range 0 to max int 

We recommend to keep the default value for this parameter (180 seconds). 

Max Connections 

Specifies the maximum number of physical connections that you can create in this pool. 
These are the physical connections to the backend database server. Once this number is reached, no new physical connections are created and the requester waits until a physical connection that is currently in use returns to the pool, or a ConnectionWaitTimeoutException is thrown. 

For example, if the Max Connections value is set to 5, and there are five physical connections in use, the pool manager waits for the amount of time specified in Connection Timeout for a physical connection to become free. 

You can use the Tivoli Performance Viewer to find the optimal number of connections in a pool. If the number of concurrent waiters is greater than 0, but the CPU load is not close to 100%, consider increasing the connection pool size. If the Percent Used value is consistently low under normal workload, consider decreasing the number of connections in the pool. 

Data type Integer 
Default 10 
Range 0 to max int 

We recommend to set Max Connections = 30 for 200 or less concurrent requests. 

Min Connections 

Specifies the minimum number of physical connections to maintain. 
Until this number is reached, the pool maintenance thread does not discard physical connections. However, no attempt is made to bring the number of connections up to this number. If you set a value for Aged Timeout, the minimum is not maintained. All connections with an expired age are discarded.

For example if the Min Connections value is set to 3, and one physical connection is created, the Unused Timeout thread does not discard that connection. By the same token, the thread does not automatically create two additional physical connections to reach the Min Connections setting.

Data type Integer 
Default 1 
Range 0 to max int 

The memory footprint for a connection is between 1 and 2 megabytes, and its consumption therefore, should be avoided.

We recommend to set Min Connections = Max Connections.


ANSWER
Problem determination and resolution 

Triggering event:
Users complain about IRM response time or an error message returned.
Error messages contain the following:
· ConnectionWaitTimeoutException
· javax.transaction.TransactionRolledbackException: CORBA TRANSACTION_ROLLEDBACK 0x0 No; nested exception is: org.omg.CORBA.TRANSACTION_ROLLEDBACK:

Some possible causes are: 
· The maximum number of connections for a given pool is set too low. The demand for concurrent use of connections is greater then the configured maximum for the connection pool. One indication that this is the problem is that you receive these exceptions regularly, but your CPU utilization is not high. This indicates that there are too few connections available to keep the threads in the server busy. 
· Connection Wait Time is set too low. Current demand for connections is high enough such that sometimes there is not an available connection for short periods of time. If your connection wait timeout value is too low, you may timeout shortly before a user returns a connection back to the pool. Adjusting the connection wait time may give you some relief. One indication that this is the problem is that you are using near the maximum number of connections for an extended period and receiving this error regularly. 
· The maximum number of connections to a datasource exceeds the maximum number of connections allowed by DB2 (as specified as MAXAPPLS).
· You are driving more load than the backend DB2 database have resources to handle. One indication that this is the problem is that the database server CPU is nearly 100% busy. 

 

To correct these problems, change the pool settings of MaxConnections or ConnnectionWaitTimeout, or adjust resources and their configuration. 

Appendix 1
IRM Testing environment configuration:



SERVER 1: 
IBM DB2 Records Manager Engine 
Web Sphere Name: BM-ENGINE:
Processor: 2 GHz Xenon Processor x 2
Ram: 1024 Gb high speed RDRAM
Hard Disk: 1 36 GB SCSI 10,000 RPM 
DVD x 16 spin
CD-ROM x 48 spin
AGP Video Fully set for IBM DB2 Records Manager SERVER 2: DBMS Server - DB2 8 only Name: BM-DBMS
Processor: 2 GHz Xenon Processor x 2
Ram: 1024 Mb high speed RDRAM
Hard Disk: 1 36 GB SCSI 10,000 RPM 
DVD x 16 spin
CD-ROM x 48 spin
AGP Video Fully set for DB2 database