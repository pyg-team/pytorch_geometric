Title: IBM MustGather: Native Out Of Memory on Windows - United States

Text:
MustGahter; MustGather; MustGather; jvmdbg001; websphere application server; native; outofmemory; windows; MustGatherDocument TECHNOTE (TROUBLESHOOTING)

PROBLEM(ABSTRACT)
 This is the data gathering procedure for native Out Of Memory (OOM) errors for IBM WebSphere Application Server on Windows. If you know, or strongly suspect, that you have a native memory problem, or have been informed by an IBM support representative that you have a native memory problem, these are the steps to collecting the data needed for proper diagnosis of a root cause. 

SYMPTOM
Some indications that you have a native memory problem are as follows. If you have any uncertainty about these points you should contact an IBM support representative first. 

 * Failure to create/fork new operating system threads (messages in SystemOut.log) 
 * JVMDBG001 (malloc) errors in native_stderr.log


RESOLVING THE PROBLEM
Here are some data collections that can be used from a Windows environment (without engineered debug .jar files or executable files). They are as follows and should be collected in this order or as directed by an IBM Support representative:
1. General OutOfMemory MustGather data 

 *  Heapdumps/Javacores 
 *  Server Logs with verboseGC enabled 
 *  server.xml 
 *  perfmon logging (-details- [http://publib.boulder.ibm.com/infocenter/javasdk/tools/topic/com.ibm.java.doc.igaa/_1vg000121410cbe-1195c23a635-8000_1008.html])
   
   

2. processed user.dmp  * Sometimes after several malloc errors occur, the process can crash. The user.dmp is a file that is often generated from this crash and can provide a glimpse at what is filling up native space. It might be necessary to create this file manually under some circumstances. As this is a crash, it needs to be processed with jextract similar to any other crash on Windows.
   
   See MustGather: Crash on Windows [http://www-01.ibm.com/support/docview.wss?uid=swg21053924]#listingMustGather
   
   

3. UMDH (when requested)  * This is a Microsoft application that will allow us to see growth over time of native libraries in use. This is more useful if a native leak has already been discovered or at least highly suspected. It involves taking 'snapshots' of the heap at given intervals and doing a comparative analysis of these snapshots.
   
   DETAILS



Ideally all of this data can be collected at once, however it is understood that circumstances will affect how much of this data can be gathered and when. In any event, it is important to have an understanding of the problem so that data can be collected at the right time(s). 

When applicable, please compress then upload any/all of the following:  * Heapdumps/Javacores 
 * verboseGC (native_stderr.log) 
 * Server Logs (SystemOut.log, SystemErr.log, etc.) 
 * server.xml 
 * processed user.dmp 
 * snapshots 
 * comparisons 
 * perfmon log





Using UMDH to track a native leak 
 1. Ensure the verbose garbage collection trace is enabled:
    Enabling verbose garbage collection (verbosegc) in WebSphere Application Server [http://www.ibm.com/support/docview.wss?rs=180&uid=swg21114927]
    
    
 2. Download and install the Microsoft debugging tools:
    http://www.microsoft.com/whdc/devtools/ddk/default.mspx [http://www.microsoft.com/whdc/devtools/ddk/default.mspx] 
    Look for the “Standalone Debugging Tools for Windows (WinDbg)” paragraph. Select “Get the Debugging Tools”. During the install, only select “Debugging Tools for Windows”. Deselect all other components. 
    
    
 3. From a command line, or Run box, run the following against the installed IBM WebSphere SDK:
    gflags /i <path to AppServer JDK>/java.exe +ust 
    
    
 4. Set the environment variable _NT_SYMBOL_PATH to the following:
    srv*<local_dir>*http://msdl.microsoft.com/download/symbols
    
    
    Where local_dir is a directory that can be set aside for storing the symbol table.
    
    
 5. Start WebSphere Application Server. Identify the Java process id (pid) and start running perfmon#usingPerfmon using the "Virtual Bytes" counter for the Java process, logging this data to a file (name this file so that it can be easily identified).
    -details- [http://publib.boulder.ibm.com/infocenter/javasdk/tools/topic/com.ibm.java.doc.igaa/_1vg000121410cbe-1195c23a635-8000_1008.html]
    
    
 6. Take a series of snapshots over the period of the process's life. If there is a clear spike in memory usage, then collect snapshots before and after the spike. Otherwise be sure to chose an appropriate interval for the environment. Use the following command:
    umdh -p:<pid> -f:<your dump filename>
    
    
    Ensure the filename is appropriate to identify the sequence the in which snapshots were taken.
    
    
 7. Once the snapshots are collected, they need to be compared with the following command:
    umdh -v <dump1> <dump2> -f:<compare file name>
    
    
    Ensure the filename is appropriate to identify which snapshots were compared.
    
    
    

For information on Umdh.exe, see 
http://support.microsoft.com/kb/268343 [http://support.microsoft.com/kb/268343] 

Exchanging Information with IBM Technical Support for Problem Determination [http://www.ibm.com/support/docview.wss?rs=180&uid=swg21153852] RELATED INFORMATION
 Recording your screen to share with IBM Support [https://www.ibm.com/developerworks/community/blogs/IBMElectronicSupport/entry/recording_your_screen_to_share_with_support?lang=en]