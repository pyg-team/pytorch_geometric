Title: IBM IZ80943: FILTER TAB MISSING COLUMNS WHEN SQL CONTAINS FUNCTIONS - United States

Text:
 SUBSCRIBE
You can track all active APARs for this component.



APAR STATUS
 * CLOSED AS PERMANENT RESTRICTION.
    
   
   

ERROR DESCRIPTION
 *  Create a Custom SQL query in the TEPS as follows using the TEPS
   data source:
   
   select translate(id) Userid, Frequency "Logon Frequency", Name,
   Text "Description" from kfwuser left outer join (select
   translate(userid) Userid, count(*) as Frequency from
   kfwjrnllogin group by translate(userid)) as F on
   translate(id)=translate(userid) where Frequency is not null
   order by id
   
   Save the query and then create a blank workspace with one empty
   table view.  Right-click the view and assign the query just
   created.  Before closing out of the "Properties - Overview" tab,
   note that the assigned query does show data was returned in the
   "Table" pane at the top, and, more importantly does show the
   columns listed in the "Filters" pane on the "Filters" tab.  Now
   close out of the that dialog and again right click the view and
   goto Properties --> Filters tab.  Notice that the columns are no
   longer listed there, so nothing can be filtered on.
   
   Now, create a new query (or edit the old one making sure to
   leave and come back to the workspace) using the same query as
   before with only one modification of removing the 'translate'
   scalar function off the first selected column:
   
   select id Userid, Frequency "Logon Frequency", Name, Text
   "Description" from kfwuser left outer join (select
   translate(userid) Userid, count(*) as Frequency from
   kfwjrnllogin group by translate(userid)) as F on
   translate(id)=translate(userid) where Frequency is not null
   order by id
   
   So instead of "select translate(id) ..." it's just "select id
   ...".  Now repeat all the other steps above to get that query
   assigned to a view.  Notice that after closing the properties
   view and then going back into Properties, that the "Filters" tab
   does still show the columns that can be filtered on.
   
   Third, if you repeat the above steps using a Custom SQL query
   created using the "ITM Warehouse" data source, you can use
   scalar functions in the query to your hearts content and it
   won't affect whether the columns are present in the "Filters"
   tab after closing/reopening the view properties dialog box.
   
   So...something with regard to scalar functions used in Custom
   SQL queries which use the TEPS data source is causing the
   columns to not show in the "Filters" tab on subsequent attempts
   to open the view properties dialog.  I hope that makes sense.
   And I've tested with a myriad different scalar/column functions
   and it doesn't seem particular to any one of them.
   
   
    
   
   

LOCAL FIX
 *  remove any scalar/column functions you can that are part of the
   columns being selected.  Those same functions in the predicate
   (in the where clause) are fine--their presence among the columns
   selected is the problem.
   
   
    
   
   

PROBLEM SUMMARY
 *  Filters do not display correctly when using functions
   such as translate for custom SQL queries containg a join clause.
   
   
    
   
   

PROBLEM CONCLUSION
 *  This problem is currently documented in the "IBM Tivoli
   Monitoring Version 6.2.2 Fix Pack 2 Tivoli Enterprise Portal
   User's Guide" in Chapter 7 under "Creating a Query to a JDBC or
   ODBC database", There is a section under "Notes on Queries to a
   JDBC or ODBC database" that deals with queries which contain a
   join clause. There is not currently a way to code a fix for this
   problem because the TEP does not know what column to add to the
   query from the table being used in order for it to work
   properly. The documented procedure (to specify the table.column
   format) is the only way to make this work.
   
   Here are the currently documented instructions from the document
   mentioned above:
   
   Column functions in a statement that has a JOIN
   When a custom SQL statement contains a JOIN, the Tivoli
   Enterprise Portal does not set the table name property in the
   request sent to the Tivoli Enterprise Portal Server. Normally,
   the portal server determines the table name from the result set
   returned from the database. However, when a column function
   (such as COUNT, MAX, or MIN) is used on one of the columns in
   the request, the result set meta data does not provide a table
   name for that column. With no table name, the portal client
   treats the column as a text attribute, which means that it
   cannot be rendered in a chart view.
   To ensure that the column data type is set correctly, provide an
   alias for any column in the SELECT statement that uses a column
   function. The alias must be in the form table.column. The table
   and column values can be arbitrary strings, and do not need to
   match the actual table or column name in the database. The value
   supplied for column is the column heading. In the attribute
   selection dialog, the value for table is the attribute group,
   and the value for column is the attribute item.
   In the Before sample, the data returned from the statement
   renders properly in a table view but cannot be selected in the
   Properties editor  Filters tab for any chart views because the
   returned values are read as text attributes. The After sample
   shows how the statement was edited to create an alias to
   explicitly state the table name for TYPE and COUNT.
   Before
   SELECT COUNT(column1) item_count
   FROM table1
   LEFT OUTER JOIN table2 ON table1.column1 = table2.column1
   After
   SELECT COUNT(column1) "my_group.item_count"
   FROM table1
   LEFT OUTER JOIN table2 ON table1.column1 = table2.column1
   
   So in order to get this query to work, a table name needs to be
   pre-pended to the column name.
   ORIGINAL QUERY
       select translate(id) Userid, Frequency "Logon Frequency",
   Name,
       Text "Description" from kfwuser left outer join (select
       translate(userid) Userid, count(*) as Frequency from
       kfwjrnllogin group by translate(userid)) as F on
       translate(id)=translate(userid) where Frequency is not null
       order by id
   
   
   ALTERED QUERY
       select translate(id) "kfwjrnllogin.userid", Frequency "Logon
   Frequency", Name,
       Text "Description" from kfwuser left outer join (select
       translate(userid) Userid, count(*) as Frequency from
       kfwjrnllogin group by translate(userid)) as F on
       translate(id)=translate(userid) where Frequency is not null
       order by id
   
   
    
   
   

TEMPORARY FIX

COMMENTS

APAR INFORMATION
 * APAR NUMBER
   IZ80943
   
   
 * REPORTED COMPONENT NAME
   TEP
   
   
 * REPORTED COMPONENT ID
   5724C04EP
   
   
 * REPORTED RELEASE
   622
   
   
 * STATUS
   CLOSED PRS
   
   
 * PE
   NoPE
   
   
 * HIPER
   NoHIPER
   
   
 * SPECIAL ATTENTION
   NoSpecatt
   
   
 * SUBMITTED DATE
   2010-07-26
   
   
 * CLOSED DATE
   2010-11-30
   
   
 * LAST MODIFIED DATE
   2010-11-30
   
   

 * APAR IS SYSROUTED FROM ONE OR MORE OF THE FOLLOWING:
   
   
   
 * APAR IS SYSROUTED TO ONE OR MORE OF THE FOLLOWING:
   
   
   

FIX INFORMATION

APPLICABLE COMPONENT LEVELS