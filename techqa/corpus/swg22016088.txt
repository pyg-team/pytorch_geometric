Title: IBM Java Out Of Memory / Memory Leak in Sterling B2B Integrator Websphere MQ Series Adapter - United States

Text:
Websphere MS Series; WS MQ Async Receive Adapter; WS MQ Series Client Suite; Memory Leak; Java Out of Memory; OOM TECHNOTE (TROUBLESHOOTING)

PROBLEM(ABSTRACT)
 A customer has installed the MQ Series *.jar files and implemened the WS MQ Series Asycn Receive Adapter and the WS MQ Series Client services to read and write messages from queues. 

SYMPTOM
After running the application for a few days it would hang and the Heap memory space was full.
Garbage Collection runs were not able to free up any memory and GC logs were showing the pattern of a memory leak.


CAUSE
In the heap dump files 84% of the memory space was occupied by the following class:
com/ibm/mq/jmqi/remote/impl/RemoteConnectionPool

ENVIRONMENT
Production and QA.

DIAGNOSING THE PROBLEM
To diagnose the situation enable verbose GS logging in the JVM. Analyse GC logs over a period of time and they should reveal a slow progressive increase in the heap size with the typical pattern of a memory leak.
You can also generate some heapdump files when the heap size is full and search which objects are occupying the memory.

RESOLVING THE PROBLEM
Go in the Sterling B2B Integrator in the /install/properties directory and review the dynamicclasspath.cfg file.





Verify that all the required jar files are been installed: 


VENDOR_JAR=/home/sb2bi_user/install/jar/ibm_mq/9_0/com.ibm.mq.allclient.jar
VENDOR_JAR=/home/sb2bi_user/install/jar/ibm_mq/9_0/com.ibm.mq.axis2.jar
VENDOR_JAR=/home/sb2bi_user/install/jar/ibm_mq/9_0/com.ibm.mq.commonservices.jar
VENDOR_JAR=/home/sb2bi_user/install/jar/ibm_mq/9_0/com.ibm.mq.defaultconfig.jar
VENDOR_JAR=/home/sb2bi_user/install/jar/ibm_mq/9_0/com.ibm.mq.headers.jar
VENDOR_JAR=/home/sb2bi_user/install/jar/ibm_mq/9_0/com.ibm.mq.jar
VENDOR_JAR=/home/sb2bi_user/install/jar/ibm_mq/9_0/com.ibm.mq.jmqi.jar
VENDOR_JAR=/home/sb2bi_user/install/jar/ibm_mq/9_0/com.ibm.mq.jms.Nojndi.jar
VENDOR_JAR=/home/sb2bi_user/install/jar/ibm_mq/9_0/com.ibm.mq.pcf.jar
VENDOR_JAR=/home/sb2bi_user/install/jar/ibm_mq/9_0/com.ibm.mq.postcard.jar
VENDOR_JAR=/home/sb2bi_user/install/jar/ibm_mq/9_0/com.ibm.mq.soap.jar
VENDOR_JAR=/home/sb2bi_user/install/jar/ibm_mq/9_0/com.ibm.mq.tools.ras.jar
VENDOR_JAR=/home/sb2bi_user/install/jar/ibm_mq/9_0/com.ibm.mq.traceControl.jar
VENDOR_JAR=/home/sb2bi_user/install/jar/ibm_mq/9_0/com.ibm.mqjms.jar
VENDOR_JAR=/home/sb2bi_user/install/jar/ibm_mq/9_0/fscontext.jar
VENDOR_JAR=/home/sb2bi_user/install/jar/ibm_mq/9_0/jms.jar
VENDOR_JAR=/home/sb2bi_user/install/jar/ibm_mq/9_0/providerutil.jar 


When we verified the size of the files installed in Sterling B2B Integrator and compared them with the *.jar files on the WS MQ Server and we noticed there was a substantial difference in the size of the files.
We found out the libraries installed were from WS MQ version 9.0.0.0 and the WS MQ Server was in version 9.0.0.2.

The customer went on the WS MQ Server under the /install_dir/java/lib and copied the correct version of all the jar files.
He then replaced them in all the folders referenced in the dynamicclasspath.cfg file and restarted the application.
After the restart the memory leak problem was resolved and GC logs were showing stable memory consumption.