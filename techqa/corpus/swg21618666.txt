Title: IBM RemoteException thrown when a ruleset that uses a managed Java XOM is executed in an EJB3 rule session - United States

Text:
EJB3; rule session; managed XOM; ruleset.managedxom.uris; unmarshall TECHNOTE (TROUBLESHOOTING)

PROBLEM(ABSTRACT)
 Getting a java.rmi.RemoteException when Rule Execution Server is called through an EJB3 rule session that uses managed Java XOMs. 

SYMPTOM
The call fails and returns the following root cause, which points at missing XOM classes, although those classes have been deployed using the managed XOM feature: 

Cause: java.lang.RuntimeException: java.rmi.RemoteException: CORBA NO_IMPLEMENT 0x4f4d0001 No; nested exception is: 
org.omg.CORBA.NO_IMPLEMENT: 
SERVER (id=4773e3aa, host=myhost.com) TRACE START:
org.omg.CORBA.NO_IMPLEMENT: The sender's class RMI:test.MyParameterClass:1C07FA96BB0B7F99:1461E0CFE4DEDE78 is not present on the local classpath, and the class is not marked as truncatable, so it cannot be unmarshaled. vmcid: OMG minor code: 1 completed: No
at com.ibm.rmi.io.IIOPInputStream.inputObjectFVD(IIOPInputStream.java:1536)
at com.ibm.rmi.io.IIOPInputStream.simpleReadObjectInternal(IIOPInputStream.java:418)
at com.ibm.rmi.io.IIOPInputStream.simpleReadObjectLoop(IIOPInputStream.java:526)
at com.ibm.rmi.io.IIOPInputStream.readObjectDelegate(IIOPInputStream.java:386)
at com.ibm.rmi.io.IIOPInputStream.readObjectOverride(IIOPInputStream.java:649)
at java.io.ObjectInputStream.readObject(ObjectInputStream.java:359)
at java.util.HashMap.readObject(HashMap.java:875)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:60)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:37)
at java.lang.reflect.Method.invoke(Method.java:611)
at com.ibm.rmi.io.IIOPInputStream.invokeObjectReader(IIOPInputStream.java:1708)
at com.ibm.rmi.io.IIOPInputStream.inputObjectUsingClassDesc(IIOPInputStream.java:1443)
at com.ibm.rmi.io.IIOPInputStream.inputObjectClassDesc(IIOPInputStream.java:1418)
at com.ibm.rmi.io.IIOPInputStream.readSerializable(IIOPInputStream.java:1150)
at com.ibm.rmi.io.IIOPInputStream.simpleReadObjectInternal(IIOPInputStream.java:441)
at com.ibm.rmi.io.IIOPInputStream.simpleReadObject(IIOPInputStream.java:477)
at com.ibm.rmi.io.ValueHandlerImpl.readValue(ValueHandlerImpl.java:210)
at com.ibm.rmi.iiop.CDRReader.read_value(CDRReader.java:1573)
at com.ibm.rmi.iiop.CDRReader.read_abstract_interface(CDRReader.java:1554)
at com.ibm.rmi.iiop.CDRReader.read_abstract_interface(CDRReader.java:1546)
at ilog.rules.res.session.impl.ejb3._EJSRemote0SFIlrStatefulSessionEJB3_476e3d99_Tie.execute__java_util_Map(_EJSRemote0SFIlrStatefulSessionEJB3_476e3d99_Tie.java)
at ilog.rules.res.session.impl.ejb3._EJSRemote0SFIlrStatefulSessionEJB3_476e3d99_Tie._invoke(_EJSRemote0SFIlrStatefulSessionEJB3_476e3d99_Tie.java)
at com.ibm.CORBA.iiop.ServerDelegate.dispatchInvokeHandler(ServerDelegate.java:623)
at com.ibm.CORBA.iiop.ServerDelegate.dispatch(ServerDelegate.java:476)
at com.ibm.rmi.iiop.ORB.process(ORB.java:513)
at com.ibm.CORBA.iiop.ORB.process(ORB.java:1574)
at com.ibm.rmi.iiop.Connection.respondTo(Connection.java:2845)
at com.ibm.rmi.iiop.Connection.doWork(Connection.java:2718)
at com.ibm.rmi.iiop.WorkUnitImpl.doWork(WorkUnitImpl.java:63)
at com.ibm.ejs.oa.pool.PooledThread.run(ThreadPool.java:118)
at com.ibm.ws.util.ThreadPool$Worker.run(ThreadPool.java:1604)
SERVER (id=4773e3aa, host=myhost.com) TRACE END.
vmcid: OMG minor code: 1 completed: No

CAUSE
You can specify which Java XOM resources and libraries to attach to a ruleset by setting the ruleset.managedxom.uris property as explained in the Information Center, section Decision Server V8.0 > Decision Server Rules > Managing business rule execution in Rule Execution Server > Deploying Java XOMs > Managed Java XOM > Managed Java XOM setup and lifecycle [http://pic.dhe.ibm.com/infocenter/dmanager/v8r0/topic/com.ibm.wodm.dserver.rules.res.managing/topics/con_res_managed_jxom_lifecycle.html]. 

However, rule sessions cannot retrieve the managed-XOM class loader: rule sessions, whether POJO, Java SE, or EJB (Enterprise JavaBean), cannot access the class loader to build input and output objects for execution. 

The managed Java XOM is therefore made available to the engine for ruleset parsing but not to the code that calls the ruleset. In the EJB case, rule sessions need to access the Java XOM classes so that they can serialize/deserialize the parameter objects of the custom XOM types that are exchanged with the remote client. 

This constraint means that the managed Java XOM feature is useful mostly for decision services or for rulesets with simple-type parameters.


RESOLVING THE PROBLEM
If the ruleset parameters are of XOM custom types, make the XOM classes accessible to the rule session by packaging them into the deployed application, along with the product rule sessions.



RELATED INFORMATION
#WODM V7.5 doc on Managed Java XOM [http://pic.dhe.ibm.com/infocenter/dmanager/v7r5/topic/com.ibm.dserver.res/Content/Business_Rules/_pubskel/Infocenter_Primary/ps_DS_Rule_Execution_Server1502.html]
Calling and packaging EJB rule sessions for Java EE [http://pic.dhe.ibm.com/infocenter/dmanager/v8r0/topic/com.ibm.wodm.dserver.rules.res.managing/topics/tsk_res_dev_ejb_packag_j2ee.html]