Title: IBM Span Platform LSF scheduled Platform MPI job ranks on all the CPU Cores within a single node - United States

Text:
 TECHNOTE (FAQ)

QUESTION
 You would like the Platform MPI jobs use all processors when multiple jobs are running on
a single node. Those jobs are all submitted via Platform LSF. 

ANSWER
By default the CPU affinity options available in Platform are all work within the domain on 1 Platform MPI job. The solution to address this issue is to enable CPU affinity with the awareness of the rank allocation from other Platform MPI jobs submitted by Platform LSF running on the same node. 
The way is to utilize Platform LSF CPU Affinity which is by default enabled in LSF 9.1.2.
By using Platform LSF CPU Affinity, Platform LSF will be selecting a set of computing units and set a CPU mask and pass on to it's controlled application. So that only the requested compute units will be available to Platform MPI application so you can easily turn on PMPI CPU Affinity by using 
"-aff=automatic" option.

The LSF CPU Affinity feature is used by a resource requirement string "affinity". This is a sophisticated feature which allows you configure computing units, policy based on your unique needs. You can find more information here: http://www-01.ibm.com/support/knowledgecenter/SSETD4_9.1.2/lsf_admin/numa_cpu_mem_affinity_support_lsf.dita?lang=en [http://www-01.ibm.com/support/knowledgecenter/SSETD4_9.1.2/lsf_admin/numa_cpu_mem_affinity_support_lsf.dita?lang=en]

Below is demonstration of how this works.
On the execution host there are 8 CPU cores spread on 2 sockets. 3 Platform MPI jobs each with 2 ranks and these jobs will be dispatched to the same host. 
The job submission command used is 

bsub -o %J.out -e %J.err -n 2 -R "affinity[core(1)*1]" mpirun -prot -aff=automatic -affopt=v -lsf ./hello

Note that 1*core per task (or rank) for this job is requested. Platform LSF will select 2 cores for each of above jobs. Repeat this for 3 times and get the following 3 jobs: 
534, 535, 536.
By viewing the CPU Affinity mapping from Platform MPI job output, you can see that the jobs are using different sets of CPU cores for job execution. 

Job 534 output:
[root@host1 ~]# cat 534.out
<irrelevant output omitted>

Host 0 -- ip 192.168.1.1 -- [0 1 2 3][4 5 6 7]
- R0: [1 0 0 0][--] : 0x1
- R1: [0 1 0 0][--] : 0x2
Hello world! I'm 0 of 2 on host1
Hello world! I'm 1 of 2 on host1
Hello againHello again

<irrelevant output omitted>

Job 535 output:
[root@host1 ~]# cat 535.out
<irrelevant output omitted>

Host 0 -- ip 192.168.1.1 -- [0 1 2 3][4 5 6 7]
- R0: [0 0 1 0][--] : 0x4
- R1: [0 0 0 1][--] : 0x8
Hello world! I'm 0 of 2 on host1
Hello world! I'm 1 of 2 on host1
Hello againHello again

<irrelevant output omitted>

Job 536 output:
<irrelevant output omitted>

Host 0 -- ip 192.168.1.1 -- [0 1 2 3][4 5 6 7]
- R0: [--][1 0 0 0] : 0x10
- R1: [--][0 1 0 0] : 0x20
Hello world! I'm 0 of 2 on host1
Hello world! I'm 1 of 2 on host1
Hello againHello again

<irrelevant output omitted>


 


Cross reference information Segment Product Component Platform Version Edition Platform Computing Platform LSF Platform Independent 9.1.2, 9.1.3 IBM Spectrum Computing IBM Spectrum MPI Platform Independent 9.1.2, 9.1.3