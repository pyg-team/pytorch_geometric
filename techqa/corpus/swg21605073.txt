Title: IBM Retrieving the BIOS Version on Windows Targets - United States

Text:
bios windows customer server template cst taddm 5724n5500 TECHNOTE (FAQ)

QUESTION
 How can you retrieve and set the BIOS Version during a discovery? 

ANSWER
While the CDM (Common Data Model) defines the ROMVersion attribute to hold the BIOS details of a ComputerSystem, TADDM discovery does not read that attribute from the targets.
One way of retrieving this value for Windows targets is to read the Registry key HKEY_LOCAL_MACHINE\HARDWARE\Description\System\SystemBiosVersion using Computer System Extension.
Extensions can be implemented by executing a target OS Command or by running a Jython script on TADDM server. The Windows command that we need to run to retrieve the Registry key above is:

REG QUERY HKEY_LOCAL_MACHINE\HARDWARE\Description\System /v SystemBiosVersion

The problem with running this command is that some extra info will be returned in addition to the BIOS version. Due to the lack of a regular expression command in Windows, like awk, the only way to filter the BIOS version from the returned string is to use a Jython script.

To enable this script to run:
1. In TADDM Java Client, go to the Discovery tab and then select Computer Systems.
2. Click on WindowsComputerSystemTemplate then select Edit. Enable the Template.
3. Go to this directory on TADDM Server <COLLATION_HOME>/dist/etc/templates/commands and create a file with a name WindowsComputerSystemTemplate. This is important, the file name to match the Template name in step 2 exactly.
4. Insert this line in the file created above:
SCRIPT:etc\templates\commands\biosv.py
5. In the same directory as WindowsComputerSystemTemplate file create a file with name biosv.py and paste this code in it:
import sys
import java

from java.lang import System
coll_home = System.getProperty("com.collation.home")

System.setProperty("jython.home",coll_home + "/external/jython-2.1")
System.setProperty("python.home",coll_home + "/external/jython-2.1")

jython_home = System.getProperty("jython.home")
sys.path.append(jython_home + "/Lib")
sys.path.append(coll_home + "/lib/sensor-tools")
sys.prefix = jython_home + "/Lib"

import traceback
import string
import re
import jarray
import sensorhelper

# error logger function

def LogError(msg):
log.error(msg)
(ErrorType, ErrorValue, ErrorTB) = sys.exc_info()
traceback.print_exc(ErrorTB)

# main

try:
(os_handle, result, computersystem, seed, log) = sensorhelper.init(targets)

response = sensorhelper.executeCommand("REG QUERY HKEY_LOCAL_MACHINE\HARDWARE\Description\System /v SystemBiosVersion")
if response != None:
match = re.search(".*SystemBiosVersion\s+\S+\s+(.*)", response)
if match != None:
computersystem.setROMVersion(match.group(1))
result.setComputerSystem(computersystem)
else:
log.info("Regex didnt match")
else:
log.info("Had a problem with the reg query")
except:
LogError("Unexpected exception getting registry information")



Run Level 2 discovery and check the script output in WindowsComputerSystemSensor-xxxx.log file under <COLLATION_HOME>/dist/log/sensors/<Current run timestamp>

Note: Populating an attribute in the Common Data Model does not make it appear in the Product Console Details pane for the component. The attribute is, however, stored in the database and can be retrieved using the TADDM SDK or through Database Views while developing BIRT reports. An alternative way to show the attribute in the Details panel is to create an Extended Attribute for it. The script will need to be different in this case. You will not be able to call computersystem.setxxxx() method. Extended Attributes APIs will need to be used. Further help on this APIs are here:
http://publib.boulder.ibm.com/infocenter/tivihelp/v10r1/topic/com.ibm.taddm.doc_7.1.2/SDKDevGuide/c_cmdbsdk_customserver_developing.html [http://publib.boulder.ibm.com/infocenter/tivihelp/v10r1/topic/com.ibm.taddm.doc_7.1.2/SDKDevGuide/c_cmdbsdk_customserver_developing.html] 

 

PRODUCT ALIAS/SYNONYM
 TADDM