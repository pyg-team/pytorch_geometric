Title: IBM Using an exception handler when executing rules in Rule Execution Server - United States

Text:
Features:Exception Handling; Modules:Execution Server (BRES / RES); context; exception; exception handler; handler; ruleset; setExceptionHandler TECHNOTE (FAQ)

QUESTION
 How do I set an exception handler on a ruleset when using Rule Execution Server? 

ANSWER
Exception handlers are implementations of the ilog.rules.engine.IlrExceptionHandler [http://pic.dhe.ibm.com/infocenter/dmanager/v8r0m1/topic/com.ibm.wodm.dserver.rules.ref.res/html/api/html/ilog/rules/engine/IlrExceptionHandler.html] interface and catch runtime exceptions. Use them to define how the engine handles such exceptions during the ruleset execution.

To use an exception handler at the rule level (only used with RetePlus), set it on the context with: 

 * 
 * IlrContext.setExceptionHandler(IlrExceptionHandler handler)


or at the ruleflow level with:  * 
 * IlrContext.setRuleflowExceptionHandler( IlrExceptionHandler handler).


The exception handler at the rule level allows to resume the execution after the exception is caught, while at the ruleflow level, the rule execution will stop after the exception handler is called. You can set the handler at both levels if needed to cover both cases. 

 

Because Rule Execution Server hides the IlrContext object from the application, you cannot set the exception handler directly using the client Rule Execution Server API.

In IRL (language of the rule engine), the keyword context represents that same context object. Therefore, you can set the exception handler in the ruleset itself, either in the initial actions of the ruleflow or in a dedicated function task. 

 

But because the IRL is based on the Business Object Model (BOM), set the exception handler in the B2X (BOM to XOM) code of a virtual BOM method instead. The B2X is based on the Execution Object Model (XOM) and has access to the same keyword context. This way, you do not have to modify your BOM to add your exception handler class. In that case, your B2X code would look like this:


 * context.setExceptionHandler( new MyExceptionHandler() );
 * 
 * context.setRuleflowExceptionHandler( new MyExceptionHandler() );


Do not set a verbalization for that virtual BOM method so it remains invisible to rule authors while you will be able invoke it in IRL with, for example: 

 * 
 * test.Utility.setMyExceptionHandler();
 * 


 

Because you work in the ruleset, this exception handler will be active each time the rules are executed, no matter how Rule Execution Server is called: through a hosted or monitored transparent decision service (HTDS/MTDS), or through a POJO or EJB rule session. 

 

Important: 

 * For most application servers, you must package the exception handler class with the Execution Unit (XU) in the RAR file, to prevent class-loading errors. 
 * Do not package the engine JAR in your application, to prevent any class-loading conflict. 
 * Remember to remove the exception handler at the end of the execution to prevent any memory leakage. Keep no reference to the context because it will be reused. Write:  * context.setExceptionHandler( null );
    * 
    * context.setRuleflowExceptionHandler( null );
   
   

RELATED INFORMATION
 ODM V8.5 on setting an exception handler [http://pic.dhe.ibm.com/infocenter/dmanager/v8r5/topic/com.ibm.wodm.dserver.rules.designer.run/executing_engine_topics/tsk_rulesetexec_set_handler.html]




Cross reference information Segment Product Component Platform Version Edition Business Integration IBM Operational Decision Manager Platform Independent 8.5, 8.0, 7.5 
HISTORICAL NUMBER
 jrules/FAQ/203