Title: IBM JAX-WS Web Service Generation Wizard does not support Maven-based projects - United States

Text:
 TECHNOTE (TROUBLESHOOTING)

PROBLEM(ABSTRACT)
 Using the IBM Rational Application Developer (RAD) JAX-WS Web Service Generation Wizard to generate a web service from a Maven project fails during the generation step. The tool is not be able to locate class files necessary for generation. 

SYMPTOM
As of Rational Application Developer 9.1.x, which is included by IBM Rational Software Architect (RSA), Maven-based projects are not supported by the JAX-WS Web Service Generation Wizard functionality that is built into RAD/RSA. 

This functionality is traditionally accessed by the user by right-clicking on a WSDL file, or right-clicking an existing JAX-WS/JAX-RS service from the Services View (in Java EE perspective) or the Services tree item in the Enterprise Explorer view. This includes Web service and Web service client generation, and would affect both traditional WAS/Liberty.

The RAD/RSA Web Service generation wizard invokes the wsgen/wsimport tools that are bundled with WebSphere Application Server (WAS) v7/v8/v8.5 and Liberty. In doing so, the RAD/RSA wizard builds a classpath based on the dependencies of the Web Services' Web Project. In the non-Maven environment, these dependencies are populated in the Web Project as User Libraries and WAS Runtime dependencies. However, in a Maven project, dependencies are stored in a separate Maven-managed dependency list, which is not handled by the Web services tooling. Consequently, the generation will fail.


RESOLVING THE PROBLEM
The wsgen/wsimport tools of WAS/Liberty may still be invoked from Maven (by calling them with maven exec). In WAS, wsgen/wsimport tools are available under (WAS install dir)\bin. In Liberty, these are available from (liberty install dir)\bin\jaxws and (liberty install dir)\bin\jaxrs. 

Wsgen may be used to generate a WSDL file from existing JAX-WS Java classes (bottom-up). 

Wsimport may be used to generate JAX-WS Java classes from an existing WSDL file (top-down). 

More information on how to use these tools is available from WAS/Liberty runtime documentation. The resulting files (WSDL file, or .java class files) maybe generated/copied into your Maven project, to allow them to be included in the project.