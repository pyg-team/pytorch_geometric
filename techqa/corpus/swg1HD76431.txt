Title: IBM HD76431: The response of calling GetComputedEffectivity() is too slow - United States

Text:
 SUBSCRIBE
You can track all active APARs for this component.



APAR STATUS
 * CLOSED AS PERMANENT RESTRICTION.
    
   
   

ERROR DESCRIPTION
 *  PROBLEM: The response of calling
   GetComputedEffectivity() is too slow.
   .
   PRE-REQUISITE:
   CREATING DATA:
   01. Create 2 Product in LCA -> Product-A &
   Product-B
   02. Create 5000 Part Instances under Product-B
   03. Configure Product-B and set range effectivity to
   all instances
   04. Create COPS under Product-B
   05. Configure Product-A
   06. Add COPS under Product-A and set range
   effectivity (5-99) to the COPS instance
   07. Create Product Specification under Product-A
   and set some filter criteria.
   .
   SCENARIO:
   <Short Description>
   Under the above configured BOM with COPS,
   calling GetComputedEffectivity() takes very long
   time compared with other api call.
   .
   <Scenario to re-produce>
   I have attached the sample program to re-produce
   for this slow performance.
   To use this program, please compile "XXXTestModule1 & XXXTestMod
   ule2
   .
   Then run each program as follows.
   .
   A) XXXTestModule1 <Product Specification ID for
   the data created above>
   .
   B) XXXTestModule2 <Product Specification ID for
   the data created above>
   .
   What XXXTestModule1 do
   1) Expand tree by using Product Spec (get_Tree
   api)
   2) Get instance effectivity value for each instances
   of 1) result
   (GetComputedEffectivity api)
   3) Close session (CloseSession api)
   .
   What XXXTestModule2 do
   1) Expand tree by using Product Spec (get_Tree
   api)
   2) Close session (CloseSession api)
   This module is only for comparing with XXXTestModule1.
   .
   RESULT:
   As long as customer has tested,
   GetComputedEffectivity takes 27 min
   31sec for 5000 instances.
   .
   EXPECTED RESULT:
   Customer is expecting much faster response for
   this api call.
   
   
    
   
   

LOCAL FIX

PROBLEM SUMMARY
 *  PROBLEM: The response of calling
   GetComputedEffectivity() is too slow.
   .
   PRE-REQUISITE:
   CREATING DATA:
   01. Create 2 Product in LCA -> Product-A &
   Product-B
   02. Create 5000 Part Instances under Product-B
   03. Configure Product-B and set range effectivity to
   all instances
   04. Create COPS under Product-B
   05. Configure Product-A
   06. Add COPS under Product-A and set range
   effectivity (5-99) to the COPS instance
   07. Create Product Specification under Product-A
   and set some filter criteria.
   .
   SCENARIO:
   <Short Description>
   Under the above configured BOM with COPS,
   calling GetComputedEffectivity() takes very long
   time compared with other api call.
   .
   <Scenario to re-produce>
   I have attached the sample program to re-produce
   for this slow performance.
   To use this program, please compile "XXXTestModule1 &
   XXXTestModule2
   .
   Then run each program as follows.
   .
   A) XXXTestModule1 <Product Specification ID for
   the data created above>
   .
   B) XXXTestModule2 <Product Specification ID for
   the data created above>
   .
   What XXXTestModule1 do
   1) Expand tree by using Product Spec (get_Tree
   api)
   2) Get instance effectivity value for each instances
   of 1) result
   (GetComputedEffectivity api)
   3) Close session (CloseSession api)
   .
   What XXXTestModule2 do
   1) Expand tree by using Product Spec (get_Tree
   api)
   2) Close session (CloseSession api)
   This module is only for comparing with XXXTestModule1.
   .
   RESULT:
   As long as customer has tested,
   GetComputedEffectivity takes 27 min
   31sec for 5000 instances.
   .
   EXPECTED RESULT:
   Customer is expecting much faster response for
   this api call.
   
   
    
   
   

PROBLEM CONCLUSION
 *  THIS PROBLEM IS PERMANENT RESTRICTION
   Additional Closure Information:
   THIS PROBLEM IS PERMANENT RESTRICTION
   Additional Closure Information:
   Incident Diagnosis:
   Computed Effectivity reflects the common
   effectivity from the top assembly down to the
   selected instance.
   For every instance it makes a check with the
   parent of the current item instance and then its
   parent till it hits the PRC.
   This is the way it needs to be. Computed Effectivity
   is only displayed in the configuration tab of the LCA
   client and is not saved to the DB.
   .
   Restriction Explanation:
   In case of a batch, where all instances are present
   in a list, this algorithm has inherent limitations and
   will cause a performance hit.
   .
   By-Pass:
   Adopt a top-down approach while computing all the
   effectivities and forming an intersection of the
   effectivities
   
   
    
   
   

TEMPORARY FIX

COMMENTS

APAR INFORMATION
 * APAR NUMBER
   HD76431
   
   
 * REPORTED COMPONENT NAME
   CAA V5 AIX
   
   
 * REPORTED COMPONENT ID
   569101100
   
   
 * REPORTED RELEASE
   518
   
   
 * STATUS
   CLOSED PRS
   
   
 * PE
   NoPE
   
   
 * HIPER
   NoHIPER
   
   
 * SPECIAL ATTENTION
   NoSpecatt
   
   
 * SUBMITTED DATE
   2008-07-23
   
   
 * CLOSED DATE
   2011-03-17
   
   
 * LAST MODIFIED DATE
   2011-03-17
   
   

 * APAR IS SYSROUTED FROM ONE OR MORE OF THE FOLLOWING:
   
   
   
 * APAR IS SYSROUTED TO ONE OR MORE OF THE FOLLOWING:
   
   
   

FIX INFORMATION

APPLICABLE COMPONENT LEVELS