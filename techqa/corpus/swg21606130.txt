Title: IBM Setting up SSL enabled JCC driver connection from Data Studio  to DB2 server - United States

Text:
ssl jcc data studio setup keystore TECHNOTE (TROUBLESHOOTING)

PROBLEM(ABSTRACT)
 Setting up SSL communication between client and server needs detailed configuration on both server and client sides. 

SYMPTOM
 
Error creating SQL Model Connection connection to DSNXSEC. (Error: 
[jcc][t4][2043][11550][3.62.56] Exception java.io.IOException: Error 
opening socket to server /172.27.64.68 on port 449 with message: Invalid 
keystore format. ERRORCODE=-4499, SQLSTATE=08001) 

[jcc][t4][2043][11550][3.62.56] Exception java.io.IOException: Error 
opening socket to server /172.27.64.68 on port 449 with message: Invalid 
keystore format. ERRORCODE=-4499, SQLSTATE=08001 

Error creating JDBC Connection connection to DSNXSEC. (Error: 
[jcc][t4][2043][11550][3.62.56] Exception java.io.IOException: Error 
opening socket to server /172.27.64.68 on port 449 with message: Invalid 
keystore format. ERRORCODE=-4499, SQLSTATE=08001) 


[jcc][t4][2043][11550][3.62.56] Exception java.io.IOException: Error 
opening socket to server /172.27.64.68 on port 449 with message: Invalid 
keystore format. ERRORCODE=-4499, SQLSTATE=08001 



CAUSE
SSL configuration is not done right.

RESOLVING THE PROBLEM
Once you have configured SSL support in your DB2 server , you will need to do the following steps on the Optim Data Studio for SSL Connection:

Right-click the Database --> Properties
Modify the Driver Properties with the port number pointing to SSL port number.
Under Optional tab--> add

sslTrustStoreLocation should point to the directory and file that has the ?keystore? .
sslTrustStorepassword should have the password for accessing the ?keystore? file. (This is the information you provide to the ?keytool? utility)
sslConnection=true.



Eclipse documentation:

Working with SSL [http://help.eclipse.org/indigo/topic/org.eclipse.rse.doc.user/tasks/tworkssl.html?resultof=%22%73%73%6c%22%20l]

From this documentation:

------------------------------------------------------------------------

Setting Up The Server

You set up the DStore server to use SSL by editing the ssl.properties file in the server location. This server names the keystore and its password used for holding certificates generated using the keytool utility from the Java SDK. These certificates are then given to the client during SSL startup so that communications can be encrypted. 
The keystore file referenced by ssl.properties can contain several entries but only one is used when a client connects. The entries in the keystore may themselves have passwords, but dstore assumes that these are all the same as the keystore password. It makes sense, therefore, to maintain only one keystore for the dstore server, that it have only
it to have only one entry, and that it exist in the same directory as the dstore server. That entry can be a self-signed certificate. 
The following command will create a keystore and add a single self-signed certificate to it.

keytool -genkey -keystore keystore_file -alias entry_name -storepass d98kMn50sV -dname "CN=dstore server, OU=division, O=company, L=city, ST=state, C=country"



The command would be entered on a single line. It appears here on multiple lines for readability.

After entering this command you will be prompted to supply a password for the entry itself. You should press enter to take the default which is the keystore password.

One would then edit the ssl.properties file to use this as follows: 
daemon_keystore_file=keystore_file
daemon_keystore_password=d98kMn50sV

------------------------------------------------------------------------


This document is silent on details re: JSSE configuration, so I include for reference the following from DB2 (LUW) 9.7 Information Center: 
Configuring the Java Runtime Environment to use SSL [http://pic.dhe.ibm.com/infocenter/db2luw/v9r7/topic/com.ibm.db2.luw.apdv.java.doc/src/tpc/imjcc_t0054066.html] 

DB2 (LUW) 10.1 Information Center:
Configuring the Java Runtime Environment to use SSL [http://pic.dhe.ibm.com/infocenter/db2luw/v10r1/topic/com.ibm.db2.luw.apdv.java.doc/src/tpc/imjcc_t0054066.html?resultof=%22%73%73%6c%22%20%22%6a%63%63%22%20]



From this documentation:

------------------------------------------------------------------------

To configure your Java Runtime Environment to use SSL, follow these steps.

1. Import a certificate from the database server to a Java truststore on the client.

Use the Java keytool utility to import the certificate into the truststore.
For example, suppose that the server certificate is stored in a file named jcc.cacert. Issue the following keytool utility statement to read the certificate from file jcc.cacert, and store it in a truststore named cacerts.

keytool -import -file jcc.cacert -keystore cacerts


2. Configure the Java Runtime Environment for the Java security providers by adding entries to the java.security file.

The format of a security provider entry is:

security.provider.n=provider-package-name

A provider with a lower value of n takes precedence over a provider with a higher value of n.

The Java security provider entries that you add depend on whether you use the IBM JSSE provider or the SunJSSE provider.

If you use the SunJSSE provider, add entries for the Oracle security providers to your java.security file.
If you use the IBM JSSE provider, use one of the following methods: * Use the IBMJSSE2 provider (supported for the IBM SDK for Java 1.4.2 and later):
* Recommendation: Use the IBMJSSE2 provider, and use it in FIPS mode.
...

Example: Use a java.security file similar to this one if you need to run in FIPS-compliant mode, and you enable FIPS mode in the IBMJSSE2 provider:

# Set the Java security providers
security.provider.1=com.ibm.jsse2.IBMJSSEProvider2
security.provider.2=com.ibm.crypto.fips.provider.IBMJCEFIPS security.provider.3=com.ibm.crypto.provider.IBMJCE
security.provider.4=com.ibm.security.jgss.IBMJGSSProvider
security.provider.5=com.ibm.security.cert.IBMCertPath
security.provider.6=com.ibm.security.sasl.IBMSASL

...

3. If you plan to use the IBM Data Server Driver for JDBC and SQLJ in FIPS-compliant mode, you need to set the com.ibm.jsse2.JSSEFIPS Java system property:

com.ibm.jsse2.JSSEFIPS=true
...

4. Configure the Java Runtime Environment for the SSL socket factory providers by adding entries to the java.security file. This step is not necessary if you are using the SunJSSE provider and the Java Runtime Environment, 7 or later.

The format of SSL socket factory provider entries are:

ssl.SocketFactory.provider=provider-package-name
ssl.ServerSocketFactory.provider=provider-package-name

Specify the SSL socket factory provider for the Java security provider that you are using.

Example: Include SSL socket factory provider entries like these in the java.security file when you enable FIPS mode in the IBMJSSE2 provider: 
# Set the SSL socket factory provider
ssl.SocketFactory.provider=com.ibm.jsse2.SSLSocketFactoryImpl 
ssl.ServerSocketFactory.provider=com.ibm.jsse2.SSLServerSocketFactoryImp l
...


5. Configure Java system properties to use the truststore.

To do that, set the following Java system properties:

javax.net.ssl.trustStore

Specifies the name of the truststore that you specified with the -keystore parameter in the keytool utility in step 1.

If the IBM Data Server Driver for JDBC and SQLJ property DB2BaseDataSource.sslTrustStoreLocation is set, its value overrides the javax.net.ssl.trustStore property value.

javax.net.ssl.trustStorePassword (optional)

Specifies the password for the truststore. You do not need to set a truststore password. However, if you do not set the password, you cannot protect the integrity of the truststore.

If the IBM Data Server Driver for JDBC and SQLJ property DB2BaseDataSource.sslTrustStorePassword is set, its value overrides the javax.net.ssl.trustStorePassword property value.

Example: One way that you can set Java system properties is to specify them as the arguments of the -D option when you run a Java application. Suppose that you want to run a Java application named MySSL.java, which accesses a data source using an SSL connection. You have defined a truststore named cacerts. The following command sets the truststore name when you run the application.

java -Djavax.net.ssl.trustStore=cacerts MySSL


6. Configure Java system properties to use the keystore. You need to perform this step if you use client certificate security (IBM Data Server Driver for JDBC and SQLJ property
DB2BaseDataSource.securityMechanism is set to
DB2BaseDataSource.TLS_CLIENT_CERTIFICATE_SECURITY).

To do that, set the following Java system properties:

javax.net.ssl.keyStore

Specifies the name of the keystore that you specified with the -keystore parameter in the keytool utility in step 1.

javax.net.ssl.keyStorePassword (optional)

Specifies the password for the keystore. You do not need to set a keystore password. However, if you do not set the password, you cannot protect the integrity of the keystore.

Example: One way that you can set Java system properties is to specify them as the arguments of the -D option when you run a Java application. Suppose that you want to run a Java application named MySSL.java, which accesses a data source using an SSL connection. You have defined a keystore named cacerts. The following command sets the keystore name when you run the application.

java -Djavax.net.ssl.keyStore=cacerts MySSL


------------------------------------------------------------------------


If you require further assistance, we will need customer to test using a standalone Java program. First, please confirm configuration per above documentation, and obtain a trace for the Data Studio case from the Data Explorer 'Tracing' panel for the connection.

Connecting to a database by using a wizard [http://pic.dhe.ibm.com/infocenter/idm/v2r2/topic/com.ibm.datatools.conne%20ction.ui.doc/topics/tconnecting_wiz.htm]