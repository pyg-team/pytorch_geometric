Title: IBM TRIRIGA Web Services is not working on WebSphere 8.5.5 with TRIRIGA 3.4.2 and reports "IncompatibleClassChangeError" error - United States

Text:
TRICONFIG; TRIBC; TRIUPGRADE; TRIWEBSPHERE; #IOTSUPPORT; #SUPIWMS TECHNOTE (TROUBLESHOOTING)

PROBLEM(ABSTRACT)
 TRIRIGA Web Services (WSDL) is not working on WebSphere 8.5.5 with TRIRIGA 3.4.2 and reports error "IncompatibleClassChangeError". 

SYMPTOM
WSDL is not working. 


The full error message is as follows:

Caused by: java.lang.IncompatibleClassChangeError: 
org.apache.neethi.AssertionBuilderFactory 




CAUSE
Tririga 3.4.2 uses the Neethi 3.0.2 jar to support the web services associated with business connector. However, it seems that Websphere 8.5.5.5 uses an earlier version of Neethi internally via [websphere root] \AppServer\plugins\org.apache.axis2.jar. The two versions of Neethi don't particularly care for each other and result in an IncompatibleClassChangeError problem.


Caused by: java.lang.IncompatibleClassChangeError: 
org.apache.neethi.AssertionBuilderFactory 


Without the Tririga 3.4.2 Neethi, web services do not work. Without the org.apache.axis2.jar, the WebSphere admin console (and probably some other things) do not work.


DIAGNOSING THE PROBLEM
Troubleshooting steps taken: 

Tried every option for class loading (parent first vs last, single class loader vs multiple class loaders for each app/war). Also disabled the internal WebSphere processes known to conflict com.ibm.websphere.webservices.DisableIBMJAXWSEngine). These efforts don't seem to work. If I set Parent Last at the module level I'm left with the conflict between Neethi versions. If I set Parent Last at the application level then I get a linkage error involving org.xml.sax. ErrorHandler.


RESOLVING THE PROBLEM
The specific resolution to this case is to assure that the TRIRIGAOverride shared library has the option selected for "Use an isolated class loader for this shared library". 

 

Here is a more detailed list of items to check should you encounter this issue. 

 

The TRIRIGA installer automatically generates a WebSphere shared library called TRIRIGAOverride. It does this to get around WebSphere conflicts with Neethi.3.0.2.jar, and possibly other jars. 




 1. Validate that the TRIRIGAOverride shared library is correctly configured in the WebSphere Admin Console. 
     1. To do this, in the WebSphere Admin Console navigate to Environments->Shared Libraries.
        
     2. There should be an entry for TRIRIGAOverride. If it exists, open it and validate the classpath is pointing to TRIRIGA_INSTALLATION_FOLDER\lib\override. Something like: c:\Tririga\lib\override.
        
    
    
 2. Also validate that the directory TRIRIGA_INSTALLATION_FOLDER\lib\override exists on the system.
    
    This folder should contain at least the following jars. These are webservice specific jars.
    commons-codec-1.6.jar
    commons-logging-1.1.jar
    httpclient-4.3.1.jar
    httpcore-4.3.jar
    neethi-3.0.2.jar
    xmlschema-core-2.0.3.jar
    
    
 3. Confirm that the TRIRIGAOverride shared library has the option selected for "Use an isolated class loader for this shared library". 
    
    
 4. Once it is validated that the TRIRIGAOverride Shared Library is correctly configured (previous comment), validate that their TRIRIGA application is referencing it.
    
    To do this, in the WebSphere Admin Console:  1. Navigate to Applications > Application Types > WebSphere enterprise applications. 
     2. Click tririga-ibs 
     3. In the References section, select Shared library references. Select the check box for TRIRIGA IBS and click Reference shared libraries. 
     4. Validate that TRIRIGAOverride appears in the selected list.
        
        
    
    
 5. Save the change and restart server.