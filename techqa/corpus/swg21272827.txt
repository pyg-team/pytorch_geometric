Title: IBM ClassCastException when using BOFactory.createByMessage with a doc-lit-wrapped style message - United States

Text:
java.lang.ClassCastException:SCA Invocation; SCA; v602rnotes; classcastexception; BOFactory; service component architecture; v61rnotes TECHNOTE (TROUBLESHOOTING)

PROBLEM(ABSTRACT)
 Invoking a Service Component Architecture (SCA) component by passing data object wrappers from BOFactory.createByMessage(...) results in an ClassCastException or EVALUATE_SDO_PATH_ERROR__PATH when the interface is of the doc-lit-wrapped style. 

SYMPTOM
Invoking an SCA component using the result of BOFactory.createByMessage(...) results in an exception similar to the following, when the message is of the doc-lit-wrapped style. 

java.lang.ClassCastException: The value of type 'commonj.sdo.DataObject <Interfaces/Invoke#InvokeType>@2d47cbbd' must be of type 'commonj.sdo.DataObject <Interfaces#SimpleBO>@297c0bbd'
at com.ibm.ws.sca.internal.mediation.handler.InterfaceMediationHandler.throwClassCastException(InterfaceMediationHandler.java:116)
at com.ibm.ws.sca.internal.mediation.handler.InterfaceMediationHandler.validateWrapper2Wrapper(InterfaceMediationHandler.java:207)
at com.ibm.ws.sca.internal.mediation.handler.InterfaceMediationHandler.validateBodyValue(InterfaceMediationHandler.java:89)
at com.ibm.ws.sca.internal.mediation.handler.InterfaceMediationHandler.processMessage(InterfaceMediationHandler.java:599)

In BO Lazy mode, the exception might look like below:

java.lang.reflect.InvocationTargetException
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:48)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:37)
at java.lang.reflect.Method.invoke(Method.java:600)
at com.ibm.ws.sca.internal.java.handler.JavaReflectionAdapter$2.run(JavaReflectionAdapter.java:152)
at java.security.AccessController.doPrivileged(AccessController.java:202)
at com.ibm.ws.sca.internal.java.handler.JavaReflectionAdapter.invoke(JavaReflectionAdapter.java:149)
at com.ibm.ws.sca.internal.java.handler.JavaImplementationHandler.invokeSync(JavaImplementationHandler.java:447)
at com.ibm.ws.sca.internal.java.handler.JavaImplementationHandler.processMessage(JavaImplementationHandler.java:195)
Caused by: java.lang.IllegalArgumentException: EVALUATE_SDO_PATH_ERROR__PATH
at com.ibm.xml.sdo.model.path.PathManager.evaluateSDOPath(Unknown Source)
at com.ibm.xml.sdo.model.path.PathManager.evaluatePath(Unknown Source)
at com.ibm.xml.sdo.model.DataObjectElement.getString(Unknown Source)
at com.ibm.ws.sdox.extension.DataObjectElementExt.getString(Unknown Source)
at com.ibm.ws.box.bomodel.impl.BusinessObjectStaticBase.getString(BusinessObjectStaticBase.java:270)
at com.ibm.ws.box.bomodel.impl.BusinessObjectImpl.getString(BusinessObjectImpl.java:550)
... 52 more


CAUSE
For doc-lit-wrapped style interface, the argument passed into SCA is expected to be the operation wrapper, not the message wrapper.

<types>
<schema>
<element name="myMethod">
<complexType>
<sequence>
<element name="x" type="xsd:int"/>
<element name="y" type="xsd:float"/>
</sequence>
</complexType>
</element>
<element name="myMethodResponse">
<complexType/>
</element>
</schema>
</types>
<message name="myMethodRequest">
<part name="parameters" element="myMethod"/>
</message>
<message name="empty">
<part name="parameters" element="myMethodResponse"/>
</message>

For example, in the above doc-lit-wrapped interface, the expected wrapper is "myMethod", not "myMethodRequest".


RESOLVING THE PROBLEM
Use BOFactory.createByType(...) rather than BOFactory.createByMessage(...) when using the doc-lit-wrapped message style. 


Specifically, the following SCA code snippet can be used to obtain the input operation type for wrapper creation.

OperationType operationType = service.getReference().getOperationType(opname);
DataObject input = boFactory.createByType(operationType.getInputType());