Title: IBM IY96362: SNMP PROBE - PEER TO PEER: DISCREPANCY IN TOTAL NUMBER OF EVENTS - United States

Text:
 SUBSCRIBE
You can track all active APARs for this component.



APAR STATUS
 * CLOSED AS PROGRAM ERROR.
    
   
   

ERROR DESCRIPTION
 *  Our setup:
   
     We ran two independent ObjectServers (v7.1, Fix Pack 1) on
   separate hosts, not connected by any gateways.  We then pointed
   an MTTrapd probe at each Object Server.  These two probes were
   configured to run under Peer-to-Peer mode with each other.  I
   used the attached script to send the same trap 1000 times (at 10
   traps per second) to both probes.
   
   We also used the following properties:
   
   Heartbeat               : 1000000
   NoNameResolution        : 1
   PeerHost                : 'wcars950'
   Peerport                : 9999
   
   Control run - Master probe not killed
      In our control run, we saw that the Master probe handled all
   1000 traps, and the Slave did not send any, as expected.
   
   First run - default mttrapd.rules
      We used the default rules file with the probes for the first
   run, as they are fairly small compared to NCKL.  We stopped the
   master probe after about 500 traps out of 1000 had been sent.
   The Master probe went down fairly quickly, and we saw the Slave
   probe take over.  When we totalled the Tally between both
   ObjectServers, we found the number to be 1010.  This was 10 more
   than there should have been, meaning that we had duplicate
   events (10 events where both probes sent the alerts).
   
   Second run - NCKL rules
      We left the Slave probe running, and restarted the Master
   probe while pointed to the NCKL rules.  The event processing was
   much slower going through NCKL (partly due to size of rule set,
   partly due to machine specs).  After around 500 traps had been
   sent, we stopped the Master via a "kill <PID>" as before.
   However, the Master did not stop right away.  It stayed up for a
   few minutes while it processed the traps it had received up
   until the time we sent the kill.  While it was processing its
   remaining events, the Master was also heartbeating the Slave
   probe.  This prevented the Slave probe from taking over and
   sending any events at all.  When all 1000 traps had been sent,
   and the Master probe process finally went down, we had 530
   events in the Master ObjectServer, and zero events in the Slave.
   This meant that we lost almost 500 traps at the probe level.
   
   We would expect that if the Master probe is shutdown, and that
   probe stops paying attention to new traps that come in, that the
   probe would also stop heartbeating the Slave.
   
   The Script:
   
   #! /usr/bin/perl
   
   use Net::SNMP;
   
   my $j=0;
   
   my @varbinds = [ '1.3.6.1.4.1.2272.1.4.9.1.1.1', INTEGER, 27,
   '1.3.6.1.4.1.2272.1.4.9.1.1.5', INTEGER, 2,
   '1.3.6.1.4.1.2272.1.4.9.1.1.6', INTEGER, 2 ];
   
   my ($session1, $error1) = Net::SNMP->session(
    -hostname => 'wcars919',
    -port  => 162,
    -version => 1,
    -community => 'public',
   );
   print $session1->error . "\n" if !defined($session1);
   
   my ($session2, $error2) = Net::SNMP->session(
    -hostname => 'wcars950',
    -port  => 162,
    -version => 1,
    -community => 'public',
   );
   print $session2->error . "\n" if !defined($session2);
   
   for ($i=1; $i<=1000; $i++){
     my $result1 = $session1->trap(
    -enterprise => '1.3.6.1.4.1.2272.1.21',
    -generictrap => 6,
    -specifictrap => 1,
    -varbindlist => @varbinds
     );
   
     print "Host 1: " . $session1->error . "\n" if
   !defined($result1);
   
     my $result2 = $session2->trap(
    -enterprise => '1.3.6.1.4.1.2272.1.21',
    -generictrap => 6,
    -specifictrap => 1,
    -varbindlist => @varbinds
     );
   
     print "Host 2: " . $session2->error . "\n" if
   !defined($result2);
   
     $j++;
     if ($j%10==0){
       print "$j\n" if ($j%50==0);
       sleep(1);
     }
   }
   $session1->close;
   $session2->close;
   
   
   # -varbindlist =>['1.3.6.1.4.1.2272.1.4.9.1.1.1', INTEGER, 27,
   '1.3.6.1.4.1.2272.1.4.9.1.1.5', INTEGER, 2,
   '1.3.6.1.4.1.2272.1.4.9.1.1.6', INTEGER, 2 ]
   
   
    
   
   

LOCAL FIX
 *  No Fix or Work Around.
   
   
    
   
   

PROBLEM SUMMARY
 *  ****************************************************************
   * USERS AFFECTED: Users of some OMNIbus probes.                *
   ****************************************************************
   * PROBLEM DESCRIPTION: High event loss sometimes occurred      *
   *                      during the master to slave handover     *
   *                      period in a peer-to-peer failover       *
   *                      configuration.                          *
   *                                                              *
   ****************************************************************
   * RECOMMENDATION:                                              *
   *                                                              *
   ****************************************************************
   Event loss occurred if the event rate was high and a very large
   rules file (e.g. NcKL) was used. The large rules file, combined
   with the high event rate caused events to be backed up in the
   probe's input queue. When the master received the signal to
   shut down, it would ignore further incoming events but would
   continue the heartbeat polling to the slave probe until it had
   cleared out its backlog of events.
   
   
    
   
   

PROBLEM CONCLUSION
 *  For some probes the fix is statically linked into the code.
   These probes will have to be re-released:  nco_p_mttrapd
    nco_p_socket  nco_p_ping  nco_p_syslog  nco_p_syslog.juniper
    nco_p_nortel_iems  nco_p_nonnative
   
   The fix for this APAR is contained in the following maintenance
   packages:     | fix pack | 7.0.1.11-TIV-NCOMIbus-FP0011     |
   fix pack | 7.1.0.4-TIV-NCOMIbus-FP0004
   
   
    
   
   

TEMPORARY FIX

COMMENTS

APAR INFORMATION
 * APAR NUMBER
   IY96362
   
   
 * REPORTED COMPONENT NAME
   NC/OBUS MTTRAPD
   
   
 * REPORTED COMPONENT ID
   5724P03MT
   
   
 * REPORTED RELEASE
   100
   
   
 * STATUS
   CLOSED PER
   
   
 * PE
   NoPE
   
   
 * HIPER
   NoHIPER
   
   
 * SPECIAL ATTENTION
   NoSpecatt
   
   
 * SUBMITTED DATE
   2007-03-21
   
   
 * CLOSED DATE
   2007-08-14
   
   
 * LAST MODIFIED DATE
   2007-08-14
   
   

 * APAR IS SYSROUTED FROM ONE OR MORE OF THE FOLLOWING:
   
   
   
 * APAR IS SYSROUTED TO ONE OR MORE OF THE FOLLOWING:
   
   
   

MODULES/MACROS
 *     NETCOOL
   
   
    
   
   

FIX INFORMATION
 * FIXED COMPONENT NAME
   NC/OBUS MTTRAPD
   
   
 * FIXED COMPONENT ID
   5724P03MT
   
   

APPLICABLE COMPONENT LEVELS
 * R100 PSY
   UP