[build-system]
requires=["flit_core >=3.2,<4"]
build-backend="flit_core.buildapi"

[project]
name="torch-geometric"
version="2.6.0"
authors=[
    {name="Matthias Fey", email="matthias@pyg.org"},
]
description="Graph Neural Network Library for PyTorch"
readme="README.md"
requires-python=">=3.8"
keywords=[
    "deep-learning",
    "pytorch",
    "geometric-deep-learning",
    "graph-neural-networks",
    "graph-convolutional-networks",
]
classifiers=[
    "Development Status :: 5 - Production/Stable",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3 :: Only",
]
dependencies=[
    "aiohttp",
    "fsspec",
    "jinja2",
    "numpy",
    "psutil>=5.8.0",
    "pyparsing",
    "requests",
    "scikit-learn",
    "scipy",
    "tqdm",
]

[project.optional-dependencies]
graphgym=[
    "protobuf<4.21",
    "pytorch-lightning<2.3.0",
    "yacs",
]
modelhub=[
    "huggingface_hub"
]
benchmark=[
    "matplotlib",
    "networkx",
    "pandas",
    "protobuf<4.21",
    "wandb",
]
test=[
    "onnx",
    "onnxruntime",
    "pytest",
    "pytest-cov",
]
dev=[
    "ipython",
    "matplotlib-inline",
    "pre-commit",
    "torch_geometric[test]",
]
full = [
    "ase",
    "captum<0.7.0",
    "graphviz",
    "h5py",
    "matplotlib",
    "networkx",
    "numba<0.60.0",
    "opt_einsum",
    "pandas",
    "pgmpy",
    "pynndescent",
    "pytorch-memlab",
    "rdflib",
    "rdkit",
    "scikit-image",
    "statsmodels",
    "sympy",
    "tabulate",
    "torch_geometric[graphgym, modelhub]",
    "torchmetrics",
    "trimesh",
]

[project.urls]
homepage="https://pyg.org"
documentation="https://pytorch-geometric.readthedocs.io"
repository="https://github.com/pyg-team/pytorch_geometric.git"
changelog="https://github.com/pyg-team/pytorch_geometric/blob/master/CHANGELOG.md"

[tool.flit.module]
name="torch_geometric"

[tool.yapf]
based_on_style = "pep8"
split_before_named_assigns = false
blank_line_before_nested_class_or_def = false

[tool.mypy]
files = ["torch_geometric"]
install_types = true
non_interactive = true
ignore_missing_imports = true
show_error_codes = true
warn_redundant_casts = true
warn_unused_configs = true
warn_unused_ignores = true
disallow_untyped_defs = true
disallow_incomplete_defs = true

[[tool.mypy.overrides]]
ignore_errors = true
module = [
    "torch_geometric.data.*",
    "torch_geometric.sampler.*",
    "torch_geometric.loader.*",
    "torch_geometric.nn.*",
    "torch_geometric.explain.*",
    "torch_geometric.profile.*",
    "torch_geometric.contrib.*",
    "torch_geometric.graphgym.*",
    "torch_geometric.distributed.*",
]

[tool.isort]
multi_line_output = 3
include_trailing_comma = true
skip = [".gitignore", "__init__.py"]

[tool.ruff]  # https://docs.astral.sh/ruff/rules
src = ["torch_geometric"]
line-length = 80
indent-width = 4
target-version = "py38"

[tool.ruff.lint]
select = [
    "D",  # pydocstyle
]
ignore = [
    "D100",  # TODO Don't ignore "Missing docstring in public module"
    "D101",  # TODO Don't ignore "Missing docstring in public class"
    "D102",  # TODO Don't ignore "Missing docstring in public method"
    "D103",  # TODO Don't ignore "Missing docstring in public function"
    "D104",  # TODO Don't ignore "Missing docstring in public package"
    "D105",  # Ignore "Missing docstring in magic method"
    "D107",  # Ignore "Missing docstring in __init__"
    "D205",  # Ignore "blank line required between summary line and description"
]

[tool.ruff.format]
quote-style = "single"

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.pytest.ini_options]
addopts = [
    "--capture=no",
    "--color=yes",
    "-vv",
]
filterwarnings = [
    "ignore:distutils:DeprecationWarning",
    "ignore:'torch_geometric.contrib' contains experimental code:UserWarning",
    # Filter `torch` warnings:
    "ignore:The PyTorch API of nested tensors is in prototype stage:UserWarning",
    "ignore:scatter_reduce():UserWarning",
    "ignore:Sparse CSR tensor support is in beta state:UserWarning",
    "ignore:Sparse CSC tensor support is in beta state:UserWarning",
    "ignore:torch.distributed._sharded_tensor will be deprecated:DeprecationWarning",
    # Filter `torch.compile` warnings:
    "ignore:pkg_resources is deprecated as an API",
    "ignore:Deprecated call to `pkg_resources.declare_namespace",
    # Filter `captum` warnings:
    "ignore:Setting backward hooks on ReLU activations:UserWarning",
    "ignore:.*did not already require gradients, required_grads has been set automatically:UserWarning",
    # Filter `pytorch_lightning` warnings:
    "ignore:GPU available but not used:UserWarning",
]

[tool.coverage.run]
source = ["torch_geometric"]
omit = [
    "torch_geometric/distributed/*",
    "torch_geometric/datasets/*",
    "torch_geometric/data/extract.py",
    "torch_geometric/nn/data_parallel.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "pass",
    "raise NotImplementedError",
    "register_parameter",
    "torch.cuda.is_available",
]
